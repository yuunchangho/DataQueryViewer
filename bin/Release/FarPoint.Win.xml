<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FarPoint.Win</name>
    </assembly>
    <members>
        <member name="T:FarPoint.Win.AboutDialog">
            <summary>
            Represents an About dialog.
            </summary>
        </member>
        <member name="F:FarPoint.Win.AboutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FarPoint.Win.AboutDialog.#ctor">
            <summary>
            Creates a new about dialog.
            </summary>
        </member>
        <member name="M:FarPoint.Win.AboutDialog.LocalizeGUIStrings">
            <summary>
            Localize all GUI strings of this instance
            </summary>
        </member>
        <member name="M:FarPoint.Win.AboutDialog.#ctor(System.Drawing.Image,System.String,System.String,System.String)">
            <summary>
            Creates an About dialog with the specified settings.
            </summary>
            <param name="img">Image</param>
            <param name="info">String</param>
            <param name="serial">Serial number</param>
            <param name="updatesLink">Updates link</param>
        </member>
        <member name="M:FarPoint.Win.AboutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FarPoint.Win.AboutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FarPoint.Win.BorderConverter">
            <summary>
            Provides a drop-down list of border types for a property of type IBorder in the property grid.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type by using a specified set of
            property values for the object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether changing a value on this object should
            require a call to the CreateInstance method to create a new
            value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Retrieves the set of standard values for this type.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether this object supports properties.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether this object supports standard values.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the specified type can be converted to a border object.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="sourceType">Type</param>
            <returns>True if sourceType is String, false otherwise.</returns>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to a new border object.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="culture">CultureInfo</param>
            <param name="value">object</param>
            <returns>A new border object.</returns>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a value indicating whether a border object can be converted to the specified type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="destinationType">Type</param>
            <returns>True if a border object can be converted to the specified type, and false otherwise.</returns>
        </member>
        <member name="M:FarPoint.Win.BorderConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the border object to a string.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="culture">CultureInfo</param>
            <param name="value">object</param>
            <param name="destinationType">Type</param>
            <returns>String representation of a border object.</returns>
        </member>
        <member name="T:FarPoint.Win.BorderEditor">
            <summary>
            Represents the border editor.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderEditor.SetEditorProps(FarPoint.Win.IBorder,FarPoint.Win.BorderEditorUI)">
            <summary>
            Sets the border to be edited into the editor.
            </summary>
            <param name="border">IBorder to be edited</param>
            <param name="editor">BorderEditorUI</param>
        </member>
        <member name="M:FarPoint.Win.BorderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the border editor.
            </summary>
            <param name="context">Context</param>
            <param name="provider">Provider</param>
            <param name="value">Value</param>
        </member>
        <member name="M:FarPoint.Win.BorderEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the style of the border editor for the specified context.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:FarPoint.Win.BorderEditor.GetEditStyle">
            <summary>
            Gets the style of the border editor.
            </summary>
        </member>
        <member name="T:FarPoint.Win.AboutEditor">
            <summary>
            Represents the About dialog editor.
            </summary>
        </member>
        <member name="M:FarPoint.Win.AboutEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the values for the About dialog.
            </summary>
            <param name="context">Context</param>
            <param name="provider">Provider</param>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.AboutEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the style for the About dialog for the specified context.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:FarPoint.Win.AboutEditor.GetEditStyle">
            <summary>
            Gets the style for the About dialog.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ClipboardChangeNotifier">
            <summary>
            Provides a way to receive notifications of changes to the 
            content of the Clipboard using the Windows API.  
            </summary>
            <remarks>
            To be a part of the change notification you need to register a 
            window in the Clipboard Viewer Chain.  This provides
            notification messages to the window whenever the 
            Clipboard changes, and also messages associated with managing
            the chain.  This class manages the detail of keeping the
            chain intact and ensuring that the application is removed
            from the chain at the right point.
            </remarks>
        </member>
        <member name="F:FarPoint.Win.ClipboardChangeNotifier.nextViewerHandle">
            <summary>
            The next handle in the Clipboard viewer chain when the 
            Clipboard notification is installed, otherwise <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ClipboardChangeNotifier.disposed">
            <summary>
            Whether this class has been disposed or not.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ClipboardChangeNotifier.installedHandle">
            <summary>
            Window for which Clipboard change notification was installed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ClipboardChangeNotifier.ClipboardChanged">
            <summary>
            Notifies of a change to the clipboard's content.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Provides default WndProc processing and responds to
            Clipboard change notifications.
            </summary>
            <param name="e">Message</param>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.OnHandleChange">
            <summary>
            Responds to Window Handle change events and uninstalls
            the Clipboard change notification if it is installed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.Install">
            <summary>
            Installs Clipboard change notification.  
            The AssignHandle method of this class must have been called first.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.Uninstall">
            <summary>
            Uninstalls Clipboard change notification.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.OnClipboardChanged(System.EventArgs)">
            <summary>
            Raises the <c>ClipboardChanged</c> event.
            </summary>
            <param name="e">Blank event arguments.</param>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.Dispose">
            <summary>
            Uninstalls Clipboard event notifications if necessary
            during dispose of this object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.#ctor">
            <summary>
            Constructs a new instance of this class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ClipboardChangeNotifier.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="T:FarPoint.Win.ColorPicker">
            <summary>
            Represents a color picker.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ColorPicker.ColorChanged">
            <summary>
            Occurs when the Color property changes.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.OnColorChanged(System.EventArgs)">
            <summary>
            Fires the ColorChanged event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.FireColorChanged">
            <summary>
            Internal use only. Fires the color changed event.
            </summary> 
        </member>
        <member name="M:FarPoint.Win.ColorPicker.#ctor(System.Drawing.Color,System.Boolean)">
            <summary>
            Creates a color picker with the specified color and whether to use the drop-down control.
            </summary>
            <param name="c">Color</param>
            <param name="justShowDropDown">Whether to use the drop-down control</param>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.#ctor(System.Drawing.Color)">
            <summary>
            Creates a color picker with the specified color.
            </summary>
            <param name="c">Color</param>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.#ctor">
            <summary>
            Creates a color picker with the default color name.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ColorPicker.Color">
            <summary>
            Gets or sets the currently selected color.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ColorPicker.ShowColorName">
            <summary>
            Gets or sets the whether the color picker displays the name of the currently selected color.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.SetColor(System.Drawing.Color)">
            <summary>
            Sets the associated check box color and text according to the TextDisplayed property value.
            </summary>
            <param name="c">Color</param>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.ShowDropDown">
            <summary>
            Shows the drop-down control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.CloseDropDown">
            <summary>
            Closes the drop-down control.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ColorPicker.DropDownForm">
            <summary>
            Represents a simple Form descendant that hosts the drop-down control provided by the ColorEditor class 
            (in the call to DropDownControl).
            </summary>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.DropDownForm.#ctor">
            <summary>
            Creates a new drop-down form for the color picker.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.DropDownForm.SetControl(System.Windows.Forms.Control)">
            <summary>
            Sets the color control for the drop-down form.
            </summary>
            <param name="ctl">Control</param>
        </member>
        <member name="P:FarPoint.Win.ColorPicker.DropDownForm.Cancelled">
            <summary>
            Determines whether the user cancelled the drop-down control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.DropDownForm.CloseDropDown">
            <summary>
            Closes the drop-down control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.DropDownForm.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the key down event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.DropDownForm.OnDeactivate(System.EventArgs)">
            <summary>
            Raises the deactivate event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="T:FarPoint.Win.ColorPicker.EditorService">
            <summary>
            Represents the way to actually host the ColorEditor.ColorUI 
            by implementing the IWindowsFormsEditorService.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ColorPicker.EditorService._Picker">
            <summary>
            The associated color picker control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ColorPicker.EditorService._DropDownHolder">
            <summary>
            Reference to the drop-down form, which hosts the ColorUI control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ColorPicker.EditorService._Cancelled">
            <summary>
            Cached _DropDownHolder.Cancelled flag in order to allow it to be inspected
            by the owning ColorPicker control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.EditorService.#ctor(FarPoint.Win.ColorPicker)">
            <summary>
            Sets the editor service.
            </summary>
            <param name="owner">Color picker</param>
        </member>
        <member name="P:FarPoint.Win.ColorPicker.EditorService.Cancelled">
            <summary>
            Gets whether the color picker is cancelled.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.EditorService.CloseDropDown">
            <summary>
            Closes the drop-down dialog.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.EditorService.DropDownControl(System.Windows.Forms.Control)">
            <summary>
            Displays the drop-down control.
            </summary>
            <param name="control">Control</param>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.EditorService.ShowDialog(System.Windows.Forms.Form)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="dialog">Dialog form</param>
        </member>
        <member name="M:FarPoint.Win.ColorPicker.EditorService.GetService(System.Type)">
            <summary>
            Gets the service type.
            </summary>
            <param name="serviceType">Service type</param>
        </member>
        <member name="P:FarPoint.Win.ColorPicker.ForeColor">
            <summary>
            Gets or sets the text (foreground) color of the color picker.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ColorPicker.BackColor">
            <summary>
            Gets or sets the background color of the color picker.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ColorPicker.Text">
            <summary>
            Gets or sets the text of the color picker.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ColorPicker.Height">
            <summary>
            Gets or sets the height of the color picker.
            </summary>
        </member>
        <member name="T:FarPoint.Win.DPISupporting.DPISupportingMode">
            <summary>
            Represents the supporting DPI mode.
            </summary>
        </member>
        <member name="F:FarPoint.Win.DPISupporting.DPISupportingMode.DPI96">
            <summary>
            96 DPI
            </summary>
        </member>
        <member name="F:FarPoint.Win.DPISupporting.DPISupportingMode.DPI120">
            <summary>
            120 DPI (125% DPI)
            </summary>
        </member>
        <member name="F:FarPoint.Win.DPISupporting.DPISupportingMode.DPI144">
            <summary>
            144 DPI (150% DPI)
            </summary>
        </member>
        <member name="F:FarPoint.Win.DPISupporting.DPISupportingMode.DPI192">
            <summary>
            192 DPI (200% DPI)
            </summary>
        </member>
        <member name="F:FarPoint.Win.DPISupporting.DPISupportingMode.DPI240">
            <summary>
            240 DPI (250% DPI)
            </summary>
        </member>
        <member name="F:FarPoint.Win.DPISupporting.DPISupportingMode.DPI288">
            <summary>
            288 DPI (300% DPI)
            </summary>
        </member>
        <member name="F:FarPoint.Win.DPISupporting.DPISupportingMode.DPI384">
            <summary>
            384 DPI (400% DPI)
            </summary>
        </member>
        <member name="F:FarPoint.Win.DPISupporting.DPISupportingMode.DPI480">
            <summary>
            480 DPI (500% DPI)
            </summary>
        </member>
        <member name="T:FarPoint.Win.DPISupporting.ScaleResourceInfo">
            <summary>
            Represents the information about a scale version of resource file.
            </summary>
        </member>
        <member name="F:FarPoint.Win.DPISupporting.ScaleResourceInfo.ScaleFactor">
            <summary>
            The scale factor of resource file.
            </summary>
        </member>
        <member name="F:FarPoint.Win.DPISupporting.ScaleResourceInfo.ResourcePath">
            <summary>
            The path of the scale verion of resource file.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.ScaleResourceInfo.#ctor(System.Single,System.String)">
            <summary>
            Initializes the <see cref="T:FarPoint.Win.DPISupporting.ScaleResourceInfo"/> structure.
            </summary>
            <param name="scaleFactor">The scale factor of resource file.</param>
            <param name="resourcePath">The path of the scale verion of resource file.</param>
        </member>
        <member name="T:FarPoint.Win.DPISupporting.DPIUtils">
            <summary>
            The collection function that support multi DPI.
            </summary>
        </member>
        <member name="P:FarPoint.Win.DPISupporting.DPIUtils.CurrentDPI">
            <summary>
            Get the current DPI of the application environement.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetDPISupportingScaleFactor">
            <summary>
            Get the array of scale factors that corresspond to the supporting DPIs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.IsResourceExists(System.Reflection.Assembly,System.String)">
            <summary>
            Check if the specified resource exists in the specified assembly. If the specified assembly is null, check if the file specified by <para>resourcePath</para> exists.
            </summary>
            <param name="assembly">The assembly in which we check the specified resource.</param>
            <param name="resourcePath">Path to the specified resource.</param>
            <returns>true if the specified resource exists, otherwise false.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetScaleResourcePaths(System.String,System.Single[])">
            <summary>
            Get the path of scale versions from original path (1x version) of a specified resource.
            Note: The rule to form the path of scale version from original path (1x version) of a specified resource is:
            Add the ".(scaleFactor)x" to right before the "." that start the file extension. For example: 1.5x version of D:\abc.png is D:\abc.1.5x.png.
            </summary>
            <param name="resourcePath">The original path (1x version) of specifed resource.</param>
            <param name="scaleFactors">The scale factors of scale versions.</param>
            <returns>String array of the path of scale versions of a specifed resource.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetExistingScaleResourceInfos(System.Reflection.Assembly,System.String,System.Single[])">
            <summary>
            Get the list of existing scale versions of specified resource from the array of request scale versions.
            </summary>
            <param name="assembly">The assembly that contain the specified resource. If the assembly is null, that mean the specified resource is file.</param>
            <param name="resourcePath">The original path (1x version) of specifed resource.</param>
            <param name="scaleFactors">The scale factors of the request scale versions.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetBitmap(System.Reflection.Assembly,System.String,System.Single)">
            <summary>
            Get the specified scale Bitmap of specified Bitmap resource.
            The result Bitmap is scaled from the existing versions of the Bitmap resource of all DPI supporting scale versions (see <see cref="M:FarPoint.Win.DPISupporting.DPIUtils.GetDPISupportingScaleFactor"/>).
            </summary>
            <param name="assembly">The assembly that contain the specified resource. If the assembly is null, that mean the specified resource is file.</param>
            <param name="resourcePath">The original path (1x version) of specifed Bitmap resource.</param>
            <param name="requestScaleFactor">The scale factor of the result Bitmap.</param>
            <returns>The scaled Bitmap.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetBitmap(System.Reflection.Assembly,System.String,System.Single,System.Single[])">
            <summary>
            Get the specified scaled Bitmap of specified Bitmap resource. The result Bitmap is scaled from nearest existing higher resolution version in the specified scale versions of the Bitmap resource.
            If there isn't any existing higher resolution version, the result Bitmap is scaled from nearest existing lower resolution version in the specified scale versions of the Bitmap resource.
            </summary>
            <param name="assembly">The assembly that contain the specified resource. If the assembly is null, that mean the specified resource is file.</param>
            <param name="resourcePath">The original path (1x version) of specifed Bitmap resource.</param>
            <param name="requestScaleFactor">The scale factor of the result Bitmap.</param>
            <param name="scaleFactors">The scale factors of the specified scale versions of the Bitmap resource that would be used to create the result Bitmap.</param>
            <returns>The scaled Bitmap.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetBitmap(System.Reflection.Assembly,System.String,System.Single,System.Single[],FarPoint.Win.DPISupporting.IBitmapProcessing,FarPoint.Win.DPISupporting.IBitmapProcessing)">
            <summary>
            Get the specified scaled Bitmap of specified Bitmap resource. The result Bitmap is scaled from nearest existing higher resolution version in the specified scale versions of the Bitmap resource.
            If there isn't any existing higher resolution version, the result Bitmap is scaled from nearest existing lower resolution version in the specified scale versions of the Bitmap resource.
            </summary>
            <param name="assembly">The assembly that contain the specified resource. If the assembly is null, that mean the specified resource is file.</param>
            <param name="resourcePath">The original path (1x version) of specifed Bitmap resource.</param>
            <param name="requestScaleFactor">The scale factor of the result Bitmap.</param>
            <param name="scaleFactors">The scale factors of the specified scale versions of the Bitmap resource that would be used to create the result Bitmap.</param>
            <param name="prescaleProcessing">The Bitmap processing that would manipulate the Bitmap before scaling.</param>
            <param name="postscaleProcessing">The Bitmap processing that would manipulate the Bitmap after scaling.</param>
            <returns>The scaled Bitmap.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetImage(System.Reflection.Assembly,System.String,System.Single)">
            <summary>
            Get the specified scale Image of specified Image resource.
            The result Image is scaled from the existing versions of the Image resource of all DPI supporting scale versions (see <see cref="!:GetDPISupportingScaleFactor(void)"/>).
            </summary>
            <param name="assembly">The assembly that contain the specified Image resource. If the assembly is null, that mean the specified Image resource is file.</param>
            <param name="resourcePath">The original path (1x version) of specifed Image resource.</param>
            <param name="requestScaleFactor">The scale factor of the result Image.</param>
            <returns>The scaled Image.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetImage(System.Reflection.Assembly,System.String,System.Single,System.Single[])">
            <summary>
            Get the specified scale Image of specified Image resource.
            The result Image is scaled from nearest existing higher resolution version in the specified scale versions of the Image resource.
            If there isn't any existing higher resolution version, the result Image is scaled from nearest existing lower resolution version in the specified scale versions of the Image resource.
            </summary>
            <param name="assembly">The assembly that contain the specified Image resource. If the assembly is null, that mean the specified Image resource is file.</param>
            <param name="resourcePath">The original path (1x version) of specifed Image resource.</param>
            <param name="requestScaleFactor">The scale factor of the result Image.</param>
            <param name="scaleFactors">The scale factors of the specified scale versions of the Image resource that would be used to create the result Image.</param>
            <returns>The scaled Image.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.ScaleBitmap(System.Drawing.Bitmap,System.Single,FarPoint.Win.DPISupporting.IBitmapProcessing,FarPoint.Win.DPISupporting.IBitmapProcessing)">
            <summary>
            Scale the original Bitmap with the specified scale factor.
            </summary>
            <param name="originalBitmap">The original Bitmap.</param>
            <param name="scaleFactor">The specified scale factor.</param>
            <param name="prescaleProcessing">The Bitmap processing that would manipulate the Bitmap before scaling.</param>
            <param name="postscaleProcessing">The Bitmap processing that would manipulate the Bitmap after scaling.</param>
            <returns>The scaled Bitmap.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetBitmap(System.Reflection.Assembly,System.String)">
            <summary>
            Get the Bitmap from the specified resource.
            </summary>
            <param name="assembly">The assembly that contain the specified Bitmap resource. If the assembly is null, that mean the specified Bitmap resource is file.</param>
            <param name="resourcePath">The path of specifed Bitmap resource.</param>
            <returns>The Bitmap from the specified resource. If the specified resource doesn't exist, or the specified resource is not Bitmap resource, return null.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetImage(System.Reflection.Assembly,System.String)">
            <summary>
            Get the Image from the specified resource.
            </summary>
            <param name="assembly">The assembly that contain the specified Image resource. If the assembly is null, that mean the specified Image resource is file.</param>
            <param name="resourcePath">The path of specifed Image resource.</param>
            <returns>The Image from the specified resource. If the specified resource doesn't exist or can't be opened, or the specified resource is not Image resource, return null.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetStream(System.Reflection.Assembly,System.String)">
            <summary>
            Get the Stream of the specified resource.
            </summary>
            <param name="assembly">The assembly that contain the specified resource. If the assembly is null, that mean the specified resource is file.</param>
            <param name="resourcePath">The path of specifed resource.</param>
            <returns>The Stream from the specified resource. If the specified resource doesn't exist or can't be opened, return null.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetIcon(System.Reflection.Assembly,System.String,System.Int32)">
            <summary>
            Gets the icon from the specified resource.
            </summary>
            <param name="assembly">The assembly that contain the specified icon resource. If the assembly is null, that mean the specified icon resource is file.</param>
            <param name="resourcePath">The path of specifed icon resource.</param>
            <param name="size">Size of icon.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.DPIUtils.GetIcon(System.Reflection.Assembly,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the icon from the specified resource.
            </summary>
            <param name="assembly">The assembly that contain the specified icon resource. If the assembly is null, that mean the specified icon resource is file.</param>
            <param name="resourcePath">The path of specifed icon resource.</param>
            <param name="width">Width of icon.</param>
            <param name="height">Height of icon.</param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.DPISupporting.IBitmapProcessing">
            <summary>
            Represents an interface which provides supported method to process Bitmap.
            </summary>
        </member>
        <member name="T:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager">
            <summary>
            Represents the manager that support getting multiscaling versions of ImageList from resources.
            All the ImageList getting from this manager are cached in the manager for later requirement.
            When the manager is disposed, all the ImageList getting from this manager are also  disposed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager.#ctor(System.Boolean)">
            <summary>
            Initializes the <see cref="T:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager"/> object.
            </summary>
            <param name="imageListHaveKey">Indicates if each image in the ImageList would have key (key is equal to the path of the original (1x) Image resource.</param>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager.#ctor(System.Drawing.Size,System.Boolean)">
            <summary>
            Initializes the <see cref="T:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager"/> object.
            </summary>
            <param name="imageSize">The size of original (1x) image in the original (1x) ImageList.</param>
            <param name="imageListHaveKey">Indicates if each image in the ImageList would have key (key is equal to the path of the original (1x) Image resource.</param>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager.#ctor(System.Windows.Forms.ColorDepth,System.Boolean)">
            <summary>
            Initializes the <see cref="T:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager"/> object.
            </summary>
            <param name="colorDepth">The color depth of image in ImageList.</param>
            <param name="imageListHaveKey">Indicates if each image in the ImageList would have key (key is equal to the path of the original (1x) Image resource.</param>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager.#ctor(System.Drawing.Size,System.Windows.Forms.ColorDepth,System.Boolean)">
            <summary>
            Initializes the <see cref="T:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager"/> object.
            </summary>
            <param name="imageSize">The size of original (1x) image in the original (1x) ImageList.</param>
            <param name="colorDepth">The color depth of image in ImageList.</param>
            <param name="imageListHaveKey">Indicates if each image in the ImageList would have key (key is equal to the path of the original (1x) Image resource.</param>
        </member>
        <member name="P:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager.Count">
            <summary>
            Gets the number of Image.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager.AddImage(System.Reflection.Assembly,System.String)">
            <summary>
            Add the specifed Image to the manager.
            </summary>
            <param name="assembly">The assembly that contain the specified Image resource. If the assembly is null, that mean the specified Image resource is file.</param>
            <param name="resourcePath">The original path (1x version) of specifed Image resource.</param>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager.Clear">
            <summary>
            Clear all the Image from the manager
            </summary>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager.GetImageList(System.Single)">
            <summary>
            Get the specified scale version ImageList from the manager
            </summary>
            <param name="scaleFactor">The specifed scale factor.</param>
            <returns>The specified scale version ImageList.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingImageListResourcesManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:FarPoint.Win.DPISupporting.MultiScalingBitmapManager">
            <summary>
            Represents the manager that support getting multiscaling versions of Bitmap from resources or provided multiresolution versions of a Bitmap.
            All the Bitmap getting from this manager are not cached in the manager. So we must dispose the getting Bitmap when we don't need to use that Bitmap.
            The Bitmap may hold the Bitmaps loading from the resources of the clone versions of the provided multiresolution versions of a Bitmap.
            So the manager need to be disposed when we don't need to use the manager.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingBitmapManager.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes the <see cref="T:FarPoint.Win.DPISupporting.MultiScalingBitmapManager"/> object. The manager would create the getting request Bitmap by scaling from the existing supporting DPI scaling versions of the Bitmap.
            </summary>
            <param name="resourcePath">The original path (1x version) of specifed Image resource in the filesystem.</param>
            <param name="preloadExistingBitmap">Indicates if we should preload the existing supporting DPI scaling versions of the Bitmap into the manager.</param>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingBitmapManager.#ctor(System.String,System.Single[],System.Boolean)">
            <summary>
            Initializes the <see cref="T:FarPoint.Win.DPISupporting.MultiScalingBitmapManager"/> object. The manager would create the getting request Bitmap by scaling from the existing specified scaling versions of the Bitmap.
            </summary>
            <param name="resourcePath">The original path (1x version) of specifed Image resource in the filesystem.</param>
            <param name="scaleFactors">The scale factors of the specified scale versions of the Bitmap resource that would be used to create the result Bitmap.</param>
            <param name="preloadExistingBitmap">Indicates if we should preload the existing supporting DPI scaling versions of the Bitmap into the manager.</param>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingBitmapManager.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes the <see cref="T:FarPoint.Win.DPISupporting.MultiScalingBitmapManager"/> object. The manager would create the getting request Bitmap by scaling from the existing supporting DPI scaling versions of the Bitmap.
            The manager would preload the existing supporting DPI scaling versions of the Bitmap into the manager.
            </summary>
            <param name="assembly">The assembly that contain the specified Bitmap resource. If the assembly is null, that mean the specified Bitmap resource is file.</param>
            <param name="resourcePath">The original path (1x version) of specifed Image resource.</param>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingBitmapManager.#ctor(System.Reflection.Assembly,System.String,System.Single[])">
            <summary>
            Initializes the <see cref="T:FarPoint.Win.DPISupporting.MultiScalingBitmapManager"/> object. The manager would create the getting request Bitmap by scaling from the existing specified scaling versions of the Bitmap.
            The manager would preload the existing specified scaling versions of the Bitmap into the manager.
            </summary>
            <param name="assembly">The assembly that contain the specified Bitmap resource. If the assembly is null, that mean the specified Bitmap resource is file.</param>
            <param name="resourcePath">The original path (1x version) of specifed Image resource.</param>
            <param name="scaleFactors">The scale factors of the specified scale versions of the Bitmap resource that would be used to create the result Bitmap.</param>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingBitmapManager.#ctor(System.Collections.Generic.Dictionary{System.Single,System.Drawing.Bitmap})">
            <summary>
            Initializes the <see cref="T:FarPoint.Win.DPISupporting.MultiScalingBitmapManager"/> object. The manager would create the getting request Bitmap by scaling from the existing specified scaling versions of the Bitmap.
            </summary>
            <param name="bitmapDict">The specified scale versions of the Bitmap.</param>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingBitmapManager.GetBitmap(System.Single)">
            <summary>
            Get the specified scaled Bitmap of specified Bitmap resource. The result Bitmap is scaled from nearest existing higher resolution version in the specified scale versions of the Bitmap resource.
            If there isn't any existing higher resolution version, the result Bitmap is scaled from nearest existing lower resolution version in the specified scale versions of the Bitmap resource.
            </summary>
            <param name="assembly">The assembly that contain the specified resource. If the assembly is null, that mean the specified resource is file.</param>
            <param name="resourcePath">The original path (1x version) of specifed Bitmap resource.</param>
            <param name="requestScaleFactor">The scale factor of the result Bitmap.</param>
            <param name="scaleFactors">The scale factors of the specified scale versions of the Bitmap resource that would be used to create the result Bitmap.</param>
            <param name="prescaleProcessing">The Bitmap processing that would manipulate the Bitmap before scaling.</param>
            <param name="postscaleProcessing">The Bitmap processing that would manipulate the Bitmap after scaling.</param>
            <returns>The scaled Bitmap.</returns>
            <summary>
            Get the specified scaled Bitmap of the Bitmap resource. The result Bitmap is scaled from nearest existing higher resolution version in the specified scale versions of the Bitmap resource.
            If there isn't any existing higher resolution version, the result Bitmap is scaled from nearest existing lower resolution version in the specified scale versions of the Bitmap resource.
            </summary>
            <param name="scaleFactor">The scale factor of the result Bitmap.</param>
            <returns>The scaled Bitmap.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingBitmapManager.GetBitmap(System.Single,FarPoint.Win.DPISupporting.IBitmapProcessing,FarPoint.Win.DPISupporting.IBitmapProcessing)">
            <summary>
            Get the specified scaled Bitmap of the Bitmap resource. The result Bitmap is scaled from nearest existing higher resolution version in the specified scale versions of the Bitmap resource.
            If there isn't any existing higher resolution version, the result Bitmap is scaled from nearest existing lower resolution version in the specified scale versions of the Bitmap resource.
            </summary>
            <param name="scaleFactor">The scale factor of the result Bitmap.</param>
            <param name="prescaleProcessing">The Bitmap processing that would manipulate the Bitmap before scaling.</param>
            <param name="postscaleProcessing">The Bitmap processing that would manipulate the Bitmap after scaling.</param>
            <returns>The scaled Bitmap.</returns>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingBitmapManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DPISupporting.MultiScalingBitmapManager.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:FarPoint.Win.EventBroker.EventManager">
            <summary>
            Allows manages event sources and subscribers in event pipes. It also allows to transfer data to subscribers on an event pipe.
            </summary>
        </member>
        <member name="P:FarPoint.Win.EventBroker.EventManager.Pipes">
            <summary>
            Gets list of event pipe
            </summary>
        </member>
        <member name="P:FarPoint.Win.EventBroker.EventManager.Subscribers">
            <summary>
            Gets subscriber collections
            </summary>
        </member>
        <member name="M:FarPoint.Win.EventBroker.EventManager.Invoke(System.String,System.Object,System.Object)">
            <summary>
            Invokes methods of subscribers that are registered at specific event address.
            </summary>
            <param name="address">Identity of event pipe that contains subscribers</param>
        </member>
        <member name="M:FarPoint.Win.EventBroker.EventManager.Publish(System.Object)">
            <summary>
            Publishes events on event pipes.
            </summary>
            <param name="publisher">Publisher</param>
        </member>
        <member name="M:FarPoint.Win.EventBroker.EventManager.Subscribe(System.String,System.Object,System.String,System.Type[])">
            <summary>
            Subscribes events at specific event address
            </summary>
            <param name="address">The address that will send event to</param>
            <param name="subsriber">Subscriber</param>
            <param name="methodName">Method name</param>
            <param name="argsTypes">List of parameter types of method. Set Null if has no parameter</param>
        </member>
        <member name="M:FarPoint.Win.EventBroker.EventManager.Subscribe(System.Object)">
            <summary>
            Subscribes events at event addresses that are bound on methods of subscriber.
            </summary>
            <param name="subscriber">Subscriber</param>
        </member>
        <member name="M:FarPoint.Win.EventBroker.EventManager.Subscribe(System.Object,System.String)">
            <summary>
            Subscribes events at event addresses that are bound on methods of subscriber.
            </summary>
            <param name="subscriber">Subscriber</param>
            <param name="methodName">Name of method of subscriber</param>
        </member>
        <member name="M:FarPoint.Win.EventBroker.EventManager.UnSubscribe(System.Object)">
            <summary>
            Unsubcribes events on event pipes
            </summary>
            <param name="Subscriber">Subscriber need to unsubscribe.</param>
        </member>
        <member name="T:FarPoint.Win.EventBroker.Pipes">
            <summary>
            A storage of event pipes.
            </summary>
        </member>
        <member name="M:FarPoint.Win.EventBroker.Pipes.Find(System.String)">
            <summary>
            Finds an event pipe by address.
            </summary>
            <param name="address">Identity of event pipe.</param>
        </member>
        <member name="M:FarPoint.Win.EventBroker.Pipes.Remove(System.String)">
            <summary>
            Remove a event pipe of collection.
            </summary>
            <param name="address">Identity of event pipe need to remove.</param>
        </member>
        <member name="M:FarPoint.Win.EventBroker.Pipes.RemoveAll">
            <summary>
            Remove all event pipes of collection.
            </summary>
        </member>
        <member name="T:FarPoint.Win.EventBroker.Pipe">
            <summary>
            Defines an event pipe that allows manages subscribers, invokes automatically methods of subscribers if an event is raised.
            </summary>
        </member>
        <member name="M:FarPoint.Win.EventBroker.Pipe.#ctor(FarPoint.Win.EventBroker.Pipes,System.Int32)">
            <summary>
            A constructor of event pipe.
            </summary>
            <param name="address">Identity of event pipe</param>
        </member>
        <member name="M:FarPoint.Win.EventBroker.Pipe.FireEvent(System.Object,System.Object)">
            <summary>
            Fire methods of subscribers that belong to this event pipe
            </summary>
            <param name="sender">A sender</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.EventBroker.Pipe.PublishEvent(System.Object,System.Reflection.EventInfo)">
            <summary>
            Publishes an event into this pipe.
            </summary>
            <param name="publisher">Publisher</param>
            <param name="eventInfo">EventInfo of event need to publish</param>
        </member>
        <member name="M:FarPoint.Win.EventBroker.PublisherSubscriberAttribue.#ctor(System.String)">
            <summary>
            A constructor of PublisherSubscriberAttribue
            </summary>
            <param name="Address">Identity of event pipe</param>
        </member>
        <member name="P:FarPoint.Win.EventBroker.PublisherSubscriberAttribue.Address">
            <summary>
            Gets identify of event pipe.
            </summary>
        </member>
        <member name="T:FarPoint.Win.FontSelector">
            <summary>
            Represents the font selector.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FontSelector.#ctor">
            <summary>
            Creates a new font selector.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FontSelector.#ctor(System.Boolean)">
            <summary>
            Creates a new font selector.
            </summary>
            <param name="renderAsFont">Whether to render as a font</param>
        </member>
        <member name="M:FarPoint.Win.FontSelector.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new font selector.
            </summary>
            <param name="renderAsFont">Whether to render as a font</param>
            <param name="sampleString">Sample string</param>
        </member>
        <member name="P:FarPoint.Win.FontSelector.HideImage">
            <summary>
            Gets or sets whether to hide the image.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FontSelector.RenderListWithFont">
            <summary>
            Gets or sets whether to render the font list items with their respective font.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FontSelector.RefreshList">
            <summary>
            Refreshes the list.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FontSelector.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">
            <summary>
            Occurs when the item is measured.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.FontSelector.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Occurs when the item is drawn.
            </summary>
            <param name="e">Event items</param>
        </member>
        <member name="M:FarPoint.Win.FontSelector.OnDropDown(System.EventArgs)">
            <summary>
            Occurs when dropped down.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:FarPoint.Win.Rect">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Rect.left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Rect.top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Rect.right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Rect.bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:FarPoint.Win.HorizontalAlignment">
            <summary>
            Specifies the horizontal alignment of the contents of the control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.HorizontalAlignment.Left">
            <summary>
            Aligns the contents of the control to the left side along the horizontal axis
            </summary>
        </member>
        <member name="F:FarPoint.Win.HorizontalAlignment.Center">
            <summary>
            Aligns the contents of the control equally between the left and right along the horizontal axis
            </summary>
        </member>
        <member name="F:FarPoint.Win.HorizontalAlignment.Right">
            <summary>
            Aligns the contents of the control to the right side along the horizontal axis
            </summary> 
        </member>
        <member name="F:FarPoint.Win.HorizontalAlignment.Justify">
            <summary>
            Aligns wrapped text within a cell to the right and left.
            </summary>
        </member>
        <member name="F:FarPoint.Win.HorizontalAlignment.Distributed">
            <summary>
            Aligns text within a cell to the right and left.
            </summary>
        </member>
        <member name="T:FarPoint.Win.VerticalAlignment">
            <summary>
            Specifies the vertical alignment of the contents of the control.
            </summary>    
        </member>
        <member name="F:FarPoint.Win.VerticalAlignment.Top">
            <summary>
            Aligns the contents of the control to the top along the vertical axis
            </summary>
        </member>
        <member name="F:FarPoint.Win.VerticalAlignment.Center">
            <summary>
            Aligns the contents of the control equally between the top and bottom along the vertical axis
            </summary> 
        </member>
        <member name="F:FarPoint.Win.VerticalAlignment.Bottom">
            <summary>
            Aligns the contents of the control to the bottom along the vertical axis
            </summary> 
        </member>
        <member name="F:FarPoint.Win.VerticalAlignment.Justify">
            <summary>
            Indicates the text is inserted some whitespaces to make the text fill the special area.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VerticalAlignment.Distributed">
            <summary>
            Indicates the text is inserted some whitespaces to make the text fill the special area.
            </summary>
        </member>
        <member name="T:FarPoint.Win.AppearanceProps">
            <summary>
            Internal use only. Specifies the appearance properties.
            </summary>
        </member>
        <member name="F:FarPoint.Win.AppearanceProps.HorizontalAlignment">
            <summary>
            Horizontal alignment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.AppearanceProps.VerticalAlignment">
            <summary>
            Vertical alignment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.AppearanceProps.Parent">
            <summary>
            Parent object.
            </summary>
        </member>
        <member name="F:FarPoint.Win.AppearanceProps.Font">
            <summary>
            Text font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.AppearanceProps.BackColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="F:FarPoint.Win.AppearanceProps.ForeColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="T:FarPoint.Win.PictureProps">
            <summary>
            Internal use only. Specifies the picture properties.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureProps.Stretch">
            <summary>
            Stretches the picture to fit the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureProps.MaintainScale">
            <summary>
            Maintains the ratio of the picture in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureProps.HorizontalAlignment">
            <summary>
            Aligns the picture horizontally
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureProps.VerticalAlignment">
            <summary>
            Aligns the picture vertically
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureProps.Image">
            <summary>
            Set the picture image
            </summary>
        </member>
        <member name="T:FarPoint.Win.RenderStyle">
            <summary>
            Specifies the rendering style for images.
            </summary>
        </member>
        <member name="F:FarPoint.Win.RenderStyle.Normal">
            <summary>
            Displays image with its actual dimensions in the control (and no resizing)
            </summary>
        </member>
        <member name="F:FarPoint.Win.RenderStyle.Stretch">
            <summary>
            Sizes image to fit in the control without regard to its aspect ratio
            </summary>
        </member>
        <member name="F:FarPoint.Win.RenderStyle.StretchAndScale">
            <summary>
            Sizes image to fit in the control with regard to its aspect ratio
            </summary>
        </member>
        <member name="F:FarPoint.Win.RenderStyle.Tile">
            <summary>
            Displays image multiple times (in a tile fashion) in order to fill the control
            </summary>
        </member>
        <member name="T:FarPoint.Win.VisualStyles">
            <summary>
            Specifies if visual styles are applied to the control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyles.Auto">
            <summary>
            Uses the system settings to determine how the control is displayed
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyles.On">
            <summary>
            Applies visual styles when displaying the control 
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyles.Off">
            <summary>
            Does not use visual styles when displaying the control
            </summary>
        </member>
        <member name="T:FarPoint.Win.VisualStyle">
            <summary>
            Represents a visual style.
            </summary>
        </member>
        <member name="T:FarPoint.Win.VisualStyle.RECT">
            <summary>
            Internal use only. Defines the rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RECT.left">
            <summary>
            Defines the left
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RECT.top">
            <summary>
            Defines the top
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RECT.right">
            <summary>
            Defines the right
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RECT.bottom">
            <summary>
            Defines the bottom
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.RECT.ToString">
            <summary>
            Convert to string.
            </summary>
        </member>
        <member name="T:FarPoint.Win.VisualStyle.RGN">
            <summary>
            Internal use only. Defines the range.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RGN.left">
            <summary>
            Defines the left
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RGN.top">
            <summary>
            Defines the top
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RGN.right">
            <summary>
            Defines the right
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RGN.bottom">
            <summary>
            Defines the bottom
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.RGN.ToString">
            <summary>
            Converts to a string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.UseVisualStyles(System.Windows.Forms.VisualStyles.VisualStyleState,FarPoint.Win.VisualStyles)">
            <summary>
            Detects whether the visual style mode are supported for the VisualStyleState and the VisualStyles.
            </summary>
            <param name="state">A VisualStyleState that needs detect.</param>
            <param name="style">A VisualStyles that needs detect.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.IsThemeActive">
            <summary>
            Internal use only. Determines if the theme is the active theme.
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.OpenThemeData(System.IntPtr,System.String)">
            <summary>
            Internal use only. Opens theme data.
            </summary>
            <param name="hWnd"></param>
            <param name="pszClassList"></param>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.CloseThemeData(System.IntPtr)">
            <summary>
            Internal use only. Closes theme data.
            </summary>
            <param name="hTheme"></param>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.DrawThemeBackground(System.IntPtr,System.IntPtr,System.Int32,System.Int32,FarPoint.Win.VisualStyle.RECT@,FarPoint.Win.VisualStyle.RECT@)">
            <summary>
            Internal use only. Draws the theme background.
            </summary>
            <param name="hTheme"></param>
            <param name="hDC"></param>
            <param name="iPartId"></param>
            <param name="iStateId"></param>
            <param name="pRect"></param>
            <param name="pClipRect"></param>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.GetThemeInt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Internal use only. Gets the theme index.
            </summary>
            <param name="hTheme"></param>
            <param name="iPartId"></param>
            <param name="iStateId"></param>
            <param name="iPropId"></param>
            <param name="piVal"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.GetDeviceCaps(System.IntPtr,System.Int32)">
            <summary>
            Internal use only. Gets the device caps.
            </summary>
            <param name="hdc"></param>
            <param name="cap"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.DrawThemeText(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,FarPoint.Win.VisualStyle.RECT@)">
            <summary>
            Internal use only. Draws the theme text.
            </summary>
            <param name="hTheme"></param>
            <param name="hDC"></param>
            <param name="iPartId"></param>
            <param name="iStateId"></param>
            <param name="pszText"></param>
            <param name="iCharCount"></param>
            <param name="dwTextFlag"></param>
            <param name="dwTextFlags2"></param>
            <param name="pRect"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.GetCurrentThemeName(System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32)">
            <summary>
            Gets the current theme name.
            </summary>
            <param name="pszThemeFileName">Theme name</param>
            <param name="cchMaxNameChars">Maximum number of characters in the name</param>
            <param name="pszColorBuff">Buffer for the color name</param>
            <param name="cchMaxColorChars">Maximum number of characters in the color</param>
            <param name="pszSizeBuff">Buffer for the size</param>
            <param name="cchMaxSizeChars">Maximum number of characters in the size</param>
        </member>
        <member name="T:FarPoint.Win.VisualStyle.XFORM">
            <summary>
            Internal use only. Transforms.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.XFORM.eM11">
            <summary>
            Sets M11.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.XFORM.eM12">
            <summary>
            Sets M12.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.XFORM.eM21">
            <summary>
            Sets M21.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.XFORM.eM22">
            <summary>
            Sets M22.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.XFORM.eDx">
            <summary>
            Sets dx.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.XFORM.eDy">
            <summary>
            Sets dy.
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.XFORM.ToString">
            <summary>
            Converts to a string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.SetWorldTransform(System.IntPtr,FarPoint.Win.VisualStyle.XFORM@)">
            <summary>The SetWorldTransform method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.SetGraphicsMode(System.IntPtr,System.Int32)">
            <summary>The SetGraphicsMode method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.DeleteObject(System.IntPtr)">
            <summary>The DeleteObject method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>The BitBlt method.</summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.FPVSBUTTONCLASS">
            <summary>
            FPVSBUTTONCLASS constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.FPVSCOMBOCLASS">
            <summary>
            FPVSCOMBOCLASS constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.FPVSPROGRESSCLASS">
            <summary>
            FPVSPROGRESSCLASS constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.FPVSSLIDERCLASS">
            <summary>
            FPVSSLIDERCLASS constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.FPVSSPINCLASS">
            <summary>
            FPVSSPINCLASS constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.FPVSSCROLLBARCLASS">
            <summary>
            FPVSSCROLLBARCLASS constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.FPVSHEADERCLASS">
            <summary>
            FPVSHEADERCLASS constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.FPVSTABCLASS">
            <summary>
            FPVSTABCLASS constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TABP_TABITEM">
            <summary>
            TABP_TABITEM constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TIS_NORMAL">
            <summary>
            TIS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TIS_HOT">
            <summary>
            TIS_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TIS_SELECTED">
            <summary>
            TIS_SELECTED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TIS_DISABLED">
            <summary>
            TIS_DISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TIS_FOCUSED">
            <summary>
            TIS_FOCUSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SBP_NONE">
            <summary>
            SBP_NONE constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SBP_ARROWBTN">
            <summary>
            SBP_ARROWBTN constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SBP_THUMBBTNHORZ">
            <summary>
            SBP_THUMBBTNHORZ constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SBP_THUMBBTNVERT">
            <summary>
            SBP_THUMBBTNVERT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SCRBS_NONE">
            <summary>
            SCRBS_NONE constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SCRBS_NORMAL">
            <summary>
            SCRBS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SCRBS_HOT">
            <summary>
            SCRBS_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SCRBS_PRESSED">
            <summary>
            SCRBS_PRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SCRBS_DISABLED">
            <summary>
            SCRBS_DISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_UPNORMAL">
            <summary>
            ABS_UPNORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_UPHOT">
            <summary>
            ABS_UPHOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_UPPRESSED">
            <summary>
            ABS_UPPRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_UPDISABLED">
            <summary>
            ABS_UPDISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_DOWNNORMAL">
            <summary>
            ABS_DOWNNORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_DOWNHOT">
            <summary>
            ABS_DOWNHOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_DOWNPRESSED">
            <summary>
            ABS_DOWNPRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_DOWNDISABLED">
            <summary>
            ABS_DOWNDISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_LEFTNORMAL">
            <summary>
            ABS_LEFTNORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_LEFTHOT">
            <summary>
            ABS_LEFTHOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_LEFTPRESSED">
            <summary>
            ABS_LEFTPRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_LEFTDISABLED">
            <summary>
            ABS_LEFTDISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_RIGHTNORMAL">
            <summary>
            ABS_RIGHTNORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_RIGHTHOT">
            <summary>
            ABS_RIGHTHOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_RIGHTPRESSED">
            <summary>
            ABS_RIGHTPRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.ABS_RIGHTDISABLED">
            <summary>
            ABS_RIGHTDISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.HP_NONE">
            <summary>
            HP_NONE constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.HP_HEADERITEM">
            <summary>
            HP_HEADERITEM constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.HP_HEADERITEMLEFT">
            <summary>
            HP_HEADERITEMLEFT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.HP_HEADERITEMRIGHT">
            <summary>
            HP_HEADERITEMRIGHT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.HIS_NONE">
            <summary>
            HIS_NONE constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.HIS_NORMAL">
            <summary>
            HIS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.HIS_HOT">
            <summary>
            HIS_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.HIS_PRESSED">
            <summary>
            HIS_PRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CP_DROPDOWNBUTTON">
            <summary>
            CP_DROPDOWNBUTTON constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBXS_NORMAL">
            <summary>
            CBXS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBXS_HOT">
            <summary>
            CBXS_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBXS_PRESSED">
            <summary>
            CBXS_PRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBXS_DISABLED">
            <summary>
            CBXS_DISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TKP_TRACK">
            <summary>
            TKP_TRACK constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TKP_TRACKVERT">
            <summary>
            TKP_TRACKVERT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TKP_THUMB">
            <summary>
            TKP_THUMB constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TKP_THUMBBOTTOM">
            <summary>
            TKP_THUMBBOTTOM constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TKP_THUMBTOP">
            <summary>
            TKP_THUMBTOP constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TKP_THUMBVERT">
            <summary>
            TKP_THUMBVERT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TKP_THUMBLEFT">
            <summary>
            TKP_THUMBLEFT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TKP_THUMBRIGHT">
            <summary>
            TKP_THUMBRIGHT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TKP_TICS">
            <summary>
            TKP_TICS constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TKP_TICSVERT">
            <summary>
            TKP_TICSVERT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TKS_NORMAL">
            <summary>
            TKS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TSVS_NORMAL">
            <summary>
            TSVS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TSS_NORMAL">
            <summary>
            TSS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TRS_NORMAL">
            <summary>
            TRS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TRVS_NORMAL">
            <summary>
            TRVS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUS_NORMAL">
            <summary>
            TUS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUS_HOT">
            <summary>
            TUS_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUS_PRESSED">
            <summary>
            TUS_PRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUS_FOCUSED">
            <summary>
            TUS_FOCUSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUS_DISABLED">
            <summary>
            TUS_DISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUBS_NORMAL">
            <summary>
            TUBS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUBS_HOT">
            <summary>
            TUBS_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUBS_PRESSED">
            <summary>
            TUBS_PRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUBS_FOCUSED">
            <summary>
            TUBS_FOCUSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUBS_DISABLED">
            <summary>
            TUBS_DISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUTS_NORMAL">
            <summary>
            TUTS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUTS_HOT">
            <summary>
            TUTS_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUTS_PRESSED">
            <summary>
            TUTS_PRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUTS_FOCUSED">
            <summary>
            TUTS_FOCUSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUTS_DISABLED">
            <summary>
            TUTS_DISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVS_NORMAL">
            <summary>
            TUVS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVS_HOT">
            <summary>
            TUVS_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVS_PRESSED">
            <summary>
            TUVS_PRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVS_FOCUSED">
            <summary>
            TUVS_FOCUSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVS_DISABLED">
            <summary>
             constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVLS_NORMAL">
            <summary>
            TUVLS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVLS_HOT">
            <summary>
            TUVLS_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVLS_PRESSED">
            <summary>
            TUVLS_PRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVLS_FOCUSED">
            <summary>
            TUVLS_FOCUSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVLS_DISABLED">
            <summary>
            TUVLS_DISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVRS_NORMAL">
            <summary>
            TUVRS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVRS_HOT">
            <summary>
            TUVRS_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVRS_PRESSED">
            <summary>
            TUVRS_PRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVRS_FOCUSED">
            <summary>
            TUVRS_FOCUSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TUVRS_DISABLED">
            <summary>
            TUVRS_DISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TP_BUTTON">
            <summary>
            TP_BUTTON constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.BP_PUSHBUTTON">
            <summary>
            BP_PUSHBUTTON constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.BP_RADIOBUTTON">
            <summary>
            BP_RADIOBUTTON constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.BP_CHECKBOX">
            <summary>
            BP_CHECKBOX constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TS_NORMAL">
            <summary>
            TS_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TS_HOT">
            <summary>
            TS_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TS_PRESSED">
            <summary>
            TS_PRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TS_DISABLED">
            <summary>
            TS_DISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TS_CHECKED">
            <summary>
            TS_CHECKED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TS_HOTCHECKED">
            <summary>
            TS_HOTCHECKED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.PBS_DISABLED">
            <summary>
            PBS_DISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RBS_UNCHECKEDNORMAL">
            <summary>
            RBS_UNCHECKEDNORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RBS_UNCHECKEDHOT">
            <summary>
            RBS_UNCHECKEDHOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RBS_UNCHECKEDPRESSED">
            <summary>
            RBS_UNCHECKEDPRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RBS_UNCHECKEDDISABLED">
            <summary>
            RBS_UNCHECKEDDISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RBS_CHECKEDNORMAL">
            <summary>
            RBS_CHECKEDNORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RBS_CHECKEDHOT">
            <summary>
            RBS_CHECKEDHOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RBS_CHECKEDPRESSED">
            <summary>
            RBS_CHECKEDPRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RBS_CHECKEDDISABLED">
            <summary>
            RBS_CHECKEDDISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_UNCHECKEDNORMAL">
            <summary>
            CBS_UNCHECKEDNORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_UNCHECKEDHOT">
            <summary>
            CBS_UNCHECKEDHOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_UNCHECKEDPRESSED">
            <summary>
            CBS_UNCHECKEDPRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_UNCHECKEDDISABLED">
            <summary>
            CBS_UNCHECKEDDISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_CHECKEDNORMAL">
            <summary>
            CBS_CHECKEDNORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_CHECKEDHOT">
            <summary>
            CBS_CHECKEDHOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_CHECKEDPRESSED">
            <summary>
            CBS_CHECKEDPRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_CHECKEDDISABLED">
            <summary>
            CBS_CHECKEDDISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_MIXEDNORMAL">
            <summary>
            CBS_MIXEDNORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_MIXEDHOT">
            <summary>
            CBS_MIXEDHOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_MIXEDPRESSED">
            <summary>
            CBS_MIXEDPRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.CBS_MIXEDDISABLED">
            <summary>
            CBS_MIXEDDISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.PP_BAR">
            <summary>
            PP_BAR constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.PP_BARVERT">
            <summary>
            PP_BARVERT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.PP_CHUNK">
            <summary>
            PP_CHUNK constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.PP_CHUNKVERT">
            <summary>
            PP_CHUNKVERT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.PP_CHUNKSIZE">
            <summary>
            PP_CHUNKSIZE constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.PP_CHUNKSPACING">
            <summary>
            PP_CHUNKSPACING constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SPIN_UP">
            <summary>
            SPIN_UP constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SPIN_DOWN">
            <summary>
            SPIN_DOWN constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SPIN_NORMAL">
            <summary>
            SPIN_NORMAL constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SPIN_HOT">
            <summary>
            SPIN_HOT constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SPIN_PRESSED">
            <summary>
            SPIN_PRESSED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.SPIN_DISABLED">
            <summary>
            SPIN_DISABLED constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.TECHNOLOGY">
            <summary>
            TECHNOLOGY constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.DT_RASDISPLAY">
            <summary>
            DT_RASDISPLAY constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RGN_AND">
            <summary>
            RGN_AND constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RGN_OR">
            <summary>
            RGN_OR constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RGN_XOR">
            <summary>
            RGN_XOR constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RGN_DIFF">
            <summary>
            RGN_DIFF constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyle.RGN_COPY">
            <summary>
            RGN_COPY constant.
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.PatBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The PatBlt method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.SetROP2(System.IntPtr,System.Int32)">
            <summary>The SetROP2 method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>The SelectObject method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.CreateSolidBrush(System.Int32)">
            <summary>The CreateSolidBrush method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.ExcludeClipRect(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The ExcludeClipRect method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.ExtSelectClipRgn(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>The ExtSelectClipRgn method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.IntersectClipRect(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The IntersectClipRect method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The CreateRectRgn method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.SaveDC(System.IntPtr)">
            <summary>The SaveDC method.</summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyle.RestoreDC(System.IntPtr,System.Int32)">
            <summary>The RestoreDC method.</summary>
        </member>
        <member name="T:FarPoint.Win.Picture">
            <summary>
            Represents a picture to display. 
            </summary>
        </member>
        <member name="E:FarPoint.Win.Picture.PictureChanged">
            <summary>
            Occurs when the picture changes.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor">
            <summary>
            Creates a picture.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Picture.Finalize">
            <summary>
            The destructor method of Picture class
            </summary>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image)">
            <summary>
            Creates a picture with the specified image.
            </summary>
            <param name="i">Image</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,FarPoint.Win.RenderStyle)">
            <summary>
            Creates a picture with the specified image and style.
            </summary>
            <param name="i">Image</param>
            <param name="style">Style</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Creates a picture with the specified image and transparency color.
            </summary>
            <param name="i">Image</param>
            <param name="transparencyColor">Which color is transparent</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,FarPoint.Win.RenderStyle,System.Drawing.Color)">
            <summary>
            Creates a picture with the specified image, style, and transparency color.
            </summary>
            <param name="i">Image</param>
            <param name="style">Style</param>
            <param name="transparencyColor">Which color is transparent</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,FarPoint.Win.RenderStyle,System.Drawing.Color,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment)">
            <summary>
            Creates a picture with the specified image, style, transparency color, and alignment.
            </summary>
            <param name="i">Image</param>
            <param name="style">Stle</param>
            <param name="transparencyColor">Which color is transparent</param>
            <param name="alignHorz">Horizontal alignment of image</param>
            <param name="alignVert">Vertical alignment of image</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,FarPoint.Win.RenderStyle,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a picture with the specified image, style, transparency color, and transparency tolerance.
            </summary>
            <param name="i">Image</param>
            <param name="style">Picture style</param>
            <param name="transparencyColor">Which color is transparent</param>
            <param name="transparencyTolerance">Amount of tolerance of transparency from the color value</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Drawing.Image,FarPoint.Win.RenderStyle,System.Drawing.Color,System.Int32,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment)">
            <summary>
            Creates a picture with the specified image, style, transparency color (with tolerance), and alignments of contents.
            </summary>
            <param name="i">Image</param>
            <param name="style">Picture style</param>
            <param name="transparencyColor">Which color is transparent</param>
            <param name="transparencyTolerance">Amount of tolerance of transparency from the color value</param>
            <param name="alignHorz">Horizontal alignment of image</param>
            <param name="alignVert">Vertical alignment of image</param>
        </member>
        <member name="M:FarPoint.Win.Picture.#ctor(System.Object)">
            <summary>
            Creates a picture by copying another.
            </summary>
            <param name="cloneFrom">Object from which to copy or clone this picture</param>
        </member>
        <member name="P:FarPoint.Win.Picture.TransparencyColor">
            <summary>
            Gets or sets the transparency color for rendering the picture. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.Picture.TransparencyTolerance">
            <summary>
            Gets or sets the amount of tolerance of transparency from the color set as transparent. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.Picture.Style">
            <summary>
            Gets or sets the style used for rendering the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Picture.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Picture.AlignVert">
            <summary>
            Gets or sets the vertical alignment of the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Picture.Image">
            <summary>
            Gets or sets the picture to display. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.Picture.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Picture.Clone">
            <summary>
            Internal use only. Creates and returns a copy of the picture.
            </summary>
            <returns>Copy of the picture</returns>
        </member>
        <member name="M:FarPoint.Win.Picture.Paint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the picture in the specified rectangle.
            </summary>
            <param name="g">Graphics to display</param>
            <param name="rect">Rectangle area in which to paint</param>
        </member>
        <member name="M:FarPoint.Win.Picture.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the picture from the specified location.
            </summary>
            <param name="g">Graphics to display </param>
            <param name="x">x-coordinate for the top-left corner</param>
            <param name="y">y-coordinate for the top-left corner</param>
            <param name="width">Width of the picture in pixels</param>
            <param name="height">Height of the picture in pixels</param>
        </member>
        <member name="M:FarPoint.Win.Picture.OnPictureChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.Picture.PictureChanged"/> event when the picture changes.
            </summary>
            <param name="e">EventArgs object with event data</param>
        </member>
        <member name="M:FarPoint.Win.Picture.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the picture to XML.
            </summary>
            <param name="w">XmlTextWriter to which to write (save) the picture</param>
        </member>
        <member name="M:FarPoint.Win.Picture.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the picture from XML. 
            </summary>
            <param name="r">XmlNodeReader from which to read the picture</param>
        </member>
        <member name="M:FarPoint.Win.Picture.Dispose">
            <summary>
            Internal use only. Releases any resources being used.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Picture.disposed">
            <summary>
            Internal use only. Specifies whether disposed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Picture.Dispose(System.Boolean)">
            <summary>
            Internal use only. Releases any resources being used.
            </summary>
            <param name="disposing">Whether disposing</param>
        </member>
        <member name="T:FarPoint.Win.PictureConverter">
            <summary>
            Converts Picture objects from one type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PictureConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type by using a specified set of
            property values for the object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PictureConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether changing a value on this object requires
            a call to the CreateInstance method to create a new value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PictureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether a picture can be converted from the specified type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="sourceType">Source file type</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.PictureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Deterines whether a picture can be converted to the specified type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="destinationType">Destination file type</param>
        </member>
        <member name="M:FarPoint.Win.PictureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a picture to the specified file type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="culture">CultureInfo</param>
            <param name="value">Object</param>
            <param name="destinationType">File type</param>
        </member>
        <member name="T:FarPoint.Win.FpImageConverter">
            <summary>
            Represents a FarPoint image converter 
            that converts image objects from one type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpImageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether an image can be converted from the specified type.
            </summary>
            <param name="context">Type descriptor context</param>
            <param name="sourceType">Source file type</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.FpImageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Gets the context from which to convert from.
            </summary>
            <param name="context">Type descriptor context</param>
            <param name="culture">Culture information</param>
            <param name="value">Value</param>
        </member>
        <member name="T:FarPoint.Win.FpExpandableObjectConverter">
            <summary>
            Represents a FarPoint expandable object converter 
            that converts expandable objects from one type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpExpandableObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether an expandable object can be converted from the specified type.
            </summary>
            <param name="context">Type descriptor context</param>
            <param name="sourceType">Source type</param>
        </member>
        <member name="M:FarPoint.Win.FpExpandableObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Gets the context from which to convert from.
            </summary>
            <param name="context">Type descriptor context</param>
            <param name="culture">Culture information</param>
            <param name="value">Value</param>
        </member>
        <member name="T:FarPoint.Win.FpArrayConverter">
            <summary>
            Represents a FarPoint array converter
            that converts arrays from one type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether an array can be converted from the specified type.
            </summary>
            <param name="context">Type descriptor context</param>
            <param name="sourceType">Source type</param>
        </member>
        <member name="M:FarPoint.Win.FpArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Gets the context from which to convert from.
            </summary>
            <param name="context">Type descriptor context</param>
            <param name="culture">Culture information</param>
            <param name="value">Value</param>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderSideStyle">
            <summary>
            Specifies the style of the border for one side of a cell.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.None">
            <summary>
            [0] Draws no border
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.HairLine">
            <summary>
            [1] Draws a border with a very thin line (hair line)
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.Dotted">
            <summary>
            [2] Draws a border with a dotted line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.DashDotDot">
            <summary>
            [3] Draws a border with an alternating pattern of one dash and two dots
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.DashDot">
            <summary>
            [4] Draws a border with an alternating pattern of dashes and dots
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.Dashed">
            <summary>
            [5] Draws a border with a dashed line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.ThinLine">
            <summary>
            [6] Draws a border with a thin line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.MediumDashDotDot">
            <summary>
            [7] Draws a border with a medium thickness line with an alternating pattern of one dash and two dots
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.SlantedDashDot">
            <summary>
            [8] Draws a border with slanted dash lines alternated with dots.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.MediumDashDot">
            <summary>
            [9] Draws a border with a medium thickness and alternating pattern of dashes and dots
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.MediumDashed">
            <summary>
            [10] Draws a border with a medium thickness dashed line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.MediumLine">
            <summary>
            [11] Draws a border with a medium thickness line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.ThickLine">
            <summary>
            [12] Draws a border with a thick line
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.DoubleLine">
            <summary>
            [13] Draws a border with two parallel lines
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSideStyle.UserDefined">
            <summary>
            [99] Indicates that the side has a user-defined appearance
            </summary>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderSidePattern">
            <summary>
            Specifies the pattern of the border for one side of a cell.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.Hair">
            <summary>
            Draws a hair border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.DashDot">
            <summary>
            Draws an alternating dash and dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.MediumDash">
            <summary>
            Draws a medium-thickness dashed line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.MediumDashDot">
            <summary>
            Draws a medium-thickness alternating dash and dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.SlantedDashDot">
            <summary>
            Draws an alternating slanted dash and dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.SlantedCompound">
            <summary>
            Draws alternating slanted dash and dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.Dotted">
            <summary>
            Draws a dotted line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.DashDotDot">
            <summary>
            Draws a dash-dot-dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.MediumDashDotDot">
            <summary>
            Draws a medium-thickness dash-dot-dot line border on one side of a cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComplexBorderSidePattern.DoubleCompound">
            <summary>
            Draws a double line border on one side of a cell
            </summary>
        </member>
        <member name="T:FarPoint.Win.IBorder">
            <summary>
            Interface that supports painting a border around a cell.
            </summary>
        </member>
        <member name="P:FarPoint.Win.IBorder.Inset">
            <summary>
            Gets the insets of the border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
        </member>
        <member name="T:FarPoint.Win.IBorder2">
            <summary>
            Interface that supports painting a border around a cell.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IBorder2.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="T:FarPoint.Win.IBorder3">
            <summary>
            Interface that supports printing a border to PDF around a cell.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IBorder3.Paint(FarPoint.Win.IBorderGraphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints (prints) to PDF the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
            <param name="rightToLeft">Whether layout is right-to-left</param>
        </member>
        <member name="T:FarPoint.Win.IBorderGrayscaleSupport">
            <summary>
            Interface that supports printing black and white mode(Internal use only).
            </summary>
        </member>
        <member name="M:FarPoint.Win.IBorderGrayscaleSupport.GrayscaleSetting(System.Object)">
            <summary>
            Print with black and white mode.
            </summary>
            <param name="isGrayscale">State printting black and white mode.</param>
        </member>
        <member name="T:FarPoint.Win.IBorderRotationSupport">
            <summary>
            Interface that supports border painting based on cell text orientation angle.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IBorderRotationSupport.Paint(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paint orientation border.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="topleft">Top-left location</param>
            <param name="bottomLeft">Bottom-left location</param>
            <param name="bottomRight">Bottom-right location</param>
            <param name="topRight">Top-right location</param>
            <param name="rightToLeft">Whether layout is right-to-left</param>
            <param name="paintTop">Whether to paint border at top</param>
            <param name="paintBottom">Whether to paint border at bottom</param>
            <param name="paintRight">Whether to paint border at right</param>
            <param name="paintLeft">Whether to paint border at left</param>
            <param name="diagonalUpDownPainting">Whether to paint border for a diagonal line</param>
            <param name="xCross">X coordinate where the cross diagonal line starts</param>
            <param name="yCross">Y coordinate where the cross diagonal line starts</param>
            <param name="widthCross">Width of the cross rectangle</param>
            <param name="heightCross">Height of the cross rectangle</param>
        </member>
        <member name="T:FarPoint.Win.BevelBorderType">
            <summary>
            Specifies the type of beveled border.
            </summary>
        </member>
        <member name="F:FarPoint.Win.BevelBorderType.Lowered">
            <summary>
            [0] Draws a lowered beveled border
            </summary>
        </member>
        <member name="F:FarPoint.Win.BevelBorderType.Raised">
            <summary>
            [1] Draws a raised beveled border
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComparisonUtil.IsSameReferenceOrNull(System.Object,System.Object,System.Int32@)">
            <summary>
            Check if two objects is the same reference or if one of two object is null.
            </summary>
            <param name="firstObject">First cheking object</param>
            <param name="secondObject">Second cheking object</param>
            <param name="compare">
            The compare output has meaning when this method return true.
            The compare hold the compare value between two objects
            when two objects is the same reference or if one of two objects is null.
            </param>
            <returns>true if two objects is the same reference or if one of two objects is null.</returns>
        </member>
        <member name="M:FarPoint.Win.ComparisonUtil.IsSameReferenceOrNullOrDifferentTypes(System.Object,System.Object,System.Int32@)">
            <summary>
            Checks if two objects have the same reference or if one of the two objects is null or the two objects have different types.
            </summary>
            <param name="firstObject">First object to check</param>
            <param name="secondObject">Second object to check</param>
            <param name="compare">
            The compared output has meaning when this method returns true.
            The compare contains the compared value between two objects
            when two objects have the same reference or one of the two objects is null or the two objects have different types.
            </param>
            <returns>true if two objects have the same reference or if one of the two objects is null or the two objects have different types.</returns>
        </member>
        <member name="M:FarPoint.Win.ComparisonUtil.CompareType(System.Type,System.Type)">
            <summary>
            Compare two Type object (don't check null)
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComparisonUtil.CompareObject(System.Object,System.Object)">
            <summary>
            Compares two general objects.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComparisonUtil.CompareUsingIComparableAndHashCode(System.Object,System.Object)">
            <summary>
            Compares two objects of the same type using the IComparable interface (if implement)
            and HashCode.
            </summary>
        </member>
        <member name="T:FarPoint.Win.EmptyBorder">
            <summary>
            Represents an empty border that takes no space.
            </summary>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.#ctor">
            <summary>
            Creates an empty border (EmptyBorder object).
            </summary>
        </member>
        <member name="P:FarPoint.Win.EmptyBorder.Inset">
            <summary>
            Gets the insets of the border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics object</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics object</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.Paint(FarPoint.Win.IBorderGraphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints (prints) the border inside the specified rectangle to PDF.
            </summary>
            <param name="g">Graphics object</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.Clone">
            <summary>
            Clones the border object.
            </summary>
            <returns>A copy of this border object.</returns>
        </member>
        <member name="M:FarPoint.Win.EmptyBorder.CompareTo(System.Object)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="obj">The object to compare</param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.LineBorder">
            <summary>
            Represents a simple single-line border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LineBorder.#ctor(System.Drawing.Color)">
            <summary>
            Creates a simple single-line border with the specified color.
            </summary>
            <param name="color">Color of the line</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            Creates a simple single-line border with the specified color and thickness.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.#ctor(System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a simple single-line border with the specified color, thickness, 
            and sides on which the border is drawn.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line, in pixels</param>
            <param name="left">Whether the line is drawn on the left side of the cell</param>
            <param name="top">Whether the line is drawn on the top of the cell</param>
            <param name="right">Whether the line is drawn on the right side of the cell</param>
            <param name="bottom">Whether the line is drawn on the bottom of the cell</param>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Color">
            <summary>
            Gets the color of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Inset">
            <summary>
            Gets the insets of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Thickness">
            <summary>
            Gets the thickness of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Left">
            <summary>
            Gets whether the line is drawn on the left edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Top">
            <summary>
            Gets whether the line is drawn on the top edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Right">
            <summary>
            Gets whether the line is drawn on the right edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LineBorder.Bottom">
            <summary>
            Gets whether the line is drawn on the bottom edge of the border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the line border, in pixels</param>
            <param name="height">Height of the line border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the line border, in pixels</param>
            <param name="height">Height of the line border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Paint(System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the line border, in pixels</param>
            <param name="height">Height of the line border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Print(System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Print the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the line border, in pixels</param>
            <param name="height">Height of the line border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Print(FarPoint.Win.IBorderGraphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints (prints) to PDF the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the line border, in pixels</param>
            <param name="height">Height of the line border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Paint(FarPoint.Win.IBorderGraphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints (prints) to PDF the border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the line border, in pixels</param>
            <param name="height">Height of the line border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.LineBorder.Clone">
            <summary>
            Clones the border object.
            </summary>
            <returns>A copy of this border object.</returns>
        </member>
        <member name="M:FarPoint.Win.LineBorder.CompareTo(System.Object)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="obj">LineBorder object to compare</param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.LineBorderFactory">
            <summary>
            Represents a class for creating single-line borders in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.LineBorderFactory.#ctor">
            <summary>
            Creates a single-line border factory.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LineBorderFactory.CreateLineBorder(System.Drawing.Color)">
            <summary>
            Creates a single-line border with the specified color.
            </summary>
            <param name="color">Color of the line</param>
        </member>
        <member name="M:FarPoint.Win.LineBorderFactory.CreateLineBorder(System.Drawing.Color,System.Int32)">
            <summary>
            Creates a single-line border with the specified color and thickness.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
        </member>
        <member name="M:FarPoint.Win.LineBorderFactory.CreateLineBorder(System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a single-line border with the specified color and thickness, 
            and specifies on which sides the border is drawn.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
            <param name="left">Whether the line is drawn on the left side of the cell</param>
            <param name="top">Whether the line is drawn on the top of the cell</param>
            <param name="right">Whether the line is drawn on the right side of the cell</param>
            <param name="bottom">Whether the line is drawn on the bottom of the cell</param>
        </member>
        <member name="T:FarPoint.Win.RoundedLineBorder">
            <summary>
            Represents a rounded-edge single-line border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorder.#ctor(System.Drawing.Color)">
            <summary>
            Creates a rounded-edge, single-line border with the specified color.
            </summary>
            <param name="color">Color of the line</param>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorder.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            Creates a rounded-edge, single-line border with the specified color and thickness.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorder.#ctor(System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a rounded-edge, single-line border with the specified color and thickness, 
            and specifies on which sides the border is drawn.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
            <param name="left">Whether the line is drawn on the left side of the cell</param>
            <param name="top">Whether the line is drawn on the top of the cell</param>
            <param name="right">Whether the line is drawn on the right side of the cell</param>
            <param name="bottom">Whether the line is drawn on the bottom of the cell</param>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the rounded-edge, single-line border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints the rounded-edge, single-line border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorder.Paint(FarPoint.Win.IBorderGraphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints (prints) the rounded-edge, single-line border inside the specified rectangle to PDF.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="T:FarPoint.Win.RoundedLineBorderFactory">
            <summary>
            Represents a class for creating rounded-edge, single-line border objects in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorderFactory.#ctor">
            <summary>
            Creates a rounded-edge, single-line border factory object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorderFactory.CreateRoundedLineBorder(System.Drawing.Color)">
            <summary>
            Creates a rounded-edge, single-line border with the specified color.
            </summary>
            <param name="color">Color of the line</param>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorderFactory.CreateRoundedLineBorder(System.Drawing.Color,System.Int32)">
            <summary>
            Creates a rounded-edge, single-line border with the specified color and thickness.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
        </member>
        <member name="M:FarPoint.Win.RoundedLineBorderFactory.CreateRoundedLineBorder(System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a rounded-edge, single-line border with the specified color and thickness, 
            and specifies on which sides the border is drawn.
            </summary>
            <param name="color">Color of the line</param>
            <param name="thickness">Thickness of the line in pixels</param>
            <param name="left">Whether the line is drawn on the left side of the cell</param>
            <param name="top">Whether the line is drawn on the top of the cell</param>
            <param name="right">Whether the line is drawn on the right side of the cell</param>
            <param name="bottom">Whether the line is drawn on the bottom of the cell</param>
        </member>
        <member name="T:FarPoint.Win.BevelBorder">
            <summary>
            Represents a simple one-line beveled border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.#ctor(FarPoint.Win.BevelBorderType)">
            <summary>
            Creates a beveled border of the specified type.
            </summary>
            <param name="type">Type of beveled border</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.#ctor(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            and shadow color.
            </summary>
            <param name="type">Type of beveled border</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.#ctor(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            shadow color, and thickness.
            </summary>
            <param name="type">Type of beveled border</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
            <param name="thickness">Thickness of beveled border in pixels</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.#ctor(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            shadow color, thickness, and sides on which the border is drawn.
            </summary>
            <param name="type">Type of beveled border</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
            <param name="thickness">Thickness of beveled border in pixels</param>
            <param name="left">Whether to draw the left side</param>
            <param name="top">Whether to draw the top</param>
            <param name="right">Whether to draw the right side</param>
            <param name="bottom">Whether to draw the bottom</param>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Type">
            <summary>
            Gets the type of beveling for the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Highlight">
            <summary>
            Gets the highlight color of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Shadow">
            <summary>
            Gets the shadow color of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Thickness">
            <summary>
            Gets the thickness of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Inset">
            <summary>
            Gets the insets of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Left">
            <summary>
            Gets whether the line is drawn on the left edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Top">
            <summary>
            Gets whether the line is drawn on the top edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Right">
            <summary>
            Gets whether the line is drawn on the right edge of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.BevelBorder.Bottom">
            <summary>
            Gets whether the line is drawn on the bottom edge of the border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.PaintLowered(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints a lowered border inside the specified rectangle. 
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the lowered border, in pixels</param>
            <param name="height">Height of the lowered border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.PaintLowered(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints a lowered border inside the specified rectangle. 
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the lowered border, in pixels</param>
            <param name="height">Height of the lowered border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.PaintRaised(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints a raised border inside the specified rectangle. 
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the raised border, in pixels</param>
            <param name="height">Height of the raised border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.PaintRaised(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints a raised border inside the specified rectangle. 
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the raised border, in pixels</param>
            <param name="height">Height of the raised border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the beveled border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints the beveled border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.Paint(FarPoint.Win.IBorderGraphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints (prints) to PDF the beveled border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.PaintRaised(FarPoint.Win.IBorderGraphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints (prints) to PDF a raised border inside the specified rectangle. 
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the raised border, in pixels</param>
            <param name="height">Height of the raised border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.PaintLowered(FarPoint.Win.IBorderGraphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints (prints) to PDF a lowered border inside the specified rectangle. 
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the lowered border, in pixels</param>
            <param name="height">Height of the lowered border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.Clone">
            <summary>
            Clones the border object.
            </summary>
            <returns>A copy of this border object.</returns>
        </member>
        <member name="M:FarPoint.Win.BevelBorder.CompareTo(System.Object)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="obj">BevelBorder object which to compare</param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.BevelBorderFactory">
            <summary>
            Represents an object for creating beveled borders in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.BevelBorderFactory.#ctor">
            <summary>
            Creates a beveled border factory. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.BevelBorderFactory.CreateBevelBorder(FarPoint.Win.BevelBorderType)">
            <summary>
            Creates a beveled border with the specified type.
            </summary>
            <param name="type">Type of beveled border</param>
            <returns>Beveled border (BevelBorder object) with the parameter specified</returns>
        </member>
        <member name="M:FarPoint.Win.BevelBorderFactory.CreateBevelBorder(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            and shadow color.
            </summary>
            <param name="type">Type of beveled border, whether lowered or raised</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
            <returns>Beveled border (BevelBorder object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.BevelBorderFactory.CreateBevelBorder(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            shadow color, and thickness.
            </summary>
            <param name="type">Type of beveled border, whether lowered or raised</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
            <param name="thickness">Thickness of beveled border in pixels</param>
            <returns>Beveled border (BevelBorder object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.BevelBorderFactory.CreateBevelBorder(FarPoint.Win.BevelBorderType,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a beveled border with the specified type, highlight color,
            shadow color, thickness, and sides on which the border is drawn.
            </summary>
            <param name="type">Type of beveled border, whether lowered or raised</param>
            <param name="highlight">Color of highlight for beveled border</param>
            <param name="shadow">Color of shadow for beveled border</param>
            <param name="thickness">Thickness of beveled border in pixels</param>
            <param name="left">Whether to draw the left side</param>
            <param name="top">Whether to draw the top</param>
            <param name="right">Whether to draw the right side</param>
            <param name="bottom">Whether to draw the bottom</param>
            <returns>Beveled border (BevelBorder object) with the parameters specified</returns>
        </member>
        <member name="T:FarPoint.Win.CompoundBorder">
            <summary>
            Represents a compound border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.#ctor(FarPoint.Win.IBorder,FarPoint.Win.IBorder)">
            <summary>
            Creates a compound border with the specified inside and outside borders.
            </summary>
            <param name="outside">Outside border</param>
            <param name="inside">Inside border</param>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.#ctor(FarPoint.Win.IBorder,FarPoint.Win.IBorder,System.Int32,System.Drawing.Color)">
            <summary>
            Creates a compound border with the specified inside and outside borders 
            and the specified face color.
            </summary>
            <param name="outer">Outside border</param>
            <param name="inner">Inside border</param>
            <param name="faceWidth">Face width of the border</param>
            <param name="faceColor">Face color of the border</param>
        </member>
        <member name="P:FarPoint.Win.CompoundBorder.Outside">
            <summary>
            Gets the outside border for a compound border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CompoundBorder.Inside">
            <summary>
            Gets the inside border for a compound border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CompoundBorder.Inset">
            <summary>
            Gets the insets of the border for a compound border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CompoundBorder.FaceColor">
            <summary>
            Gets the color of the face for a compound border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CompoundBorder.FaceWidth">
            <summary>
            Gets the width of the face for a compound border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the compound border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the compound border, in pixels</param>
            <param name="height">Height of the compound border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints the compound border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the compound border, in pixels</param>
            <param name="height">Height of the compound border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.Paint(FarPoint.Win.IBorderGraphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints (prints) to PDF the compound border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the compound border, in pixels</param>
            <param name="height">Height of the compound border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.Clone">
            <summary>
            Clones the border object.
            </summary>
            <returns>A copy of this border object.</returns>
        </member>
        <member name="M:FarPoint.Win.CompoundBorder.CompareTo(System.Object)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="obj">CompoundBorder object which to compare</param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.CompoundBorderFactory">
            <summary>
            Represents an object for creating a compound border in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.CompoundBorderFactory.#ctor">
            <summary>
            Creates a compound border factory. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.CompoundBorderFactory.CreateCompoundBorder(FarPoint.Win.IBorder,FarPoint.Win.IBorder)">
            <summary>
            Creates a compound border with the specified inside and outside borders.
            </summary>
            <param name="outside">Outside border</param>
            <param name="inside">Inside border</param>
            <returns>Compound border (CompoundBorder object) with the parameters specified</returns>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderSide">
            <summary>
            Represents one side of a four-sided, complex border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor">
            <summary>
            Creates one side of a four-sided, complex border with default color SystemColors.WindowFrame,
            default width of 1, default dash style of Solid, and empty dash pattern and compound array.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(FarPoint.Win.ComplexBorderSide)">
            <summary>
            Creates a new ComplexBorderSide from another source ComplexBorderSide. Internal use only
            </summary>
            <param name="source">The source ComplexBorderSide</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(FarPoint.Win.ComplexBorderSideStyle)">
            <summary>
            Creates one side of a four-sided, complex border with settings equivalent to the specified side style.
            </summary>
            <param name="sideStyle">Border style for one side</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(FarPoint.Win.ComplexBorderSideStyle,System.Drawing.Color)">
            <summary>
            Creates one side of a four-sided, complex border with the specified style and color.
            </summary>
            <param name="sideStyle">Style of the border side</param>
            <param name="sideColor">Color of the border side</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(System.Drawing.Color)">
            <summary>
            Creates one side of a four-sided, complex border with the specified color.
            </summary>
            <param name="color">Color for the border side</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            Creates one side of a four-sided, complex border with the specified color and width.
            </summary>
            <param name="color">Color for this side of the border</param>
            <param name="width">Width of this side of the border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Creates one side of a four-sided, complex border with the specified color, width, and dash style.
            </summary>
            <param name="color">Color for this side of the border</param>
            <param name="width">Width of this side of the border, in pixels</param>
            <param name="dashStyle">Style of dashed line for this side of the border; 
            a setting of the .NET Framework's DashStyle enumeration</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle,System.Single[],System.Single[])">
            <summary>
            Creates one side of a four-sided, complex border with the specified color, width,
            dash style, dash pattern, and compound array.
            </summary>
            <param name="color">Color for this side of the border</param>
            <param name="width">Width of this side of the border, in pixels</param>
            <param name="dashStyle">Style of dashed line for this side of the border; 
            a setting of the DashStyle enumeration of the Microsoft .NET Framework</param>
            <param name="dashPattern">Pattern of dashes for this side of the border</param>
            <param name="compoundArray">Array of values that specify a compound line made up of parallel lines and spaces</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.#ctor(System.Boolean,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle,System.Single[],System.Single[])">
            <summary>
            Creates one side of a four-sided, complex border with the specified color, width,
            dash style, dash pattern and compound array, and whether to draw the side.
            </summary>
            <param name="draw">Whether to draw that size of the border</param>
            <param name="color">Color for this side of the border</param>
            <param name="width">Width of this side of the border, in pixels</param>
            <param name="dashStyle">Style of dashed line for this side of the border; 
            a setting of the DashStyle enumeration of the Microsoft .NET Framework</param>
            <param name="dashPattern">Pattern of dashes for this side of the border</param>
            <param name="compoundArray">
            Array of values that specify a compound line made up of parallel lines and spaces.
            The elements in the array must be in increasing order, not less than 0, and not greater than 1.
            The number of elements in the array must be even.
            </param>
            <exception cref="T:System.ArgumentException">Specified dash pattern not valid; must be positive value</exception>
            <exception cref="T:System.ArgumentException">Specified compound array values not valid; must be between 0 and 1</exception>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.Draw">
            <summary>
            Gets whether this side is drawn in the complex border.
            </summary>    
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.Color">
            <summary>
            Gets the color of this side of the complex border.
            </summary>    
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.Width">
            <summary>
            Gets the width of this side of the complex border.
            </summary>    
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.DashStyle">
            <summary>
            Gets the dash style of this side of the complex border.
            </summary>    
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.DashPattern">
            <summary>
            Gets the dash pattern array of this side of the complex border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.CompoundArray">
            <summary>
            Gets array values that specify a compound line made up of parallel lines and spaces 
            of this side of the complex border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.Style">
            <summary>
            Gets the style of this side of the complex border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorderSide.Empty">
            <summary>
            Gets an empty ComplexBorderSide (Draw = false).
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.Equals(System.Object)">
            <summary>
            Compares the specified object to this ComplexBorderSide object.
            </summary>
            <param name="o">Object to compare</param>
            <returns>true if equivalent; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.GetHashCode">
            <summary>
            Gets the hash code of the ComplexBorderSide object. 
            </summary>
            <returns>Integer with hash code of the object</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.ToString">
            <summary>
            Converts the complex border side to a string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.Clone">
            <summary>
            Clones the border object.
            </summary>
            <returns>A copy of this border object.</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.CompareTo(System.Object)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="obj">LineBorder object which to compare</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSide.DeserializeEntry(System.Runtime.Serialization.SerializationEntry)">
            <summary>
            Deserializes for each binary entry.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderSideFactory">
            <summary>
            Represents an object that provides a means of creating a complex border side in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.#ctor">
            <summary>
            Creates a complex border side. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(FarPoint.Win.ComplexBorderSideStyle)">
            <summary>
            Creates a complex border side with the specified ComplexBorderSideStyle.
            </summary>
            <param name="sideStyle">ComplexBorderSideStyle of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(FarPoint.Win.ComplexBorderSideStyle,System.Drawing.Color)">
            <summary>
            Creates a complex border side with the specified ComplexBorderSideStyle and color.
            </summary>
            <param name="sideStyle">ComplexBorderSideStyle of the side</param>
            <param name="sideColor">Color of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(System.Drawing.Color)">
            <summary>
            Creates a complex border side with the specified color.
            </summary>
            <param name="color">Color of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(System.Drawing.Color,System.Int32)">
            <summary>
            Creates a complex border side with the specified color and width.
            </summary>
            <param name="color">Color of the side</param>
            <param name="width">Width of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Creates a complex border side with the specified color, width, and dash style.
            </summary>
            <param name="color">Color of the side</param>
            <param name="width">Width of the side</param>
            <param name="dashStyle">DashStyle of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle,System.Single[],System.Single[])">
            <summary>
            Creates a complex border side with the specified color, width, dash style, dash pattern, and compound array.
            </summary>
            <param name="color">Color of the side</param>
            <param name="width">Width of the side</param>
            <param name="dashStyle">DashStyle of the side</param>
            <param name="dashPattern">DashPattern of the side</param>
            <param name="compoundArray">CompoundArray of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideFactory.CreateComplexBorderSide(System.Boolean,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle,System.Single[],System.Single[])">
            <summary>
            Creates a complex border side with the specified draw flag, color, width, dash style, dash pattern, and compound array.
            </summary>
            <param name="draw">Whether to draw the side</param>
            <param name="color">Color of the side</param>
            <param name="width">Width of the side</param>
            <param name="dashStyle">DashStyle of the side</param>
            <param name="dashPattern">DashPattern of the side</param>
            <param name="compoundArray">CompoundArray of the side</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderSideConverter">
            <summary>
            Converts ComplexBorderSide objects from one data type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type with a specified set of
            property values for the object.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="propertyValues">IDictionary of property values</param>
            <returns>Complex border side (ComplexBorderSide object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets whether changing a value on this object should require 
            a call to the CreateInstance method to create a new value.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets the set of properties for this type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="value">Object</param>
            <param name="attributes">Attributes (properties)</param>
            <returns>Properties</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether this object supports properties.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a value that indicates whether a complex border side object can be converted to the specified type.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="destinationType">Type</param>
            <returns>true if a complex border side object can be converted to the specified type, and false otherwise.</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderSideConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the ComplexBorderSide object to a string.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="culture">CultureInfo</param>
            <param name="value">The object</param>
            <param name="destinationType">Type</param>
            <returns>String representation of a ComplexBorderSide object.</returns>
        </member>
        <member name="T:FarPoint.Win.ComplexBorder">
            <summary>
            Represents a complex border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.#ctor(FarPoint.Win.ComplexBorderSide)">
            <summary>
            Creates a complex border with the specified ComplexBorderSide object  
            to use for all four sides.
            </summary>
            <param name="sides">Complex border side (ComplexBorderSide object) to use for all four sides</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.#ctor(FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide)">
            <summary>
            Creates a complex border with the specified ComplexBorderSide objects for each side.
            </summary>
            <param name="left">Complex border side (ComplexBorderSide object) for the left side</param>
            <param name="top">Complex border side (ComplexBorderSide object) for the top</param>
            <param name="right">Complex border side (ComplexBorderSide object) for the right side</param>
            <param name="bottom">Complex border side (ComplexBorderSide object) for the bottom</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.#ctor(FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,System.Boolean,System.Boolean)">
            <summary>
            Creates a complex border with the specified ComplexBorderSide objects for each side.
            </summary>
            <param name="left">Complex border side (ComplexBorderSide object) for the left side</param>
            <param name="top">Complex border side (ComplexBorderSide object) for the top</param>
            <param name="right">Complex border side (ComplexBorderSide object) for the right side</param>
            <param name="bottom">Complex border side (ComplexBorderSide object) for the bottom</param>
            <param name="diagonal">Complex border side (ComplexBorderSide object) for the diagonal</param>
            <param name="diagonalUp">Show diagonally up</param>
            <param name="diagonalDown">Show diagonally down</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new complex border object from serialization.
            </summary>
            <param name="info">Object that holds the serialized object data</param>
            <param name="context">Contexual information about the source or destination of the serialization</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the complex border object.
            </summary>
            <param name="info">Object that holds the serialized object data</param>
            <param name="context">Contexual information about the source or destination of the serialization</param>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.Inset">
            <summary>
            Gets the insets of the border.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.Left">
            <summary>
            Gets the ComplexBorderSide object for the left side.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.Top">
            <summary>
            Gets the ComplexBorderSide object for the top side.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.Right">
            <summary>
            Gets the ComplexBorderSide object for the right side.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.Bottom">
            <summary>
            Gets the ComplexBorderSide object for the bottom side.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.Diagonal">
            <summary>
            Gets the ComplexBorderSide object for the diagonal side.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.DiagonalUp">
            <summary>
            Gets whether diagonally up.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ComplexBorder.DiagonalDown">
            <summary>
            Gets whether diagonally down.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the complex border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the complex border, in pixels</param>
            <param name="height">Height of the complex border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints the complex border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the complex border, in pixels</param>
            <param name="height">Height of the complex border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.Equals(System.Object)">
            <summary>
            Compares the specified object to this ComplexBorder object.
            </summary>
            <param name="o">Object to compare</param>
            <returns>true if equivalent; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.GetHashCode">
            <summary>
            Gets the hash code of the ComplexBorder object. 
            </summary>
            <returns>Integer with hash code of the object</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.Paint(FarPoint.Win.IBorderGraphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints (prints) to PDF the complex border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top-left corner</param>
            <param name="y">Y-coordinate for the top-left corner</param>
            <param name="width">Width of the compound border, in pixels</param>
            <param name="height">Height of the compound border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.Clone">
            <summary>
            Clones the border object.
            </summary>
            <returns>A copy of this border object.</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.CompareTo(System.Object)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="obj">LineBorder object which to compare</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorder.FarPoint#Win#IBorderGrayscaleSupport#GrayscaleSetting(System.Object)">
            <summary>
            Print with black and white mode.
            </summary>
            <param name="isGrayscalePrintting">State printting black and white mode.</param>
        </member>
        <member name="T:FarPoint.Win.ComplexBorderFactory">
            <summary>
            Represents an object that provides a means of creating complex borders in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderFactory.#ctor">
            <summary>
            Creates a complex border factory. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderFactory.CreateComplexBorder(FarPoint.Win.ComplexBorderSide)">
            <summary>
            Creates a complex border with the specified complex border side 
            used for all four sides.
            </summary>
            <param name="sides">Complex border side (ComplexBorderSide object) to use for all four sides</param>
            <returns>Complex border (ComplexBorder object) with the parameter specified</returns>
        </member>
        <member name="M:FarPoint.Win.ComplexBorderFactory.CreateComplexBorder(FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide,FarPoint.Win.ComplexBorderSide)">
            <summary>
            Creates a complex border with the specified complex border sides for each side.
            </summary>
            <param name="left">Complex border side (ComplexBorderSide object) to use for the left side</param>
            <param name="top">Complex border side (ComplexBorderSide object) to use for the top side</param>
            <param name="right">Complex border side (ComplexBorderSide object) to use for the right side</param>
            <param name="bottom">Complex border side (ComplexBorderSide object) to use for the bottom side</param>
            <returns>Complex border (ComplexBorder object) with the parameters specified</returns>
        </member>
        <member name="T:FarPoint.Win.DoubleLineBorder">
            <summary>
            Represents a simple double-line border.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.#ctor(System.Drawing.Color)">
            <summary>
            Creates a double-line border with the specified color and a width of 3.
            </summary>
            <param name="color">Color of the double lines</param>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.#ctor(System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a double-line border with the specified color, a width of 3, and 
            sides on which the border is drawn.
            </summary>
            <param name="color">Color of the double lines</param>
            <param name="left">Whether to draw the left side</param>
            <param name="top">Whether to draw the top</param>
            <param name="right">Whether to draw the right side</param>
            <param name="bottom">Whether to draw the bottom</param>
        </member>
        <member name="P:FarPoint.Win.DoubleLineBorder.Thickness">
            <summary>
            Gets the thickness of the double-line border in pixels (always set to 3).
            </summary>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the double-line border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.Paint(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints the double-line border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.Paint(FarPoint.Win.IBorderGraphics,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Paints (prints) to PDF the double-line border inside the specified rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="x">X-coordinate for the top left corner</param>
            <param name="y">Y-coordinate for the top left corner</param>
            <param name="width">Width of the border, in pixels</param>
            <param name="height">Height of the border, in pixels</param>
            <param name="rightToLeft">Whether to draw the border with a right-to-left orientation</param>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorder.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to load the object</param>
            <returns>true if successful; otherwise, false</returns>
        </member>
        <member name="T:FarPoint.Win.DoubleLineBorderFactory">
            <summary>
            Represents a class that provides a means of creating a double-line border in environments
            that do not support parameterized constructors. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorderFactory.#ctor">
            <summary>
            Creates a double-line border factory.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorderFactory.CreateDoubleLineBorder(System.Drawing.Color)">
            <summary>
            Creates a double-line border with the specified color.
            </summary>
            <param name="color">Color of the double lines</param>
            <returns>Double-line border (DoubleLineBorder object) with the parameters specified</returns>
        </member>
        <member name="M:FarPoint.Win.DoubleLineBorderFactory.CreateDoubleLineBorder(System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a double-line border with the specified color and sides on which the border is drawn.
            </summary>
            <param name="color">Color of the double lines</param>
            <param name="left">Whether to draw the left side</param>
            <param name="top">Whether to draw the top</param>
            <param name="right">Whether to draw the right side</param>
            <param name="bottom">Whether to draw the bottom</param>
            <returns>Double-line border (DoubleLineBorder object) with the parameters specified</returns>
        </member>
        <member name="T:FarPoint.Win.IBorderGraphics">
            <summary>
            Interface that supports border graphics.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IBorderGraphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the arc.
            </summary>
            <param name="cornerPen">Corner pen</param>
            <param name="x">X-coordinate</param>
            <param name="y">Y-coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="startAngle">Start angle</param>
            <param name="sweepAngle">Sweep angle</param>
        </member>
        <member name="M:FarPoint.Win.IBorderGraphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the line.
            </summary>
            <param name="pen">Pen</param>
            <param name="x1">X-coordinate of first point</param>
            <param name="y1">Y-coordinate of first point</param>
            <param name="x2">X-coordinate of second point</param>
            <param name="y2">Y-coordinate of second point</param>
        </member>
        <member name="M:FarPoint.Win.IBorderGraphics.IntersectClip(System.Drawing.Region)">
            <summary>
            Finds the intersection of the current clip region of the graphics object and the specified region.
            </summary>
            <param name="region">Region</param>
        </member>
        <member name="M:FarPoint.Win.IBorderGraphics.Restore(System.Object)">
            <summary>
            Restores the specified graphics state.
            </summary>
            <param name="state">Graphics state</param>
        </member>
        <member name="M:FarPoint.Win.IBorderGraphics.Save">
            <summary>
            Saves this instance of the graphics object.
            </summary>
        </member>
        <member name="T:FarPoint.Win.BorderEditorUI">
            <summary>
            Represents the border editor user interface.
            </summary>
        </member>
        <member name="E:FarPoint.Win.BorderEditorUI.ApplyChanged">
            <summary>
            Occurs when the change is applied.
            </summary>
        </member>
        <member name="E:FarPoint.Win.BorderEditorUI.DiscardChanged">
            <summary>
            Occurs when the change is discarded.
            </summary>
        </member>
        <member name="F:FarPoint.Win.BorderEditorUI.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderEditorUI.#ctor">
            <summary>
            Creates a new border editor user interface.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderEditorUI.#ctor(FarPoint.Win.IBorder)">
            <summary>
            Creates a new border editor user interface.
            </summary>
            <param name="border"></param>
        </member>
        <member name="M:FarPoint.Win.BorderEditorUI.LocalizeGUIStrings">
            <summary>
            Localize all GUI strings of this instance
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderEditorUI.SetBorder(FarPoint.Win.IBorder)">
            <summary>
            Sets the border. 
            </summary>
            <param name="border">Border</param>
        </member>
        <member name="M:FarPoint.Win.BorderEditorUI.SetBorderInternal(FarPoint.Win.IBorder)">
            <summary>
            Internal use only. Sets the border.
            </summary>
            <param name="border">Border</param>
        </member>
        <member name="M:FarPoint.Win.BorderEditorUI.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FarPoint.Win.BorderEditorUI.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ApplyBorderEventArgs">
            <summary>
            Represents the event data for the ApplyBorder event. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ApplyBorderEventArgs.#ctor(FarPoint.Win.IBorder)">
            <summary>
            Constructs a new ApplyBorderEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ApplyBorderEventArgs.Border">
            <summary>
            Gets a border.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ApplyBorderEventHandler">
            <summary>
            Represents a defined method that handles the ApplyBorder event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ButtonTextAlign">
            <summary>
            Specifies the alignment of the button text. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonTextAlign.TextBottomPictTop">
            <summary>
            Aligns text at the bottom of the control and the picture at the top
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonTextAlign.TextTopPictBottom">
            <summary>
            Aligns text at the top of the control and the picture at the bottom
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonTextAlign.TextLeftPictRight">
            <summary>
            Aligns text to the left of the control and the picture to the right
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonTextAlign.TextRightPictLeft">
            <summary>
            Aligns text to the right of the control and the picture to the left
            </summary>
        </member>
        <member name="T:FarPoint.Win.BackStyle">
            <summary>
            Specifies the background style
            </summary>
        </member>
        <member name="F:FarPoint.Win.BackStyle.Default">
            <summary>
            Displays the default background style.
            </summary>
        </member>
        <member name="F:FarPoint.Win.BackStyle.Gradient">
            <summary>
            Displays the gradient background style.
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpButtonPaintArgs">
            <summary>
            FarPoint button paint event arguments.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.g">
            <summary>
            Graphics device for the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.r">
            <summary>
            Rectangular area for the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.rectTextIn">
            <summary>
            Rectangular area for the text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.backColor">
            <summary>
            Background color for the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.foreColor">
            <summary>
            Text color for the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.font">
            <summary>
            Font face for text for the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.halign">
            <summary>
            Horizontal alignement of text for the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.valign">
            <summary>
             Vertical alignement of text for the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.pressed">
            <summary>
            Whether the button is pressed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.focus">
            <summary>
            Whether the button has focus.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.text">
            <summary>
            String text in the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.textDown">
            <summary>
            String text when the button is pressed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.nAlign">
            <summary>
            Alignment of text in the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.textOrientation">
            <summary>
            Orientation of text in the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.wordWrap">
            <summary>
            Whether the text can wrap to multiple lines.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.shadowSize">
            <summary>
            Size of the shadow of the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.darkColor">
            <summary>
            Dark color for the sides of the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.lightColor">
            <summary>
            Light color for the sides of the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.pictUp">
            <summary>
            Image for the button when it is not pressed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.pictDown">
            <summary>
            Image for the button when it is pressed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.bLocked">
            <summary>
            Whether the button is locked.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.prefix">
            <summary>
            Hotkey prefix of the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.style">
            <summary>
            Visual style of the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.mouseOver">
            <summary>
            Whether the mouse is over the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.backcolor2">
            <summary>
            Second background color for gradients in the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.backstyle">
            <summary>
            Background style for the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.mode">
            <summary>
            Linear gradient mode for the button.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.rightToLeft">
            <summary>
            Whether right-to-left layout.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.txtRotationAngle">
            <summary>
            Amount of text rotation angle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.txtIndent">
            <summary>
            Amount of text indent.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.useVSBackColor">
            <summary>
            Whether to use Visual Studio background color.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.getPreferredSizeDirection">
            <summary>
            The direction for getting preferred size
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButtonPaintArgs.isGrayScale">
            <summary>
            indicates that painting in grayscale mode
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpButton">
            <summary>
            Represents the FarPoint button control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpButton.theme">
            <summary>
            Internal use only. Theme for visual style.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpButton.ButtonClicked">
            <summary>
            Occurs when the button control is clicked.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpButton.AfterFocus">
            <summary>
            Occurs after the control receives focuse.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FarPoint.Win.FpButton.#ctor">
            <summary>
            Creates a new FarPoint button control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnAfterFocus(System.EventArgs)">
            <summary>
            Raises the AfterFocus event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnButtonClicked(System.EventArgs)">
            <summary>
            Raises the ButtonClicked event.
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="P:FarPoint.Win.FpButton.HotkeyPrefix">
            <summary>
            Gets or sets whether the ampersand character underlines text.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.VisualStyles">
            <summary>
            Gets or sets whether to use visual styles.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the ThemeChanged event for the VisualStyleTheme
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="P:FarPoint.Win.FpButton.BackColor2">
            <summary>
            Gets or sets the secondary color used when drawing a gradient button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.GradientMode">
            <summary>
            Gets or sets the drawing style of a gradient button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.BackgroundStyle">
            <summary>
            Gets or sets how the background is rendered.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.UseVisualStyleBackColor">
            <summary>
            Gets or sets whether the backcolor is drawn via VisualStyles.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.TextRotationAngle">
            <summary>
            Gets or sets the text rotation angle.
            </summary>
            <value>The text rotation angle.</value>
        </member>
        <member name="P:FarPoint.Win.FpButton.TextIndent">
            <summary>
            Gets or sets the text indent.
            </summary>
            <value>The text indent.</value>
        </member>
        <member name="P:FarPoint.Win.FpButton.DarkColor">
            <summary>
            Gets or sets the color to draw the three-dimensional outside border of the button. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.LightColor">
            <summary>
            Gets or sets the color to draw the three-dimensional inside border of the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.WordWrap">
            <summary>
            Gets or sets whether the text that does not fit on one line wraps 
            to multiple lines within the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.ShadowSize">
            <summary>
            Gets or sets the size of shadow around the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.Picture">
            <summary>
            Gets or sets the image displayed in the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.PictureDown">
            <summary>
            Gets or sets the image displayed in the button when the button is pressed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.PictureZoomEffect">
            <summary>
            Gets or sets whether the image has effects with zooming.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.ZoomFactor">
            <summary>
            Gets or sets zoom factor.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.TwoState">
            <summary>
            Gets or sets whether the button is a two-state button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.Value">
            <summary>
            Gets or sets the value of the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.TextAlign">
            <summary>
            Gets or sets how text is aligned relative to the picture in the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.TextOrientation">
            <summary>
            Gets or sets how text orients itself when painting the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.TextDown">
            <summary>
            Gets or sets the text to display when the button is pressed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of text in the button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of text in the button.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnGotFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnLostFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnDoubleClick(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnMouseEnter(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Boolean,System.Boolean,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.TextOrientation,System.Boolean,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Image,System.Drawing.Image,System.Boolean,System.Boolean)">
            <summary>
            Paints the cell with the button.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="r">Image rectangle</param>
            <param name="backColor">Background color</param>
            <param name="foreColor">Foreground (text) color</param>
            <param name="font">Font of text</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="pressed">Whether the button is pressed</param>
            <param name="focus">Whether it is in focus</param>
            <param name="text">Text of button when not pressed</param>
            <param name="textDown">Text of pressed button</param>
            <param name="nAlign">Alignment of text with respect to image in button</param>
            <param name="textOrientation">Orientation of text</param>
            <param name="wordWrap">Whether text wraps to multiple lines</param>
            <param name="shadowSize">Size of the shadow around the button</param>
            <param name="darkColor">Color of the shadow (dark part of button)</param>
            <param name="lightColor">Color of light part of button</param>
            <param name="pictUp">Picture (image) when button is not pressed</param>
            <param name="pictDown">Picture (image) when button is pressed</param>
            <param name="bLocked">Whether the cell is locked</param>
            <param name="rightToLeft">Whether right-to-left layout</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Boolean,System.Boolean,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.TextOrientation,System.Boolean,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Image,System.Drawing.Image,System.Boolean,System.Drawing.Text.HotkeyPrefix,FarPoint.Win.VisualStyles,System.Boolean)">
            <summary>
            Paints the cell with the button.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="r">Image rectangle</param>
            <param name="backColor">Background color</param>
            <param name="foreColor">Foreground (text) color</param>
            <param name="font">Font of text</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="pressed">Whether the button is pressed</param>
            <param name="focus">Whether it is in focus</param>
            <param name="text">Text of button when not pressed</param>
            <param name="textDown">Text of pressed button</param>
            <param name="nAlign">Alignment of text with respect to image in button</param>
            <param name="textOrientation">Orientation of text</param>
            <param name="wordWrap">Whether text wraps to multiple lines</param>
            <param name="shadowSize">Size of the shadow around the button</param>
            <param name="darkColor">Color of the shadow (dark part of button)</param>
            <param name="lightColor">Color of light part of button</param>
            <param name="pictUp">Picture (image) when button is not pressed</param>
            <param name="pictDown">Picture (image) when button is pressed</param>
            <param name="bLocked">Whether the cell is locked</param>
            <param name="prefix">Whether the ampersand character underlines text</param>
            <param name="style">Determines the button style</param>
            <param name="mouseOver">True if mouse is over button</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.DoPaint(FarPoint.Win.FpButtonPaintArgs)">
            <summary>
             Paints.
            </summary>
            <param name="args">Paint arguments</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Size,System.Drawing.Font,System.String,System.String,FarPoint.Win.ButtonTextAlign,System.Boolean,System.Int32,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Calculates the height and width required to display the button text and picture.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="size">Size</param>
            <param name="font">Font</param>
            <param name="text">Text of button when not pressed</param>
            <param name="textDown">Text of button when pressed</param>
            <param name="nAlign">Alignment of text</param>
            <param name="wordWrap">Whether text wraps to multiple lines</param>
            <param name="shadowSize">Size of shadow around button</param>
            <param name="pictUp">Picture (image) when button is not pressed</param>
            <param name="pictDown">Picture (image) when button is pressed</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Size,System.Drawing.Font,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.TextOrientation,System.Boolean,System.Int32,System.Drawing.Image,System.Drawing.Image,System.Drawing.Text.HotkeyPrefix)">
            <summary>
            Calculates the height and width required to display the button text and picture.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="size">Size</param>
            <param name="font">Font</param>
            <param name="text">Text of button when not pressed</param>
            <param name="textDown">Text of button when pressed</param>
            <param name="nAlign">Alignment of text</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">Whether text wraps to multiple lines</param>
            <param name="shadowSize">Size of shadow around button</param>
            <param name="pictUp">Picture when button is not pressed</param>
            <param name="pictDown">Picture when button is pressed</param>
            <param name="prefix">Hotkey prefix</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Size,System.Drawing.Font,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.TextOrientation,System.Boolean,System.Int32,System.Drawing.Image,System.Drawing.Image,System.Drawing.Text.HotkeyPrefix,System.Double)">
            <summary>
            Calculates the height and width required to display the button text and picture.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="size">Size</param>
            <param name="font">Font</param>
            <param name="text">Text of button when not pressed</param>
            <param name="textDown">Text of button when pressed</param>
            <param name="nAlign">Alignment of text</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">Whether text wraps to multiple lines</param>
            <param name="shadowSize">Size of shadow around button</param>
            <param name="pictUp">Picture when button is not pressed</param>
            <param name="pictDown">Picture when button is pressed</param>
            <param name="prefix">HotkeyPrefix</param>
            <param name="angle">The text rotation angle.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.FpButton.GetPreferredSize(FarPoint.Win.FpButtonPaintArgs)">
            <summary>
            Calculates the height and width required to display the button text and picture.
            </summary>
            <param name="args">The arguments for getting preferred size.
            NOTE: Just listed arguments here affect to the result
            args.g, 
            args.r.Size,
            args.font,
            args.text,
            args.textDown,
            args.nAlign, 
            args.halign, 
            args.valign, 
            args.textOrientation, 
            args.wordWrap, 
            args.shadowSize, 
            args.pictUp, 
            args.pictDown, 
            args.prefix, 
            args.txtRotationAngle,
            args.rightToLeft,
            args.pressed,
            args.getPreferredSizeDirection
            </param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.FpButton.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Size,System.Drawing.Font,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Int32,System.Drawing.Image,System.Drawing.Image,System.Drawing.Text.HotkeyPrefix,System.Double,System.Int32,System.Boolean,System.Boolean,FarPoint.Win.Text.PreferredSizeDirection)">
            <summary>
            Calculates the height and width required to display the button text and picture.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="size">Size</param>
            <param name="font">Font</param>
            <param name="text">Text of button when not pressed</param>
            <param name="textDown">Text of button when pressed</param>
            <param name="nAlign">Alignment of text</param>
            <param name="horzAlign">Horizontal alignment settings of the text relative to its bounding rectangle</param>
            <param name="vertAlign">Vertical alignment settings of the text relative to its bounding rectangle</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">Whether text wraps to multiple lines</param>
            <param name="shadowSize">Size of shadow around button</param>
            <param name="pictUp">Picture when button is not pressed</param>
            <param name="pictDown">Picture when button is pressed</param>
            <param name="prefix">HotkeyPrefix</param>
            <param name="angle">The text rotation angle.</param>
            <param name="textIndent">Number of pixels to indent the text</param>
            <param name="rightToLeft">Whether layout is right-to-left</param>
            <param name="direction">The direction for getting preferred size</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.FpButton.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpButton.DialogResult">
            <summary>
            Gets or sets the value returned to the parent when the button is clicked. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.PerformClick">
            <summary>
            Generates a Click event for the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpButton.NotifyDefault(System.Boolean)">
            <summary>
            Notifies a control that this button is the default button for appearance sake.
            </summary>
            <param name="value">whether the control should behave as a default button</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Internal use only. Serializes.
            </summary>
            <param name="w">XML Text Writer</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Internal use only.
            </summary>
            <param name="r">XML Node Reader</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.SaveControlBaseData(System.Xml.XmlTextWriter)">
            <summary>
            Internal use only. Saves control base data.
            </summary>
            <param name="w">XML Text Writer</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.ReconstructControlBaseData(System.Xml.XmlNodeReader)">
            <summary>
            Internal use only. Reconstructs control base data.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:FarPoint.Win.FpButton.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            Saving all FpButton's own properties and some public, browsable design time properies of the control base
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:FarPoint.Win.FpButton.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FpButton"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.SaveControlBaseData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Saving some public, browsable design time properties of the control base
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:FarPoint.Win.FpButton.ReconstructControlBaseData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Reconstructs the control base data saved with SaveControlBaseData method.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:FarPoint.Win.CanvasBase">
            <summary>
            Represents the base for the canvas.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.#ctor">
            <summary>
            Creates a base for the canvas.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CanvasBase.CanFocus">
            <summary>
            Gets or sets whether the control can receive focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CanvasBase.HotkeyPrefix">
            <summary>
            Gets or sets whether the underscore appears for hot keys - 
            whether an ampersand typed in front of a character 
            underlines the character.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.ResetText">
            <summary>
            Resets the contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.AdjustStringFormat(System.Drawing.StringFormat@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.AdjustClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.ProcessMnemonic(System.Char)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.SetElementBounds(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.OnGotFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.  MouseDown processing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.  MouseUp processing.
            </summary>
        </member>
        <member name="T:FarPoint.Win.CanvasContainerBase">
            <summary>
            Represents the base for the canvas container.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.#ctor">
            <summary>
            Handles the settings for the base for the canvas container.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.#ctor(System.Object)">
            <summary>
            Handles the settings for the base for the canvas container with the clone specified.
            </summary>
            <param name="cloneFrom">Object from which to clone the new canvas container</param>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.#ctor(System.Object,System.Boolean)">
            <summary>
            Handles the settings for the canvas container with the clone specified and whether no parent.
            </summary>
            <param name="cloneFrom">Object from which to clone the new canvas container</param>
            <param name="noParent">Whether no parent</param>
        </member>
        <member name="P:FarPoint.Win.CanvasContainerBase.CanFocus">
            <summary>
            Gets or sets whether the control can receive focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CanvasContainerBase.HotkeyPrefix">
            <summary>
            Gets or sets whether the underscore appears for hot keys - 
            whether an ampersand typed in front of a character 
            underlines the character.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>    
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.ResetText">
            <summary>
            Resets the contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.AdjustStringFormat(System.Drawing.StringFormat@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.AdjustClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.ProcessMnemonic(System.Char)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.SetElementBounds(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.OnGotFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.  MouseDown processing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CanvasContainerBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.  MouseUp processing.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IChangeNotify">
            <summary>
            Internal use only. Interface that handles change notification.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IChangeNotify.ChangeNotify(System.Object)">
            <summary>
            Handles change notification.
            </summary>
            <param name="o">Object</param>
        </member>
        <member name="T:FarPoint.Win.CheckValue">
            <summary>
            Specifies the value of the check box.
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckValue.False">
            <summary>
            Sets the check box value to false
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckValue.True">
            <summary>
            Sets the check box value to true
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckValue.Indeterminate">
            <summary>
            Sets the check box value to indeterminate
            </summary>
        </member>
        <member name="T:FarPoint.Win.chkCheckState">
            <summary>
            Specifies the state for a check box.
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.False">
            <summary>
            Sets the state of the check box to false
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.True">
            <summary>
            Sets the state of the check box to true
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.FalsePressed">
            <summary>
            Sets the state of the check box to false and pressed
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.TruePressed">
            <summary>
            Sets the state of the check box to true and pressed
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.Indeterminate">
            <summary>
            Sets the state of the check box to indeterminate
            </summary>
        </member>
        <member name="F:FarPoint.Win.chkCheckState.IndeterminatePressed">
            <summary>
            Sets the state of the check box to indeterminate and pressed
            </summary>
        </member>
        <member name="T:FarPoint.Win.CheckBoxPictureIndex">
            <summary>
            Specifies the index for the picture for the states of a check box. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.False">
            <summary>
            Sets the index for the false state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.True">
            <summary>
            Sets the index for the true state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.FalsePressed">
            <summary>
            Sets the index for the false pressed state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.TruePressed">
            <summary>
            Sets the index for the true pressed state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.Indeterminate">
            <summary>
            Sets the index for the indeterminate state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.IndeterminatePressed">
            <summary>
            Sets the index for the indeterminate pressed state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.FalseDisabled">
            <summary>
            Sets the index for the false disabled state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.TrueDisabled">
            <summary>
            Sets the index for the true disabled state picture of the check box
            </summary>
        </member>
        <member name="F:FarPoint.Win.CheckBoxPictureIndex.IndeterminateDisabled">
            <summary>
            Sets the index for the indeterminate disabled state picture of the check box
            </summary>
        </member>
        <member name="T:FarPoint.Win.CheckBoxPictureConverter">
            <summary>
            Converts CheckBoxPicture objects from one type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CheckBoxPictureConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type by using a specified set of
            property values for the object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CheckBoxPictureConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether changing a value on this object should
            require a call to the CreateInstance method to create a new
            value.
            </summary>
        </member>
        <member name="T:FarPoint.Win.CheckBoxPicture">
            <summary>
            Represents the pictures (images) used for the different states of a check box. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.Item(System.Int32)">
            <summary>
            Gets or sets the index for the picture (image) of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.Item(FarPoint.Win.CheckBoxPictureIndex)">
            <summary>
            Gets or sets the index for the picture (image) of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.False">
            <summary>
            Gets or sets the picture (image) for the false state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.FalseDisabled">
            <summary>
            Gets or sets the picture (image) for the false disabled state of the checkbox.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.FalsePressed">
            <summary>
            Gets or sets the picture (image) for the false pressed state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.Indeterminate">
            <summary>
            Gets or sets the picture (image) for the indeterminate state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.IndeterminateDisabled">
            <summary>
            Gets or sets the picture (image) for the indeterminate disabled state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.IndeterminatePressed">
            <summary>
            Gets or sets the picture (image) for the indeterminate pressed state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.True">
            <summary>
            Gets or sets the picture (image) for the true state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.TrueDisabled">
            <summary>
            Gets or sets the picture (image) for the true disabled state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.TruePressed">
            <summary>
            Gets or sets the picture (image) for the true pressed state of the check box.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CheckBoxPicture.Dispose">
            <summary>
            Disposes.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CheckBoxPicture.IsDisposed">
            <summary>
            Gets whether is disposed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CheckBoxPicture.Dispose(System.Boolean)">
            <summary>
            Disposes and frees up resources.
            </summary>
            <param name="disposing">Whether disposing</param>
        </member>
        <member name="T:FarPoint.Win.FocusRectangle">
            <summary>
            Specifies whether to show focus rectangle or not
            </summary>
        </member>
        <member name="F:FarPoint.Win.FocusRectangle.Inherit">
            <summary>
            Style of checkbox determines whether focus rectangle displays
            </summary>
        </member>
        <member name="F:FarPoint.Win.FocusRectangle.Show">
            <summary>
            Show focus rectangle
            </summary>
        </member>
        <member name="F:FarPoint.Win.FocusRectangle.Hide">
            <summary>
            Hide focus rectangle
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpCheckBox">
            <summary>
            Represents a FarPoint check box control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpCheckBox.DEFAULT_PICTURE_WIDTH">
            <summary>
            Default check box picture width.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpCheckBox.DEFAULT_PICTURE_HEIGHT">
            <summary>
            Default check box picture height.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpCheckBox.theme">
            <summary>
            Internal use. Set theme for Visual Styles.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCheckBox.AfterFocus">
            <summary>
            Occurs after the control receives focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.PictureZoomEffect">
            <summary>
            Gets or sets whether the image has effects with zooming.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.ZoomFactor">
            <summary>
            Gets or sets zoom factor.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCheckBox.CheckChanged">
            <summary>
            Occurs when the check state of the control has changed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCheckBox.CheckStateChanged">
            <summary>
            Occurs when the check state of the control is changing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.Dispose(System.Boolean)">
            <summary>
            Disposes.
            </summary>
            <param name="disposing">Whether disposing.</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.#ctor">
            <summary>
            Creates a new FarPoint check box control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.BackgroundImage">
            <summary>
            Gets or sets the picture to use as the background image of the check box control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the background picture changes.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.PictureWidth">
            <summary>
            Gets or sets the width of the check box picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.FocusRectangle">
            <summary>
            Gets or sets whether focus rectangle is displayed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.PictureHeight">
            <summary>
            Gets or sets the height of the check box picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.PictureAlignH">
            <summary>
            Gets or sets the horizontal alignment of the check box picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.PictureAlignV">
            <summary>
            Gets or sets the vertical alignment of the check box picture in the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.ResetCaption">
            <summary>
            Resets the text for the check box to its default setting. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.Caption">
            <summary>
            Gets or sets the default text displayed in the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.HotkeyPrefix">
            <summary>
            Gets or sets whether the ampersand character underlines text.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.VisualStyles">
            <summary>
            Gets or sets whether to use visual styles.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the ThemeChanged event for the VisualStyleTheme
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.ResetTextTrue">
            <summary>
            Resets the text for the true state of the check box to its default setting.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.ResetTextFalse">
            <summary>
            Resets the text for the false state of the check box to its default setting.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.ResetTextIndeterminate">
            <summary>
            Resets the text for the indeterminate state of the check box to its default setting.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.TextTrue">
            <summary>
            Gets or sets the text displayed when the state of the check box control is true.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.TextFalse">
            <summary>
            Gets or sets the text displayed when the state of the check box control is false.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.TextIndeterminate">
            <summary>
            Gets or sets the text displayed when the state of the check box control is indeterminate.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.Checked">
            <summary>
            Gets or sets whether the check box is checked.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.AutoCheck">
            <summary>
            Gets or sets whether the user can toggle the state of the check box control  
            by clicking the control or by pressing the spacebar when the control has the focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.CheckState">
            <summary>
            Gets or sets the state of the check box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.TextAlign">
            <summary>
            Gets or sets the alignment of the text relative to the picture in the check box control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.ThreeState">
            <summary>
            Gets or sets whether the check box control has a third state.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.Value">
            <summary>
            Gets or sets the value of the check box control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCheckBox.Picture">
            <summary>
            Gets or sets the array of pictures to use as the check box image.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnAfterFocus(System.EventArgs)">
            <summary>
            Raises the AfterFocus event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the CheckedChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnCheckStateChanged(System.EventArgs)">
            <summary>
            Raises the CheckStateChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Size,System.Object,System.Drawing.Font,System.String,System.String,System.String,System.String,FarPoint.Win.CheckBoxPicture,FarPoint.Win.ButtonTextAlign,System.Boolean,System.Boolean,System.Drawing.Text.HotkeyPrefix)">
            <summary>
            Calculates the height and width to display the text and picture in the check box.
            </summary>
            <param name="g">Graphics device interface for drawing; GDI+ graphics surface</param>
            <param name="size">Preferred or maximum needed size</param>
            <param name="value">CheckState constant specifying the check box state, or null (or non-CheckState value) to use as the current state of the check box</param>
            <param name="f">Font for computing the height and width</param>
            <param name="textTrue">String of text when the check box is checked (true)</param>
            <param name="textFalse">String of text when the check box is unchecked (false)</param>
            <param name="textGray">String of text when the check box is gray (indeterminate)</param>
            <param name="caption">String of text if none of the other text values are set</param>
            <param name="pict">Picture (image) for the check box</param>
            <param name="align">Alignment of the text and check box</param>
            <param name="bKeyDown">Whether the key down</param>
            <param name="bMouseDown">Whether the mouse down</param>
            <param name="prefix">Hotkey prefix</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles key down event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles key up event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnGotFocus(System.EventArgs)">
            <summary>
            Handles got focus event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnLostFocus(System.EventArgs)">
            <summary>
            Handles focus lost event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles mouse down event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles mouse move event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles mouse up event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the check box.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.AdjustStringFormat(System.Drawing.StringFormat@)">
            <summary>
            Adjusts the format.
            </summary>
            <param name="fmt">Format</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.CheckValue,System.Boolean,System.Drawing.Font,System.String,System.String,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.CheckBoxPicture,System.Boolean,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Drawing.StringFormat,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Paints the check box with the default picture height and width.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnMouseLeave(System.EventArgs)">
            <summary>
            Handles mouse leave event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.OnMouseEnter(System.EventArgs)">
            <summary>
            Handles mouse enter event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.CheckValue,System.Boolean,System.Drawing.Font,System.String,System.String,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.CheckBoxPicture,System.Boolean,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Drawing.StringFormat,System.Boolean,System.Int32,System.Int32,FarPoint.Win.VisualStyles,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Paints the check box.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.CheckValue,System.Boolean,System.Drawing.Font,System.String,System.String,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.CheckBoxPicture,System.Boolean,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Drawing.StringFormat,System.Boolean,System.Int32,System.Int32,FarPoint.Win.VisualStyles,System.Boolean,FarPoint.Win.FocusRectangle,System.Single,System.Boolean)">
            <summary>
            Paints the check box.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.CheckValue,System.Boolean,System.Drawing.Font,System.String,System.String,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.CheckBoxPicture,System.Boolean,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Drawing.StringFormat,System.Boolean,System.Int32,System.Int32,FarPoint.Win.VisualStyles,System.Boolean,FarPoint.Win.FocusRectangle,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Paints the check box.
            </summary>
            <param name="g">GDI+ grphics surface</param>
            <param name="r">Check box rectangle</param>
            <param name="backColor">Background color of control</param>
            <param name="foreColor">Foreground (text) color of control</param>
            <param name="pictAlignH">Horizontal alignment of the picture</param>
            <param name="pictAlignV">Vertical alignment of the picture</param>
            <param name="paintVal">Specifies the value of the check box.</param>
            <param name="bFocus">Whether it is focused</param>
            <param name="f">Font of the text</param>
            <param name="textTrue">Text when check value is true</param>
            <param name="textFalse">Text when check value is false</param>
            <param name="textGray">Text when check value is intermediate</param>
            <param name="caption">Caption of checkbox</param>
            <param name="nAlign">Aligment of text</param>
            <param name="pict">picture of checkbox</param>
            <param name="bKeyDown">Whether key is pressing down</param>
            <param name="bMouseDown">Whether mouse is pressing down</param>
            <param name="bMouseOver">Whether mouse is hovering</param>
            <param name="backpict">Background picture of check box</param>
            <param name="fmt">Formatter of text</param>
            <param name="bLocked">Whether it is locked</param>
            <param name="pictWidth">Specifies width of picture</param>
            <param name="pictHeight">Specifies height of picture</param>
            <param name="visualStyles">Specifies if visual styles are applied to the control</param>
            <param name="rightToLeft">Specifies whether system is right to left</param>
            <param name="focusRect">Specifies whether to show focus rectangle or not</param>
            <param name="isGrayScale">Whether painting in grayscale mode</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.CheckValue,System.Boolean,System.Drawing.Font,System.String,System.String,System.String,System.String,FarPoint.Win.ButtonTextAlign,FarPoint.Win.CheckBoxPicture,System.Boolean,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Drawing.StringFormat,System.Boolean,System.Int32,System.Int32,FarPoint.Win.VisualStyles,System.Boolean,FarPoint.Win.FocusRectangle,System.Boolean,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Paints the check box.
            </summary>
            <param name="g">GDI+ grphics surface</param>
            <param name="r">Check box rectangle</param>
            <param name="backColor">Background color of control</param>
            <param name="foreColor">Foreground (text) color of control</param>
            <param name="pictAlignH">Horizontal alignment of the picture</param>
            <param name="pictAlignV">Vertical alignment of the picture</param>
            <param name="paintVal">Specifies the value of the check box.</param>
            <param name="bFocus">Whether it is focused</param>
            <param name="f">Font of the text</param>
            <param name="textTrue">Text when check value is true</param>
            <param name="textFalse">Text when check value is false</param>
            <param name="textGray">Text when check value is intermediate</param>
            <param name="caption">Caption of checkbox</param>
            <param name="nAlign">Aligment of text</param>
            <param name="pict">picture of checkbox</param>
            <param name="bKeyDown">Whether key is pressing down</param>
            <param name="bMouseDown">Whether mouse is pressing down</param>
            <param name="bMouseOver">Whether mouse is hovering</param>
            <param name="backpict">Background picture of check box</param>
            <param name="fmt">Formatter of text</param>
            <param name="bLocked">Whether it is locked</param>
            <param name="pictWidth">Specifies width of picture</param>
            <param name="pictHeight">Specifies height of picture</param>
            <param name="visualStyles">Specifies if visual styles are applied to the control</param>
            <param name="rightToLeft">Specifies whether system is right to left</param>
            <param name="focusRect">Specifies whether to show focus rectangle or not</param>
            <param name="isGrayScale">Whether painting in grayscale mode</param>
            <param name="preserveGraphicClipping">Whether painting within clipped bound of graphic.</param>
        </member>
        <member name="M:FarPoint.Win.FpCheckBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.AutoSearch">
            <summary>
            Specifies whether and how the list items in a combo box are searched and selected based on character key input. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.AutoSearch.None">
            <summary>
            Provides no searching based on character key input; ignores character key input
            </summary>
        </member>
        <member name="F:FarPoint.Win.AutoSearch.SingleCharacter">
            <summary>
            Searches the list items by first character based on a single character key input 
            and if there is a match, scrolls to the first item that matches it
            </summary>
        </member>
        <member name="F:FarPoint.Win.AutoSearch.MultipleCharacter">
            <summary>
            Searches the list items by any number of characters based on the character key input
            and if there is a match, scrolls to the first item that matches it
            </summary>
        </member>
        <member name="F:FarPoint.Win.AutoSearch.SingleGreaterThan">
            <summary>
            Searches the list items by first character based on a single character key input 
            and if there is a match, scrolls to the first item that matches it 
            and if not, moves to the next item in the list whose first character is greater than this character
            </summary>
        </member>
        <member name="T:FarPoint.Win.ListAlignment">
            <summary>
            Specifies which side of the combo box the drop-down list is aligned to.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ListAlignment.Left">
            <summary>
            Aligns the drop-down list to the left
            </summary>
        </member>
        <member name="F:FarPoint.Win.ListAlignment.Right">
            <summary>
            Aligns the drop-down list to the right
            </summary>
        </member>
        <member name="T:FarPoint.Win.ComboCharacterSet">
            <summary>
            Specifies the character set for valid cell contents.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComboCharacterSet.Ascii">
            <summary>
            Accepts any of the ASCII characters
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComboCharacterSet.Alpha">
            <summary>
            Accepts letters (alphabetic characters) only
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComboCharacterSet.AlphaNumeric">
            <summary>
            Accepts letters (alphabetic characters) or numbers (numeric characters) only
            </summary>
        </member>
        <member name="F:FarPoint.Win.ComboCharacterSet.Numeric">
            <summary>
            Accepts numbers (numeric characters) only
            </summary>
        </member>
        <member name="T:FarPoint.Win.PopupClosedEventArgs">
            <summary>
            Contains event information for a <see cref="!:PopupClosed"/> event.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupClosedEventArgs.popup">
            <summary>
            The popup form.
            </summary>
        </member>
        <member name="P:FarPoint.Win.PopupClosedEventArgs.Popup">
            <summary>
            Gets the popup form which is being closed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PopupClosedEventArgs.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructs a new instance of this class for the specified
            popup form.
            </summary>
            <param name="popup">Popup form which is being closed.</param>
        </member>
        <member name="T:FarPoint.Win.PopupCancelEventArgs">
            <summary>
            Arguments of a <see cref="!:PopupCancel"/> event.  Provides a
            reference to the popup form that is to be closed and 
            allows the operation to be cancelled.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupCancelEventArgs.cancel">
            <summary>
            Whether to cancel the operation
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupCancelEventArgs.location">
            <summary>
            Mouse down location
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupCancelEventArgs.popup">
            <summary>
            Popup form.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PopupCancelEventArgs.#ctor(System.Windows.Forms.Form,System.Drawing.Point)">
            <summary>
            Constructs a new instance of this class.
            </summary>
            <param name="popup">The popup form</param>
            <param name="location">The mouse location, if any, where the
            mouse event that would cancel the popup occured.</param>
        </member>
        <member name="P:FarPoint.Win.PopupCancelEventArgs.Popup">
            <summary>
            Gets the popup form.
            </summary>
        </member>
        <member name="P:FarPoint.Win.PopupCancelEventArgs.CursorLocation">
            <summary>
            Gets the location of the mouse down where the popup occurred that  
            caused the cancel.
            </summary>
        </member>
        <member name="P:FarPoint.Win.PopupCancelEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel closing the form. Set to
            <c>true</c> to prevent the popup from being closed.
            </summary>
        </member>
        <member name="T:FarPoint.Win.PopupClosedEventHandler">
            <summary>
            Represents the method which responds to a <see cref="!:PopupClosed"/> event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.PopupCancelEventHandler">
            <summary>
            Represents the method which responds to a <see cref="!:PopupCancel"/> event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.PopupWindowHelper">
            <summary>
            A class to assist in creating popup windows like combo box drop-downs and menus.
            This class includes functionality to keep the title bar of the popup owner form
            active while the popup is displayed, and to automatically cancel the popup
            whenever the user clicks outside the popup window or shifts focus to another 
            application.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupWindowHelper.popClosedHandler">
            <summary>
            Event Handler to detect when the popup window is closed
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupWindowHelper.filter">
            <summary>
            Message filter to detect mouse clicks anywhere in the application
            whilst the popup window is being displayed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupWindowHelper.popup">
            <summary>
            The popup form that is being shown.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupWindowHelper.owner">
            <summary>
            The owner of the popup form that is being shown:
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupWindowHelper.popupShowing">
            <summary>
            Whether the popup is showing or not.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupWindowHelper.skipClose">
            <summary>
            Whether the popup has been cancelled, notified by PopupCancel,
            rather than closed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.PopupWindowHelper.PopupClosed">
            <summary>
            Raised when the popup form is closed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.PopupWindowHelper.PopupCancel">
            <summary>
            Raised when the Popup Window is about to be cancelled.  The
            <see cref="P:FarPoint.Win.PopupCancelEventArgs.Cancel"/> property can be
            set to <c>true</c> to prevent the form from being cancelled.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PopupWindowHelper.ShowPopup(System.Windows.Forms.Control,System.Windows.Forms.Form,System.Drawing.Point)">
            <summary>
            Shows the specified Form as a popup window, keeping the
            Owner's title bar active and preparing to cancel the popup
            should the user click anywhere outside the popup window.
            <para>Typical code to use this message is as follows:</para>
            <code>
               frmPopup popup = new frmPopup();
               Point location = this.PointToScreen(new Point(button1.Left, button1.Bottom));
               popupHelper.ShowPopup(this, popup, location);
            </code>
            <para>Put as much initialization code as possible
            into the popup form's constructor, rather than the <see cref="E:System.Windows.Forms.Form.Load"/>
            event as this will improve the visual appearance.</para>
            </summary>
            <param name="owner">Main form which owns the popup</param>
            <param name="popup">Window to show as a popup</param>
            <param name="location">Location relative to the screen to show the popup at.</param>
        </member>
        <member name="M:FarPoint.Win.PopupWindowHelper.popup_Closed(System.Object,System.EventArgs)">
            <summary>
            Responds to the <see cref="E:System.Windows.Forms.Form.Closed"/>
            event from the popup form.
            </summary>
            <param name="sender">Popup form that has been closed.</param>
            <param name="e">Not used.</param>
        </member>
        <member name="M:FarPoint.Win.PopupWindowHelper.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Subclasses the owning form's existing Window Procedure to enables the 
            title bar to remain active when a popup is show, and to detect if
            the user clicks onto another application whilst the popup is visible.
            </summary>
            <param name="m">Window Procedure Message</param>
        </member>
        <member name="M:FarPoint.Win.PopupWindowHelper.ClosePopup">
            <summary>
            Called when the popup is being hidden.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PopupWindowHelper.OnPopupClosed(FarPoint.Win.PopupClosedEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.PopupWindowHelper.PopupClosed"/> event.
            </summary>
            <param name="e"><see cref="T:FarPoint.Win.PopupClosedEventArgs"/> that describe the
            popup form that is being closed.</param>
        </member>
        <member name="M:FarPoint.Win.PopupWindowHelper.OnPopupCancel(FarPoint.Win.PopupCancelEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.PopupWindowHelper.PopupCancel"/> event.
            </summary>
            <param name="e"><see cref="T:FarPoint.Win.PopupCancelEventArgs"/> that describe the
            popup form that is about to be cancelled.</param>
        </member>
        <member name="M:FarPoint.Win.PopupWindowHelper.#ctor(System.Windows.Forms.Control)">
            <summary>
            Default constructor.
            </summary>
            <remarks>Use the <see cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)"/>
            method to attach this class to the form you want to show popups from.</remarks>
        </member>
        <member name="T:FarPoint.Win.PopupWindowHelperMessageFilter">
            <summary>
            A Message Loop filter which detects mouse events while the popup form is shown
            and notifies the owning <see cref="T:FarPoint.Win.PopupWindowHelper"/> class when a mouse
            click outside the popup occurs.
            </summary>
        </member>
        <member name="E:FarPoint.Win.PopupWindowHelperMessageFilter.PopupCancel">
            <summary>
            Raised when the Popup Window is about to be cancelled.  The
            <see cref="P:FarPoint.Win.PopupCancelEventArgs.Cancel"/> property can be
            set to <c>true</c> to prevent the form from being cancelled.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupWindowHelperMessageFilter.popup">
            <summary>
            The popup form
            </summary>
        </member>
        <member name="F:FarPoint.Win.PopupWindowHelperMessageFilter.owner">
            <summary>
            The owning <see cref="T:FarPoint.Win.PopupWindowHelper"/> object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PopupWindowHelperMessageFilter.#ctor(FarPoint.Win.PopupWindowHelper,System.Windows.Forms.Control)">
            <summary>
            Constructs a new instance of this class and sets the owning
            object.
            </summary>
            <param name="owner">The <see cref="T:FarPoint.Win.PopupWindowHelper"/> object
            which owns this class.</param>
            <param name="host">The host control which receives message to be filtered</param>
        </member>
        <member name="P:FarPoint.Win.PopupWindowHelperMessageFilter.Popup">
            <summary>
            Gets or sets the popup form which is being displayed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PopupWindowHelperMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Checks the message loop for mouse messages while the popup
            window is displayed.  If one is detected the position is
            checked to see if it is outside the form, and the owner
            is notified if so.
            </summary>
            <param name="m">Windows Message about to be processed by the
            message loop</param>
            <returns><c>true</c> to filter the message, <c>false</c> otherwise.
            This implementation always returns <c>false</c>.</returns>
        </member>
        <member name="M:FarPoint.Win.PopupWindowHelperMessageFilter.OnMouseDown">
            <summary>
            Checks the mouse location and calls the OnCancelPopup method
            if the mouse is outside the popup form.		
            </summary>
        </member>
        <member name="M:FarPoint.Win.PopupWindowHelperMessageFilter.OnCancelPopup(FarPoint.Win.PopupCancelEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.PopupWindowHelperMessageFilter.PopupCancel"/> event.
            </summary>
            <param name="e">The <see cref="T:FarPoint.Win.PopupCancelEventArgs"/> associated 
            with the cancel event.</param>
        </member>
        <member name="T:FarPoint.Win.DropDownOptions">
            <summary>
            Specifies how to show the list in the combox cell type.
            </summary>
        </member>
        <member name="F:FarPoint.Win.DropDownOptions.None">
            <summary>
            Does not drop down when the cell or button area is clicked
            </summary>
        </member>
        <member name="F:FarPoint.Win.DropDownOptions.Inherit">
            <summary>
            Keeps the 3.0 behavior (default)
            </summary>
        </member>
        <member name="F:FarPoint.Win.DropDownOptions.Button">
            <summary>
            Displays the drop down when the button area is clicked, does not drop down when the cell area is clicked.
            </summary>
        </member>
        <member name="F:FarPoint.Win.DropDownOptions.Text">
            <summary>
            Displays the drop-down list when the cell area is clicked, does not drop down the list when the button area clicked.
            </summary>
        </member>
        <member name="F:FarPoint.Win.DropDownOptions.ButtonAndText">
            <summary>
            Displays the drop-down list when the cell or button area is clicked.
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpCombo">
            <summary>
            Represents the FarPoint combo box control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCombo.CloseUp">
            <summary>
            Occurs when the control goes away (closes up).
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCombo.AfterFocus">
            <summary>
            Occurs after the control receives focus.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCombo.SelectedIndexChanged">
            <summary>
            Occurs when the index of the selected item in the combo box list has changed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCombo.SelectedValueChanged">
            <summary>
            Occurs when the value of the selected item in the combo box list has changed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCombo.SelectionChangeCommitted">
            <summary>
            Occurs when the change to the selected item in the combo box list is committed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpCombo.ItemSubmited">
            <summary>
             Occurs when combo item supmited.
            </summary>        
        </member>
        <member name="P:FarPoint.Win.FpCombo.DropDownOptions">
            <summary>
            Gets or sets the drop down options
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.OriginalFont">
            <summary>
            Cache the original font before zooming.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.TouchDropDownScale">
            <summary>
            Indicates the drop down scale factor for a touch device.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.#ctor">
            <summary>
            Creates a FarPoint combo box control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.ListControl">
            <summary>
            Gets or sets an alternate list box control for the drop-down list in the combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.AcceptsArrowKeys">
            <summary>
            Gets or sets how keyboard arrow keys are handled.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.ListAlignment">
            <summary>
            Gets or sets which side of the control the drop-down list is aligned to.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.WordWrap">
            <summary>
            Gets or sets whether text that does not fit on one line wraps to multiple lines.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.AutoCompleteMode">
            <summary>
            Gets or sets how automatic completion works.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.AutoCompleteSource">
            <summary>
            Gets or sets a value that specifies the source of complete strings used for automatic completion.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.AutoCompleteCustomSource">
            <summary>
            Gets or sets a custom System.Collections.Specialized.StringCollection to use when the AutoCompleteSource property is set to CustomSource.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnEditTextCut(System.Object,System.EventArgs)">
            <summary>
            Raises the edit text cut event.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnEditTextPasted(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the edit text pasted event.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="P:FarPoint.Win.FpCombo.CharacterSet">
            <summary>
            Gets or sets which character set to use.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.CharacterCasing">
            <summary>
            Gets or sets the character casing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the LostFocus event.
            </summary>
            <param name="e">An EventArgs that contains event data.</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the got focus event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnEditTextChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the edit text changed.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="P:FarPoint.Win.FpCombo.Editable">
            <summary>
            Gets or sets whether the text portion of the combo box is editable.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.BorderStyle">
            <summary>
            Gets or sets the border style.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.Multiline">
            <summary>
            Gets or sets whether the combo box displays text in multiple lines.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.AcceptsReturn">
            <summary>
            Gets or sets whether the combo box accepts a keyboard return (Enter key).
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.MaximumLength">
            <summary>
            Gets or sets the maximum number of characters for data in the text portion of the combo box.
            </summary>   
        </member>
        <member name="P:FarPoint.Win.FpCombo.ListOffset">
            <summary>
            Gets or sets the number of pixels to offset the list from the aligned edge of the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.BackgroundColor">
            <summary>
            Gets or sets the background color of the combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.ListWidth">
            <summary>
            Gets or sets the width of the drop-down list in the combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.MaxDrop">
            <summary>
            Gets or sets the number of items to show in the drop-down list at one time in the combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.AutoSearch">
            <summary>
            Gets or sets how a list of items in a combo box is searched based on input of a character key.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.List">
            <summary>
            Gets or sets the list of items in a combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.ItemData">
            <summary>
            Gets or sets the item data list in a combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.ImageList">
            <summary>
            Gets or sets the image list in a combo box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.SelectedItem">
            <summary>
            Gets or sets the selected item in the combo box list.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item in the combo box list.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpCombo.DroppedDown">
            <summary>
            Gets or sets whether the drop-down list is displayed (dropped down).
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.SelectPageDown">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.SelectNext">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.SelectPageUp">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.SelectPrevious">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnEditKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Internal use only. Raises the edit key press event.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnEditMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnEditMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
            <param name="keyData">Key data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.DoAutoSearching(System.Int32,FarPoint.Win.AutoSearch)">
            <summary>
            Internal use only. Performs an automatic search on the specified character.
            </summary>
            <param name="c">character</param>
            <param name="search">Auto search</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
            <param name="keyData">Key data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.HandleValidCharacter(System.Int32@)">
            <summary>
            Internal use only.
            </summary>
            <param name="key">Key index</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.HandleValidKey(System.Int32)">
            <summary>
            Internal use only.  Handles valid character key input.
            </summary>
            <param name="key">Character key entered</param>
            <returns>True if valid; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnCloseUp(System.EventArgs)">
            <summary>
            Raises the CloseUp event.
            </summary>
            <param name="e">EventArgs object that contains the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnDropDown(FarPoint.Win.DropDownEventArgs)">
            <summary>
            Raises the DropDown event.
            </summary>
            <param name="e">DropDownEventArgs object that contains the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnAfterFocus(System.EventArgs)">
            <summary>
            Raises the AfterFocus event
            </summary>
            <param name="e">A System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the SelectedIndexChanged event.
            </summary>
            <param name="e">EventArgs object that contains the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnSelectedValueChanged(System.EventArgs)">
            <summary>
            Raises the SelectedValueChanged event.
            </summary>
            <param name="e">EventArgs object that contains the event data</param>
        </member>
        <member name="P:FarPoint.Win.FpCombo.ShowDropDownWhenEnter">
            <summary>
            Gets or sets whether to close the drop-down list and stop editing after pressing the enter key or clicking a combo box list item. 
            </summary>        
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnItemSubmited(System.EventArgs)">
            <summary>
            Raises the ItemSubmited event.
            </summary>
            <param name="e">EventArgs object that contains the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnSelectionChangeCommitted(System.EventArgs)">
            <summary>
            Raises the SelectionChangeCommitted event.
            </summary>
            <param name="e">EventArgs object that contains the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.DropDownDefaultAction">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>	  
        </member>
        <member name="M:FarPoint.Win.FpCombo.DropDownNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="P:FarPoint.Win.FpCombo.Text">
            <summary>
            Gets or sets the formatted contents or the control as a string 
            matching exactly what is displayed.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.GetPopupLocation(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.FpCombo.ShowList(System.Boolean)">
            <summary>
            Determines whether to show the drop-down list of the combo box control.
            </summary>
            <param name="bShow">Whether to show the drop-down list</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.Dispose(System.Boolean)">
            <summary>
            Internal use only. Disposes and frees up resources.
            </summary>
            <param name="disposing">Whether disposing</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnLocationChanged(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.LocationChanged event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse down event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.ToggleState">
            <summary>
            Internal use only.  Toggles the state of the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.GetDroppedList">
            <summary>
            Gets the drop-down list box.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpCombo.DrawListBoxItem(System.Windows.Forms.ListBox,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Draws one of the list box items.
            </summary>
            <param name="ctlListBox">List box control</param>
            <param name="e">DrawItem event that contains the item</param>
        </member>
        <member name="M:FarPoint.Win.FpCombo.ProcessDialogChar(System.Char)">
            <summary>
            Internal use only.
            </summary>
            <param name="charCode">Character code</param>
        </member>
        <member name="T:FarPoint.Win.MathOverride">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:FarPoint.Win.MathOverride.pow10">
            <summary>
            Provides quick lookup for some common powers of 10.
            </summary>
        </member>
        <member name="M:FarPoint.Win.MathOverride.Pow10(System.Int32)">
            <summary>
            Returns 10 raised to the specified power.
            </summary>
        </member>
        <member name="M:FarPoint.Win.MathOverride.ApproxEqual(System.Double,System.Double)">
            <summary>
            Tests the equalness of two numbers with an accuracy of the magnitude
            of the given values scaled by 2^-50 (2 bits stripped).  This is used  //#99927151 tomhoang 2012/08/09
            by the rounding and truncating methods to iron out small roundoff
            errors.
            </summary>
        </member>
        <member name="M:FarPoint.Win.MathOverride.ApproxRoundDecimal(System.Decimal,System.Int32)">
            <summary>
            A round method taking ApproxEqual into account for decimal values.
            </summary>
        </member>
        <member name="M:FarPoint.Win.MathOverride.ApproxRound2(System.Double,System.Int32)">
            <summary>
            A round method taking ApproxEqual into account for double values to 15 base-10 digits.
            </summary>
        </member>
        <member name="M:FarPoint.Win.MathOverride.ApproxFloor(System.Double)">
            <summary>
            A floor method taking ApproxEqual into account.
            </summary>
        </member>
        <member name="M:FarPoint.Win.MathOverride.ApproxCeiling(System.Double)">
            <summary>
            A ceiling method taking ApproxEqual into account.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ControlBase">
            <summary>
            Represents the common basis (base class) for FarPoint controls.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ControlBase.#ctor">
            <summary>
            Creates a new base class for controls.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ControlBase.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is an input key that the control 
            can handle without preprocessing.
            </summary>
            <param name="keyData">Key to check</param>
            <returns>
            true if the key can be handled by the control without preprocessing; false otherwise
            </returns>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.GotFocus event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.LostFocus event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.InvalidateFocus">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnPaint(System.Windows.Forms.PaintEventArgs,System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
            <param name="val"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.SetClientSize(System.Drawing.Rectangle)">
            <summary>
            Sets the client rectangle size for the control.
            </summary>
            <param name="rect">Client Rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.GetAdjustedClientRectangle(System.Drawing.Rectangle,FarPoint.Win.Inset,FarPoint.Win.Inset)">
            <summary>
            Returns the adjusted client rectangle for the control.
            </summary>
            <param name="ctlRectangle">Client Rectangle</param>
            <param name="border">Border inset</param>
            <param name="margin">Margin inset</param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.SetBoundingRectangle(System.Drawing.Rectangle,FarPoint.Win.Inset,FarPoint.Win.Inset)">
            <summary>
            Sets the bounds for the client rectangle for the control.
            </summary>
            <param name="ctlRectangle">Client Rectangle</param>
            <param name="border">Border inset</param>
            <param name="margin">Margin inset</param>
        </member>
        <member name="M:FarPoint.Win.ControlBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.TextAlign">
            <summary>
            Specifies the alignment of text and pictures in a control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextAlign.TextBottomPictTop">
            <summary>
            Positions the text at the bottom of the control and the picture, 
            if any, is positioned above it
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextAlign.TextTopPictBottom">
            <summary>
            Positions the text at the top of the control and the picture, 
            if any, is positioned below it
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextAlign.TextLeftPictRight">
            <summary>
            Positions the text on the left side of the control and the picture, 
            if any, is positioned to the right of it
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextAlign.TextRightPictLeft">
            <summary>
            Positions the text on the right side of the control and the picture, 
            if any, is positioned to the left of it
            </summary>
        </member>
        <member name="T:FarPoint.Win.DrawFocusRectangle">
            <summary>
            Specifies the display and location of the focus rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.Default">
            <summary>
            Inherits the focus rectangle from the system settings
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.None">
            <summary>
            Does not display the focus rectangle
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.AroundText">
            <summary>
            Draws a focus rectangle around the text only
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.AroundPicture">
            <summary>
            Draws a focus rectangle around the picture only
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.AroundTextAndPicture">
            <summary>
            Draws a focus rectangle around the text and the picture
            </summary>
        </member>
        <member name="F:FarPoint.Win.DrawFocusRectangle.AroundEdge">
            <summary>
            Draws a focus rectangle around the edge of the element
            </summary>
        </member>
        <member name="T:FarPoint.Win.TextOrientation">
            <summary>
            Specifies the orientation of the text in a control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextHorizontal">
            <summary>
            Aligns the text horizontally in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextHorizontalFlipped">
            <summary>
            Aligns the text horizontally in the control and flipped
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextVertical">
            <summary>
            Aligns the text vertically in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextVerticalFlipped">
            <summary>
            Aligns the text vertically in the control and flipped
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextTopDown">
            <summary>
            Aligns the text from the top to the bottom of the control and wraps left to right
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextTopDownRTL">
            <summary>
            Aligns the text from the top to the bottom of the control and wraps right to left
            </summary>
        </member>
        <member name="F:FarPoint.Win.TextOrientation.TextRotateCustom">
            <summary>
            Aligns the text based on a rotation angle for shape-related objects only
            </summary>
        </member>
        <member name="T:FarPoint.Win.PictureOrientation">
            <summary>
            Specifies the orientation of the picture in the control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureOrientation.PictureRotateNone">
            <summary>
            Does not rotate the picture
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureOrientation.PictureRotate90">
            <summary>
            Rotates the picture 90 degrees to the right
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureOrientation.PictureRotate180">
            <summary>
            Rotates the picture 180 degrees to the right
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureOrientation.PictureRotate270">
            <summary>
            Rotates the picture 270 degrees to the right
            </summary>
        </member>
        <member name="F:FarPoint.Win.PictureOrientation.PictureRotateCustom">
            <summary>
            Rotates the picture a custom number of degrees to the right
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementState">
            <summary>
            Specifies the state of the element for display. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementState.Normal">
            <summary>
            Display state is normal (active)
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementState.Inverted">
            <summary>
            Display state is inverted (as if it has been pressed)
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementState.Inactive">
            <summary>
            Display state is inactive
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementWithButtonsStyle">
            <summary>
            Specifies the button style to use in the ElementWithButtons class.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtonsStyle.StaticNoButtons">
            <summary>
            Does not display a button
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtonsStyle.Scroll">
            <summary>
            Displays a button on either side
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtonsStyle.DropDown">
            <summary>
            Displays a drop-down button on the right side
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtonsStyle.PopUp">
            <summary>
            Displays a pop-up button on the right side
            </summary>
        </member>
        <member name="T:FarPoint.Win.IStateNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IStateNotify.StateNotify(System.Object)">
            <summary>Internal use only.</summary>
        </member>
        <member name="T:FarPoint.Win.IElementNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IElementNotify.ElementNotify(System.Object,System.Object)">
            <summary>Internal use only.</summary>
        </member>
        <member name="T:FarPoint.Win.IElementDeletedNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IElementDeletedNotify.ElementDeletedNotify(System.Object,System.Object)">
            <summary>Internal use only.</summary>
        </member>
        <member name="T:FarPoint.Win.IInternalCommunication">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IInternalCommunication.PassString(System.String,System.String@)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IInternalCommunication.PassStringBytes(System.String,System.Byte[]@)">
            <summary>Internal use only.</summary>
        </member>
        <member name="T:FarPoint.Win.IElementEnhanced">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.IElementEnhanced.TextRotationAngle">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementEnhanced.PictureRotationAngle">
            <summary>Internal use only.</summary>
        </member>
        <member name="T:FarPoint.Win.IElement">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Border">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.PictureMargin">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.MarginRight">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.MarginLeft">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.MarginTop">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.MarginBottom">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Picture">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.PictureTransparencyColor">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.ForegroundImage">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.BackgroundImage">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Font">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.BackColor">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.ForeColor">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.AlignHorz">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.AlignVert">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.AlignText">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.TextOrientation">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.TextWrap">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.PictureOrientation">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.State">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.DrawFocusRectangle">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Tag">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.PictureTransparencyTolerance">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Redraw">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Parent">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Text">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Name">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Visible">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Enabled">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.CanFocus">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Selectable">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Rectangle">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.Focused">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.CancelMouse">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.ContainsFocus">
            <summary>Internal use only.</summary>
        </member>
        <member name="P:FarPoint.Win.IElement.StateNotifyList">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.GetClientRectangle">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.GetClientRectangle(System.Drawing.Rectangle)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.GetControl">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.GetFont">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.SetBounds(System.Drawing.Rectangle)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.Focus(System.Boolean)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.Refresh">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.Update">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.DoMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.DoMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.DoClick(System.Object,System.EventArgs)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.DoDoubleClick(System.Object,System.EventArgs)">
            <summary>Internal use only.</summary>
        </member>
        <member name="M:FarPoint.Win.IElement.SetRedraw(System.Boolean,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.ForegroundImageChanged">
            <summary>
            Occurs when the foreground image in the control changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.BackgroundImageChanged">
            <summary>
            Occurs when the background image in the control changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.PictureChanged">
            <summary>
            Occurs when the picture in the control changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.FontChanged">
            <summary>
            Occurs when the font in the control changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.Click">
            <summary>
            Occurs when the user presses and releases the left or right mouse button and the pointer is on an element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.DoubleClick">
            <summary>
            Occurs when the user presses and releases the left or right mouse button twice in succession while the pointer is on an element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.MouseDown">
            <summary>
            Occurs when the user presses a mouse button.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.MouseUp">
            <summary>
            Occurs when the user releases a mouse button.
            </summary>
        </member>
        <member name="E:FarPoint.Win.IElement.MouseMove">
            <summary>
            Occurs when the user moves the mouse.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementWithButtons">
            <summary>
            Represents windowless elements that display buttons.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtons.dropDown">
            <summary>Drop-down button</summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtons.scrollUp">
            <summary>Spin-up button</summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtons.scrollDown">
            <summary>Scroll-down button</summary>
        </member>
        <member name="F:FarPoint.Win.ElementWithButtons.popUp">
            <summary>Pop-up button</summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.#ctor">
            <summary>
            Creates a new element with buttons with default values. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.#ctor(System.Object)">
            <summary>
            Creates a new element with buttons by copying a specified object.
            </summary>
            <param name="cloneFrom">Object from which to make a copy</param>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.IsTouchStatus">
            <summary>
            Indicates whether the current device is a touch device.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.TouchDropDownScale">
            <summary>
            Indicates the drop down scale factor for a touch device.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.Dispose">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.InitializeButtons">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.Redraw">
            <summary>
            Gets or sets whether the element is allowed to paint. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.SetRedraw(System.Boolean,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.Parent">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.AttachListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.ButtonStyle">
            <summary>
            Gets or sets the button style for ElementsWithButtons objects.
            </summary>
            <example>
            <code lang="csharp">
            element.ButtonStyle = FarPoint.Win.ElementWithButtonsStyle.DropDown;
            element.ButtonWidth = 5;
            </code>
            <code lang="vb">
            element.ButtonStyle = FarPoint.Win.ElementWithButtonsStyle.DropDown
            element.ButtonWidth = 5
            </code>
            </example>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.GetClientRectangle(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.ButtonWidth">
            <summary>
            Gets or sets the button width.
            </summary>
            <example>
            <code lang="csharp">
            element.ButtonStyle = FarPoint.Win.ElementWithButtonsStyle.DropDown;
            element.ButtonWidth = 5;
            </code>
            <code lang="vb">
            element.ButtonStyle = FarPoint.Win.ElementWithButtonsStyle.DropDown
            element.ButtonWidth = 5
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.VisualStyles">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.ButtonWidthInternal">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.ScrollUpButton">
            <summary>
            Gets whether a scroll up button has been implemented.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.ScrollDownButton">
            <summary>
            Gets whether a scroll down button has been implemented.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.DropDownButton">
            <summary>
            Gets whether a drop-down button has been implemented.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWithButtons.PopUpButton">
            <summary>
            Gets whether a pop-up button has been implemented.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the MouseDown event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the MouseUp event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnScrollClick(System.Object,System.EventArgs)">
            <summary>
            Processes the Click events that occur in scroll buttons.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnScrollMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the MouseDown events that occur in scroll buttons.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnScrollDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Processes the DoubleClick events that occur in scroll buttons.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnDropClick(System.Object,System.EventArgs)">
            <summary>
            Processes the Click events that occur in a drop-down button.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnDropDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Processes the DoubleClick events that occur in a drop-down button.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnPopUpClick(System.Object,System.EventArgs)">
            <summary>
            Processes the Click events that occur in the pop-up button.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnPopUpDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Processes the DoubleClick events that occur in the pop-up button.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.Clone">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.AdjustClientArea">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.SetBoundsFloat(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the bounds of the element to the location and size of the bounding rectangle of the specified dimensions. 
            </summary>
            <param name="x">X-coordinate of the top left corner of the bounding rectangle</param>
            <param name="y">Y-coordinate of the top left corner of the bounding rectangle</param>
            <param name="width">Number of pixels in the width of the bounding rectangle</param>
            <param name="height">Number of pixels in the height of the bounding rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.SetElementBounds(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.DoClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.OnDropMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.ElementWithButtons.DoMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.NoFocusChangeException">
            <summary>
            Represents the no-focus-change exception.
            </summary>
        </member>
        <member name="M:FarPoint.Win.NoFocusChangeException.#ctor">
            <summary>Creates a new no-focus-change exception.</summary>
        </member>
        <member name="M:FarPoint.Win.NoFocusChangeException.#ctor(System.String)">
            <summary>Creates a new no-focus-change exception.</summary>
        </member>
        <member name="M:FarPoint.Win.NoFocusChangeException.#ctor(System.String,System.Exception)">
            <summary>Creates a new no-focus-change exception.</summary>
        </member>
        <member name="M:FarPoint.Win.NoFocusChangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new no-focus-change exception from serialization.</summary>
        </member>
        <member name="M:FarPoint.Win.NoFocusChangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data from serialization.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:FarPoint.Win.DropDownButtonElement">
            <summary>
            Represents the drop-down button element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.#ctor">
            <summary>
            Creates a new drop-down button element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.Finalize">
            <summary>
            Releases system resources.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.Dispose">
            <summary>
            Releases system resources.
            </summary>
        </member>
        <member name="P:FarPoint.Win.DropDownButtonElement.VisualStyles">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.AttachMouseListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.DetachListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.DoMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.DoMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownButtonElement.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SpinUpButtonElement">
            <summary>
            Represents a spin-up button element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.#ctor">
            <summary>
            Creates a new spin-up button element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.Finalize">
            <summary>
            Releases system resources.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.Dispose">
            <summary>
            Releases system resources.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SpinUpButtonElement.VisualStyles">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.AttachMouseListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.DetachListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.DoMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.DoMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpButtonElement.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SpinDownButtonElement">
            <summary>
            Represents a spin-down button element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.#ctor">
            <summary>
            Creates a new spin-down button element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.Finalize">
            <summary>
            Releases system resources.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.Dispose">
            <summary>
            Releases system resources.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SpinDownButtonElement.VisualStyles">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.AttachMouseListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.DetachListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.DoMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.DoMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownButtonElement.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ButtonElement">
            ==========================================================================================
             <summary>
             Represents a button element object.
             </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonElement.pressed">
            <summary>
            Determines whether the button is pressed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ButtonElement.#ctor">
            <summary>
            Creates a button element object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ButtonElement.#ctor(System.Object)">
            <summary>
            Creates a button element object by copying another.
            </summary>
            <param name="cloneFrom">Object from which to make a copy</param>
        </member>
        <member name="M:FarPoint.Win.ButtonElement.Clone">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ButtonElement.OnGotFocus(System.EventArgs)">
            <summary>
            Occurs when the element gets focus.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.ButtonElement.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown processing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ButtonElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseUp processing.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementControl">
            <summary>
            Represents a control element.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementControl.PICTURE_MARGIN_DEFAULT">
            <summary>
            Represents the default picture margin for the element, namely 2 pixels.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementControl.BACK_COLOR_DEFAULT">
            <summary>
            Represents the default color background for the element, namely SystemColors.Control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementControl.FORE_COLOR_DEFAULT">
            <summary>
            Represents the default text color for the element, namely SystemColors.ControlText.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementControl.fontOverride">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementControl.PictureChanged">
            <summary>
            Occurs when the picture in the control has changed.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementControl.ForegroundImageChanged">
            <summary>
            Occurs when the foreground image in the control has changed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.#ctor">
            <summary>
            Creates a control element (ElementControl object).
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Finalize">
            <summary>
            The destructor method of FpElement
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.#ctor(System.Object)">
            <summary>
            Creates a control element (ElementControl object) based on the specified object.
            </summary>
            <param name="cloneFrom">Object on which to base the control element being created</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializePictureTransparencyTolerance">
            <summary>
            Indicates whether the PictureTransparencyTolerance property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetPictureTransparencyTolerance">
            <summary>
            Resets the transparency tolerance for a picture in the element to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureTransparencyTolerance">
            <summary>
            Gets or sets the picture transparency tolerance for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.TextWrap">
            <summary>
            Gets or sets whether to automatically wrap text without line breaks in the element. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.TextWrapPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.CancelMouse">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.CancelMousePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Focused">
            <summary>
            Gets whether the control has focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ContainsFocus">
            <summary>
            Gets whether the element currently has the input focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureMargin">
            <summary>
            Gets or sets the margin between the text and the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureMarginPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.AdjustClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginBottom">
            <summary>
            Gets or sets the margin between the bottom of the control and its contents.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginBottomPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginTop">
            <summary>
            Gets or sets the margin between the top of the control and its contents.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginTopPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginLeft">
            <summary>
            Gets or sets the margin between the left edge of the control and its contents.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginLeftPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginRight">
            <summary>
            Gets or sets the margin between the right edge of the control and its contents.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.MarginRightPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Redraw">
            <summary>
            Gets or sets whether the element is allowed to paint.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.SetRedraw(System.Boolean,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Parent">
            <summary>
            Gets or sets the parent of the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ParentPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Visible">
            <summary>
            Gets or sets whether the control is visible.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Enabled">
            <summary>
            Gets or sets whether the control can receive focus and respond to user actions.
            </summary> 
        </member>
        <member name="P:FarPoint.Win.ElementControl.Selectable">
            <summary>
            Gets or sets whether the control can receive focus. 
            </summary>      
        </member>
        <member name="P:FarPoint.Win.ElementControl.SelectablePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.CanFocus">
            <summary>
            Gets or sets whether the control can receive focus. 
            </summary>  
        </member>
        <member name="P:FarPoint.Win.ElementControl.CanFocusPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetBorder">
            <summary>
            Resets the border of the control to its default settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializeBorder">
            <summary>
            Internal use only. 
            </summary>    
        </member>
        <member name="P:FarPoint.Win.ElementControl.Border">
            <summary>
            Gets or sets the border for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.BorderPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignText">
            <summary>
            Gets or sets the alignment of the text in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignTextPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.TextOrientation">
            <summary>
            Gets or sets the orientation of the text in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.TextOrientationPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureOrientation">
            <summary>
            Gets or sets the orientation of the picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureOrientationPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializePictureTransparencyColor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetPictureTransparencyColor">
            <summary>
            Resets the picture transparency color to its default color.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PictureTransparencyColor">
            <summary>
            Gets or sets the transparency color for the picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ForegroundImage">
            <summary>
            Gets or sets the foreground image for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ForegroundImagePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetPicture">
            <summary>
            Resets the picture for the control to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Picture">
            <summary>
            Gets or sets the picture for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.PicturePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.DrawFocusRectangle">
            <summary>
            Gets or sets the drawing style of the focus rectangle in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.DrawFocusRectanglePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.State">
            <summary>
            Gets or sets the element state for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.StatePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializeFont">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetFont">
            <summary>
            Resets the font of the control to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Font">
            <summary>
            Gets or sets the font for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.FontPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the ParentChanged event when the 
            parent control has changed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetFont">
            <summary>
            Gets the current font or the default font if no font is specified.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Text">
            <summary>
            Gets or sets the contents of the control as a string matching exactly what is displayed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.TextPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetText">
            <summary>
            Resets the contents to the default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.About">
            <summary>
            Displays information about the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Name">
            <summary>
            Gets or sets the name used in code to identify the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializeBackColor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetBackColor">
            <summary>
            Resets the background color of the control to its default value. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.BackColorPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ShouldSerializeForeColor">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetForeColor">
            <summary>
            Resets the text color of the control to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ForeColor">
            <summary>
            Gets or sets the text color for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ForeColorPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of the contents of the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignHorzPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignVert">
            <summary>
            Gets or sets the vertical alignment of the contents of the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.AlignVertPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Rectangle">
            <summary>
            Gets or sets the rectangle in the client area of the control. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.StateNotifyList">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.Elements">
            <summary>
            Gets the collection of IElement-derived objects that the current ElementControl contains.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementControl.ElementsPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Select(System.Boolean)">
            <summary>
            Activates the control.
            </summary>
            <param name="selected">true if selected; false otherwise</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetControl">
            <summary>
            Gets the control.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Update">
            <summary>
            Causes the control to redraw the invalidated regions within its client area.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounds of the element to the position and size of the bounding rectangle of the specified dimensions. 
            </summary>
            <param name="x">X-coordinate of the top left corner of the bounding rectangle</param>
            <param name="y">Y-coordinate of the top left corner of the bounding rectangle</param>
            <param name="width">Number of pixels in the width of the bounding rectangle</param>
            <param name="height">Number of pixels in the height of the bounding rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the element to the position and size of the specified bounding rectangle object. 
            </summary>
            <param name="rectInput">Rectangle object that contains the bounding rectangle</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Focus(System.Boolean)">
            <summary>
            Moves the focus to the control.
            </summary>
            <param name="giveFocus">Whether to move focus to the control</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the BackgroundImageChanged event when the 
            background picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnForegroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementControl.ForegroundImageChanged"/> event when the 
            foreground picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPictureChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementControl.PictureChanged"/> event when the 
            picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnLostFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnGotFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnLostFocusNoRefresh(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnGotFocusNoRefresh(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event when the user 
            clicks with the cursor over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.DoClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only. 
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the DoubleClick event when the user 
            double clicks with the cursor over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.DoDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only. 
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event when the pointer button 
            is pressed while the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.DoMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event when the pointer button 
            is released while the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.DoMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event when the pointer is moved 
            within the control and the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ResetElements">
            <summary>
            Resets the elements to their default settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Clone">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.SetState(FarPoint.Win.ElementState)">
            <summary>
            Internal use only.
            </summary>
            <param name="eState">State of the control</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.ToggleState">
            <summary>
            Toggles the state of the control.
            </summary>  
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetClientRectangle">
            <summary>
            Internal use only.
            </summary>
            <returns>Coordinates of the control</returns>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetClientRectangle(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <returns>Coordinates of the control</returns>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event when the 
            element has been asked to repaint itself.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the control (both text and picture) with an overriding style.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Rectangle boundary of the area</param>
            <param name="overrideStyle">ElementStyle to use as style</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the control (text and picture).
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Rectangle boundary of the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetTextAndPictureRectangles(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
            <param name="rPict">Rectangle bounding the picture</param>
            <param name="rText">Rectangle bounding the text</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetTextAndPictureRectangles(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@,System.String)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
            <param name="rPict">Rectangle bounding the picture</param>
            <param name="rText">Rectangle bounding the text</param>
            <param name="paintString">String</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.AdjustStringFormat(System.Drawing.StringFormat@)">
            <summary>
            Internal use only.
            </summary>
            <param name="fmt">Format string</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintTextAndPicture(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintForegroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintElements(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="faceRect">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintBackgroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintSpecialBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintSpecialForeground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.PaintBackColor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the background of the element.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Coordinates of the element</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the background of the control with an overriding style.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Rectangle boundary of the area</param>
            <param name="overrideStyle">ElementStyle to use to override style</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Occurs when the background of the control is painted.
            </summary>
            <param name="e">PaintEventArgs object that contains event data</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.SetElementStyle(FarPoint.Win.ElementStyle)">
            <summary>
            Sets the style for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.GetElementStyle">
            <summary>
            Gets the style for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.AddStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.RemoveStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementControl.FireStateNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementControl.Dispose(System.Boolean)">
            <summary>
            Internal use only.
            </summary>
            <param name="disposing">Whether disposing</param>
        </member>
        <member name="T:FarPoint.Win.IWindowlessChildSupport">
            <summary>
            Interface supplied by objects that support windowless child controls.
            </summary>
        </member>
        <member name="P:FarPoint.Win.IWindowlessChildSupport.SkipMouseProcessing">
            <summary>Sets whether to skip mouse processing.</summary>
        </member>
        <member name="P:FarPoint.Win.IWindowlessChildSupport.ActiveWindowlessObject">
            <summary>Gets or sets the active windowless object.</summary>
        </member>
        <member name="T:FarPoint.Win.ITouchStatusProvider">
            <summary>
            Interfaces that specifies whether a object support screen touch.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ITouchStatusProvider.IsTouchStatus">
            <summary>
            Gets whether in touch supporting state
            </summary>
        </member>
        <member name="T:FarPoint.Win.ElementContainerControl">
            <summary>
            Represents a child-containing control element.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementContainerControl.PICTURE_MARGIN_DEFAULT">
            <summary>
            Represents the default picture margin for the element, namely 2 pixels.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementContainerControl.BACK_COLOR_DEFAULT">
            <summary>
            Represents the default color background for the element, namely SystemColors.Control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementContainerControl.FORE_COLOR_DEFAULT">
            <summary>
            Represents the default text color for the element, namely SystemColors.ControlText.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementContainerControl.fontOverride">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementContainerControl.PictureChanged">
            <summary>Internal use only. Picture changed.</summary>
        </member>
        <member name="E:FarPoint.Win.ElementContainerControl.ForegroundImageChanged">
            <summary>Internal use only. Foreground image changed.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.#ctor">
            <summary>
            Creates a new child-containing control element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.#ctor(System.Object)">
            <summary>
            Creates a new child-containing control element by cloning the specified object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates a new child-containing control element by cloning the specified object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializePictureTransparencyTolerance">
            <summary>
            Indicates whether the PictureTransparencyTolerance property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetPictureTransparencyTolerance">
            <summary>
            Resets the transparency tolerance for a picture in the element to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.PictureTransparencyTolerance">
            <summary>
            Gets or sets the picture transparency tolerance for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextWrap">
            <summary>
            Gets or sets whether to automatically wrap text without line breaks. 
            </summary>
            <example>
            <code lang="csharp">
            element.TextWrap = true;
            </code>
            <code lang="vb">
            element.TextWrap = True;
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextWrapPriv">
            <summary>Internal use only. Whether to wrap text to multiple lines.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.CancelMouse">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.CancelMousePriv">
            <summary>Internal use only. Cancel mouse.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Focused">
            <summary>
            Gets whether the control has focus.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            private void button1_Click(object sender, System.EventArgs e)
            {
            // Turn off the No Smoking sign
            control.Visible=false;
            }
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            'Turn off the NO Smoking sign
            control.Visible = False
            End Sub
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ContainsFocus">
            <summary>
            Gets whether the element currently has the input focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.PictureMargin">
            <summary>
            Gets or sets the margin between the text and the picture.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.PictureMarginPriv">
            <summary>Internal use only. Picture margin.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.AdjustClientArea">
            <summary>Internal use only. Adjust client area.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginBottom">
            <summary>
            Gets or sets the margin between the bottom of the control and its contents.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginBottomPriv">
            <summary>Internal use only. Bottom margin.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginTop">
            <summary>
            Gets or sets the margin between the top of the control and its contents.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginTopPriv">
            <summary>Internal use only. Top margin.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginLeft">
            <summary>
            Gets or sets the margin between the left edge of the control and its contents.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginLeftPriv">
            <summary>Internal use only. Left margin.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginRight">
            <summary>
            Gets or sets the margin between the right edge of the control and its contents.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile(Application.StartupPath + "\\smokes.bmp");
            control.PictureMargin = 34;
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.MarginLeft = 3;
            control.MarginRight = 3;
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180;
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            control.BackColor = Color.Red;
            control.Text = "NO SMOKING";
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile(Application.StartupPath &amp; "\smokes.bmp")
            control.PictureMargin = 34
            control.MarginTop = 3
            control.MarginBottom = 3
            control.MarginLeft = 3
            control.MarginRight = 3
            control.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate180
            control.MarginTop = 3
            control.MarginBottom = 3
            control.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            control.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            control.BackColor = Color.Red
            control.Text = "NO SMOKING"
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.MarginRightPriv">
            <summary>Internal use only. Right margin.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Redraw">
            <summary>
            Gets or sets whether the element is allowed to paint.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.SetRedraw(System.Boolean,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Parent">
            <summary>
            Gets or sets the parent of the control.
            </summary> 
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ParentPriv">
            <summary>Internal use only. Parent.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.SkipMouseProcessing">
            <summary>
            Sets the mouse processing flag of the control.
            </summary>  
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ActiveWindowlessObject">
            <summary>
            Gets or sets the active child object of the control.
            </summary>  
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Visible">
            <summary>
            Gets or sets whether the control is visible.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Enabled">
            <summary>
            Gets or sets whether the control can receive focus and respond to user actions.
            </summary>    
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Selectable">
            <summary>
            Gets or sets whether the control can receive focus. 
            </summary>   
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.SelectablePriv">
            <summary>Internal use only. Selectable.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.CanFocus">
            <summary>
            Gets or sets whether the control can receive focus. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.CanFocusPriv">
            <summary>Internal use only. Can focus.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetBorder">
            <summary>
            Resets the border of the control to its default settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializeBorder">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Border">
            <summary>
            Gets or sets the border for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.BorderPriv">
            <summary>Internal use only. Border.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.AlignText">
            <summary>
            Gets or sets the alignment of the text in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.AlignTextPriv">
            <summary>Internal use only. Text alignment.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextOrientation">
            <summary>
            Gets or sets the orientation of the text in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextOrientationPriv">
            <summary>Internal use only. Text orientation.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextRotationAngle">
            <summary>
            Gets or sets the rotation angle of the text in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextRotationAnglePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializeTextRotationAngle">
            <summary>
            Indicates whether the TextRotationAngle property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetTextRotationAngle">
            <summary>
            Resets the rotation angle for text in the element to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.PictureOrientation">
            <summary>
            Gets or sets the orientation of the picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.PictureOrientationPriv">
            <summary>Internal use only. Picture orientation.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializePictureTransparencyColor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetPictureTransparencyColor">
            <summary>
            Resets the transparency color for the picture in the control 
            (PictureTransparencyColor property) to its default color.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.PictureTransparencyColor">
            <summary>
            Gets or sets the transparency color for the picture in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ForegroundImage">
            <summary>
            Gets or sets the foreground image for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ForegroundImagePriv">
            <summary>Internal use only. Foreground picture.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetPicture">
            <summary>
            Resets the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Picture">
            <summary>
            Gets or sets the picture for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.PicturePriv">
            <summary>Internal use only. Picture.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.DrawFocusRectangle">
            <summary>
            Gets or sets the focus rectangle drawing style in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.DrawFocusRectanglePriv">
            <summary>Internal use only. Draw focus rectangle.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.State">
            <summary>
            Gets or sets the element state for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.StatePriv">
            <summary>Internal use only. Element state.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializeFont">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetFont">
            <summary>
            Resets the font of the control to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Font">
            <summary>
            Gets or sets the font for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.FontPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnParentChanged(System.EventArgs)">
            <summary>
            Occurs when the parent has changed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetFont">
            <summary>
            Gets the current font or the default font if no font is specified.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Text">
            <summary>
            Gets or sets the contents of the control as a string matching exactly what is displayed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.TextPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetText">
            <summary>
            Resets the contents to the default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.About">
            <summary>
            Gets or sets information about the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Name">
            <summary>
            Gets or sets the name used in code to identify the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializeBackColor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetBackColor">
            <summary>
            Resets the background color of the control to its default value. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.BackColorPriv">
            <summary>Internal use only. Background color.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ShouldSerializeForeColor">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetForeColor">
            <summary>
            Resets the ForeColor property to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ForeColor">
            <summary>
            Gets or sets the text color for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ForeColorPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of the contents of the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.AlignHorzPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.AlignVert">
            <summary>
            Gets or sets the vertical alignment of the contents of the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.AlignVertPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Rectangle">
            <summary>
            Gets or sets the rectangle in the client area of the control. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.StateNotifyList">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.Elements">
            <summary>
            Gets the collection of IElement-derived objects that the current ElementControl contains.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementContainerControl.ElementsPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Select(System.Boolean)">
            <summary>
            Activates the control.
            </summary>
            <param name="selected">True if selected; otherwise false</param>    
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetControl">
            <summary>
            Gets the Control object.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Update">
            <summary>
            Causes the control to redraw the invalidated regions within its client area.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounds of the control to the specified position and size, using integer values.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the control to the specified position and size, using a rectangle.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Focus(System.Boolean)">
            <summary>
            Moves the focus to the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs if the background picture changes.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnForegroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs if the foreground picture changes.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPictureChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the picture changes.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnLostFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnGotFocus(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnLostFocusNoRefresh(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnGotFocusNoRefresh(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnClick(System.EventArgs)">
            <summary>
            Occurs if the user clicks on the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.DoClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only. 
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnDoubleClick(System.EventArgs)">
            <summary>
            Occurs if the user double clicks the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.DoDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only. 
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs if a mouse button is clicked while the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.DoMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs if a mouse button is released while the cursor is over the control. 
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.DoMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs if the pointer is moved within the control and the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ResetElements">
            <summary>
            Resets the elements to their default settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Clone">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.Clone(System.Boolean)">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.SetState(FarPoint.Win.ElementState)">
            <summary>
            Internal use only.
            </summary>
            <param name="eState">State of the control</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.ToggleState">
            <summary>
            Toggles the state of the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetClientRectangle">
            <summary>
            Internal use only.
            </summary>
            <returns>Coordinates of the control</returns>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetClientRectangle(System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <returns>Coordinates of the control</returns>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Occurs when the element asks to repaint itself.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the control (text and picture) with an overriding style.
            </summary>
            <param name="g">Graphics object</param>
            <param name="rectInput">Coordinates of the control to paint</param>
            <param name="overrideStyle">ElementStyle to use when painting</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the control (text and picture).
            </summary>
            <param name="g">Graphics object</param>
            <param name="rectInput">Coordinates of the control to paint</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetTextAndPictureRectangles(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
            <param name="rPict">Rectangle bounding the picture</param>
            <param name="rText">Rectangle bounding the text</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetTextAndPictureRectangles(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@,System.String)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
            <param name="rPict">Rectangle bounding the picture</param>
            <param name="rText">Rectangle bounding the text</param>
            <param name="paintString">String</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.AdjustStringFormat(System.Drawing.StringFormat@)">
            <summary>
            Internal use only.
            </summary>
            <param name="fmt">String format</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintTextAndPicture(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintForegroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintElements(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="faceRect">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintBackgroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintSpecialBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintSpecialForeground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.PaintBackColor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="g">Graphics object</param>
            <param name="rectInput">Coordinates of the control to paint</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the background of the control with an overriding style.
            </summary>
            <param name="g">Graphics object</param>
            <param name="rectInput">Coordinates of the control to paint</param>
            <param name="overrideStyle">ElementStyle to use when painting</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Occurs when the control has been asked to repaint itself.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.SetElementStyle(FarPoint.Win.ElementStyle)">
            <summary>
            Sets the style for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.GetElementStyle">
            <summary>
            Gets the style for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.AddStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.RemoveStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementContainerControl.FireStateNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.NameChangingEventArgs">
            <summary>
            Represents the event data for the <see cref="!:NameChanging"/> event.
            </summary>
        </member>
        <member name="P:FarPoint.Win.NameChangingEventArgs.NewName">
            <summary>
            Gets or sets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="M:FarPoint.Win.NameChangingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:NameChangedEventArgs"/> class.
            </summary>
            <param name="newName">The new name.</param>
        </member>
        <member name="T:FarPoint.Win.NameChangingEventHandler">
            <summary>
            Handles a NameChanging event.
            </summary>
            <param name="sender">The event source</param>
            <param name="e">A <see cref="T:FarPoint.Win.NameChangingEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:FarPoint.Win.IDynamicName">
            <summary>
            Interface that supports generating the name dynamically for ElementWindowless instance.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IDynamicName.GetPrefixName">
            <summary>
            Gets the prefix name dynamically.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.ElementWindowless">
            <summary>
            Represents the windowless element for a control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWindowless.PICTURE_MARGIN_DEFAULT">
            <summary>
            Represents the default picture margin for the element, namely 2 pixels.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWindowless.BACK_COLOR_DEFAULT">
            <summary>
            Represents the default color background for the element, namely SystemColors.Control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWindowless.FORE_COLOR_DEFAULT">
            <summary>
            Represents the default text color for the element, namely SystemColors.ControlText.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ElementWindowless.DYNAMICNAME">
            <summary>
            Represents the default name for shape, the name will be correct when the shape is added to the collection. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.IsGrayscale">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.UsingTextRenderer">
            <summary>
            Internal use only. Gets text renderer info.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.BackgroundImageChanged">
            <summary>
            Occurs when the background image for the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.Click">
            <summary>
            Occurs when the user clicks the element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.DoubleClick">
            <summary>
            Occurs when the user double-clicks the element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.FontChanged">
            <summary>
            Occurs when the font for the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.ForegroundImageChanged">
            <summary>
            Occurs when the foreground image for the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.MouseDown">
            <summary>
            Occurs if the user presses a mouse button while the cursor is over the element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.MouseMove">
            <summary>
            Occurs if the user moves the cursor while the cursor is over the element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.MouseUp">
            <summary>
            Occurs if the user releases a mouse button while the cursor is over the element.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.PictureChanged">
            <summary>
            Occurs when the picture in the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.ParentChanged">
            <summary>
            Occurs when the parent of the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.Changed">
            <summary>
            Occurs when the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.PropertyChanged">
            <summary>
            Occurs when a property on the element changes.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ElementWindowless.NameChanging">
            <summary>
            Occurs before the Name property of the element changes.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.#ctor">
            <summary>
            Creates a new windowless element object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.#ctor(System.Object)">
            <summary>
            Creates a new windowless element object based on the specified object. 
            </summary>
            <param name="cloneFrom">Object from which to make a copy</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.CopyTo(System.Object)">
            <summary>
            Copies the properties of this windowless element object into the target object. 
            </summary>
            <param name="target">Target object</param>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextWrap">
            <summary>
            Gets or sets whether to wrap the text in the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextWrapPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Focused">
            <summary>
            Gets whether the element has focus.
            </summary>
            <example>
            <code lang="csharp">
            bool vbool;
            element.AlignHorz = FarPoint.Win.HorizontalAlignment.Left;
            element.AlignVert = FarPoint.Win.VerticalAlignment.Top;
            element.TextWrap = true;
            element.Text = "Let's plan on meeting at 10.";
            vbool = element.Focused;
            textBox1.Text = Convert.ToString(vbool);
            </code>
            <code lang="vb">
            Dim vbool As Boolean
            element.AlignHorz = FarPoint.Win.HorizontalAlignment.Left
            element.AlignVert = FarPoint.Win.VerticalAlignment.Top
            element.TextWrap = true
            element.Text = "Let's plan on meeting at 10."
            vbool = control.Focused
            TextBox1.Text = vbool
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.ContainsFocus">
            <summary>
            Gets whether the element currently has the input focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.CancelMouse">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.CancelMousePriv">
            <summary>Internal use only. Cancel mouse.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PictureMargin">
            <summary>
            Gets or sets the margin between the text and the picture.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PictureMarginPriv">
            <summary>Internal use only. Picture margin.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetPictureMargin">
            <summary>
            Resets the margin between text and picture to its default value. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginBottom">
            <summary>
            Gets or sets the margin between the bottom of the element and its contents.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginBottomPriv">
            <summary>Internal use only. Bottom margin.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetMarginBottom">
            <summary>
            Resets the margin between the bottom of the element and its contents to the default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginTop">
            <summary>
            Gets or sets the margin between the top of the element and its contents.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginTop = 20;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginTop = 20
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginTopPriv">
            <summary>Internal use only. Top margin.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetMarginTop">
            <summary>
            Resets the margin between the top of the element and its contents to the default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginLeft">
            <summary>
            Gets or sets the margin between the left edge of the element and its contents.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginLeft = 20;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginLeft = 20
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginLeftPriv">
            <summary>Internal use only. Left margin.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetMarginLeft">
            <summary>
            Resets the margin between the left side of the element and its contents to the default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginRight">
            <summary>
            Gets or sets the margin between the right edge of the element and its contents.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginRight = 20;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginRight = 20
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.MarginRightPriv">
            <summary>Internal use only. Right margin.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetMarginRight">
            <summary>
            Resets the margin between the right side of the element and its contents to the default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Redraw">
            <summary>
            Gets or sets whether the element is allowed to paint.
            </summary>
            <example>
            <code lang="csharp">
            private void button1_Click(object sender, System.EventArgs e)
            {
            element.Redraw = true;
            }
            </code>
            <code lang="vb">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            element.Redraw = True
            End Sub
            </code>
            </example>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetRedraw(System.Boolean,System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Selectable">
            <summary>
            Gets or sets whether the control can receive focus. 
            </summary>
            <example>
            <code lang="csharp">
            private void button1_Click(object sender, System.EventArgs e)
            {
            element.Visible = true;
            element.Enabled = false;
            element.Selectable = false;
            }
            </code>
            <code lang="vb">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            element.Visible = True
            element.Enabled = False
            element.Selectable = False
            End Sub
            </code>
            </example>        
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.DrawFocusRectangle">
            <summary>
            Gets or sets the focus rectangle drawing style in the element.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.DrawFocusRectanglePriv">
            <summary>Internal use only. Draw focus rectangle.</summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Parent">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.ParentPriv">
            <summary>Internal use only. Parent.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read (load) the object.</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.BringToFront(System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SendToBack(System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Visible">
            <summary>
            Gets or sets whether the element is visible. 
            </summary>
            <example>
            <code lang="csharp">
            private void button1_Click(object sender, System.EventArgs e)
            {
            element.Visible = true;
            element.Enabled = false;
            element.Selectable = false;
            }
            </code>
            <code lang="vb">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            element.Visible = True
            element.Enabled = False
            element.Selectable = False
            End Sub
            </code>
            </example>       
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetVisible">
            <summary>
            Resets to the default value whether an element is visible.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Enabled">
            <summary>
            Gets or sets whether the element is enabled.  
            </summary>
            <example>
            <code lang="csharp">
            private void button1_Click(object sender, System.EventArgs e)
            {
            element.Visible = true;
            element.Enabled = false;
            element.Selectable = false;
            }
            </code>
            <code lang="vb">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            element.Visible = True
            element.Enabled = False
            element.Selectable = False
            End Sub
            </code>
            </example>       
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetEnabled">
            <summary>
            Resets to the default value whether the element is enabled.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.CanFocus">
            <summary>
            Gets or sets whether the element can receive focus.
            </summary>
            /// <example>
            <code lang="csharp">
            private void button1_Click(object sender, System.EventArgs e)
            {
            element.Visible = true;
            element.Enabled = false;
            element.Selectable = false;
            element.CanFocus = false;
            }
            </code>
            <code lang="vb">
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            element.Visible = True
            element.Enabled = False
            element.Selectable = False
            element.CanFocus = False
            End Sub
            </code>
            </example> 
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetCanFocus">
            <summary>
            Resets to the default value whether the element can have the focus.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetBorder">
            <summary>
            Resets the border of the element to its default settings.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Border">
            <summary>
            Gets or sets the border for the element.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText;
            element.Border = new FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,true,true,false,false);
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText
            element.Border = New FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,True,True,False,False)
            </code>
            </example>   
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.AlignText">
            <summary>
            Gets or sets the text alignment for the element.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText;
            element.Border = new FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,true,true,false,false);
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText
            element.Border = New FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,True,True,False,False)
            </code>
            </example>   
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetAlignText">
            <summary>
            Resets the text alignment of the element to the default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextOrientation">
            <summary>
            Gets or sets the text orientation for the element.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText;
            element.Border = new FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,true,true,false,false);
            element.TextOrientation = FarPoint.Win.TextOrientation.TextTopDown;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText
            element.Border = New FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,True,True,False,False)
            element.TextOrientation = FarPoint.Win.TextOrientation.TextTopDown
            </code>
            </example>   
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextOrientationPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetTextOrientation">
            <summary>
            Resets the orientation of text in an element to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextRotationAngle">
            <summary>
            Gets or sets the rotation angle of the text in the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextRotationAnglePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializeTextRotationAngle">
            <summary>
            Indicates whether the TextRotationAngle property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetTextRotationAngle">
            <summary>
            Resets the rotation angle for text in the element to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PictureOrientation">
            <summary>
            Gets or sets the picture orientation for the element.
            </summary>
            <example>
            <code lang="csharp">
            element.Picture = System.Drawing.Image.FromFile("d:\\mail16A.ico");
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight;
            element.PictureMargin = 25;
            element.MarginBottom = 20;
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText;
            element.Border = new FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,true,true,false,false);
            element.TextOrientation = FarPoint.Win.TextOrientation.TextTopDown;
            element.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate90;
            </code>
            <code lang="vb">
            element.Picture = System.Drawing.Image.FromFile("d:\mail16A.ico")
            element.AlignText = FarPoint.Win.TextAlign.TextLeftPictRight
            element.PictureMargin = 25
            element.MarginBottom = 20
            element.DrawFocusRectangle = FarPoint.Win.DrawFocusRectangle.AroundText
            element.Border = New FarPoint.Win.BevelBorder(FarPoint.Win.BevelBorderType.Lowered,SystemColors.ControlLightLight,SystemColors.ControlDark,3,True,True,False,False)
            element.TextOrientation = FarPoint.Win.TextOrientation.TextTopDown
            element.PictureOrientation = FarPoint.Win.PictureOrientation.PictureRotate90
            </code>
            </example>   
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PictureOrientationPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetPictureOrientation">
            <summary>
            Resets the orientation of the picture in the element to its default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializePictureTransparencyTolerance">
            <summary>
            Indicates whether the PictureTransparencyTolerance property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetPictureTransparencyTolerance">
            <summary>
            Resets the transparency tolerance for a picture in the element to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PictureTransparencyTolerance">
            <summary>
            Gets or sets the picture transparency tolerance for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializePictureTransparencyColor">
            <summary>
            Indicates whether the PictureTransparencyColor property should be persisted.
            </summary>
            <returns>The transparency color</returns>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile("d:\overlay.bmp");
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.PictureTransparencyColor = Color.Blue;
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile("d:\overlay.bmp")
            control.MarginTop = 3
            control.MarginBottom = 3
            control.PictureTransparencyColor = Color.Blue
            </code>
            </example>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetPictureTransparencyColor">
            <summary>
            Resets the transparency of a picture in the element to its default value.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile("d:\overlay.bmp");
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.PictureTransparencyColor = Color.Blue;
            private void button1_Click(object sender, System.EventArgs e)
            {
            control.ResetPictureTransparencyColor()
            }
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile("d:\overlay.bmp")
            control.MarginTop = 3
            control.MarginBottom = 3
            control.PictureTransparencyColor = Color.Blue
            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
            control.ResetPictureTransparencyColor()
            End Sub
            </code>
            </example> 
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PictureTransparencyColor">
            <summary>
            Gets or sets the picture transparency color for the element.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile("d:\overlay.bmp");
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.PictureTransparencyColor = Color.Blue;
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile("d:\overlay.bmp")
            control.MarginTop = 3
            control.MarginBottom = 3
            control.PictureTransparencyColor = Color.Blue
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Picture">
            <summary>
            Gets or sets the picture for the element.
            </summary>
            <example>
            <code lang="csharp">
            control.Picture = Image.FromFile("d:\overlay.bmp");
            control.MarginTop = 3;
            control.MarginBottom = 3;
            control.PictureTransparencyColor = Color.Blue;
            </code>
            <code lang="vb">
            control.Picture = Image.FromFile("d:\overlay.bmp")
            control.MarginTop = 3
            control.MarginBottom = 3
            control.PictureTransparencyColor = Color.Blue
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.PicturePriv">
            <summary>Internal use only. Picture.</summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetPicture">
            <summary>
            Resets the image for the element to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.ForegroundImage">
            <summary>
            Gets or sets the foreground image for the element.
            </summary>
            <example>
            <code lang="csharp">
            control.ForegroundImage = new FarPoint.Win.Picture(Image.FromFile("d:\overlay.bmp"));
            control.MarginTop = 3;
            control.MarginBottom = 3;
            </code>
            <code lang="vb">
            control.ForegroundImage = New FarPoint.Win.Picture(Image.FromFile("d:\overlay.bmp"))
            control.MarginTop = 3
            control.MarginBottom = 3
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.ForegroundImagePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetForegroundImage">
            <summary>
            Resets the foreground image for the element to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
            <example>
            <code lang="csharp">
            control.BackgroundImage = new FarPoint.Win.Picture(Image.FromFile("d:\overlay.bmp"));
            control.MarginTop = 3;
            control.MarginBottom = 3;
            </code>
            <code lang="vb">
            control.BackgroundImage = New FarPoint.Win.Picture(Image.FromFile("d:\overlay.bmp"))
            control.MarginTop = 3
            control.MarginBottom = 3
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.BackgroundImagePriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetBackgroundImage">
            <summary>
            Resets the background image of the element to the default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.State">
            <summary>
            Gets or sets the state of the element.
            </summary>
            <example>
            <code lang="csharp">
            Font f = new System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold);
            element.Font = f;
            element.State = FarPoint.Win.ElementState.Inverted;
            </code>
            <code lang="vb">
            Dim f As New System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold)
            element.Font = f
            element.State = FarPoint.Win.ElementState.Inverted
            </code>
            </example>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializeFont">
            <summary>
            Indicates whether the Font property should be persisted. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetFont">
            <summary>
            Resets the font for the element to it default value.
            </summary>
            <example>
            <code lang="csharp">
            Font f = new System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold);
            element.Font = f;
            element.State = FarPoint.Win.ElementState.Inverted;
            element.ResetFont();
            </code>
            <code lang="vb">
            Dim f As New System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold)
            element.Font = f
            element.State = FarPoint.Win.ElementState.Inverted
            element.ResetFont();
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Font">
            <summary>
            Gets or sets the font for the element.
            </summary>
            <example>
            <code lang="csharp">
            Font f = new System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold);
            element.Font = f;
            element.State = FarPoint.Win.ElementState.Inverted;
            </code>
            <code lang="vb">
            Dim f As New System.Drawing.Font("MS Sans Serif", 12, FontStyle.Bold)
            element.Font = f
            element.State = FarPoint.Win.ElementState.Inverted
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.FontPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetFont">
            <summary>
            Gets the default font used by the element, if the Font property is null.
            </summary>
            <example>
            <code lang="csharp">
            Font f = element.GetFont();
            }
            </code>
            <code lang="vb">
            Font f = element.GetFont()
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Text">
            <summary>
            Gets or sets the text for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.TextPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetText">
            <summary>
            Resets the text in an element to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializeTag">
            <summary>
            Indicates whether the Tag property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetTag">
            <summary>
            Resets the Tag object for the element to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Tag">
            <summary>
            Gets or sets the Tag object for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializeBackColor">
            <summary>
            Indicates whether the BackColor property should be persisted.
            </summary>
            <returns>New backcolor</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetBackColor">
            <summary>
            Resets the background color to its default setting.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.BackColor">
            <summary>
            Gets or sets the background color for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.BackColorPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ShouldSerializeForeColor">
            <summary>
            Indicates whether the ForeColor property should be persisted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetForeColor">
            <summary>
            Resets the text color for the element to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.ForeColor">
            <summary>
            Gets or sets the foreground color for the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.ForeColorPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of the contents of the element. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetAlignHorz">
            <summary>
            Resets the horizontal alignment of the element to the default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.AlignVert">
            <summary>
            Gets or sets the vertical alignment of the contents of the element. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetAlignVert">
            <summary>
            Resets the vertical alignment of the element to the default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Rectangle">
            <summary>
            Gets the rectangular coordinates of the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.RectangleF">
            <summary>
            Gets the rectangular coordinates of the element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.StateNotifyList">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementWindowless.Elements">
            <summary>
            Gets the collection of IElement-derived objects that the current ElementWindowless object contains.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnGotFocus(System.EventArgs)">
            <summary>
             Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnLostFocus(System.EventArgs)">
            <summary>
             Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Select(System.Boolean)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetControl">
            <summary>
            Gets the Control object if the element is derived from the ElementWindowless class.  
            </summary>
            <returns>Null if ElementControl derived</returns>   
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnFontChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.FontChanged"/> event when the 
            font in the control has changed.
            </summary>
            <param name="e">EventArgs object that contains event data</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Update">
            <summary>
            Causes the control to redraw the invalidated regions with its client area.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.AdjustClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounds of the element to the location and size of the bounding rectangle 
            of the specified dimensions (in integer values). 
            </summary>
            <param name="x">X-coordinate of the top left corner of the bounding rectangle (integer)</param>
            <param name="y">Y-coordinate of the top left corner of the bounding rectangle (integer)</param>
            <param name="width">Number of pixels in the width of the bounding rectangle (integer)</param>
            <param name="height">Number of pixels in the height of the bounding rectangle (integer)</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetBoundsFloat(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the bounds of the element to the location and size of the bounding rectangle 
            of the specified dimensions (in floating-point values). 
            </summary>
            <param name="x">X-coordinate of the top left corner of the bounding rectangle (floating-point)</param>
            <param name="y">Y-coordinate of the top left corner of the bounding rectangle (floating-point)</param>
            <param name="width">Number of pixels in the width of the bounding rectangle (floating-point)</param>
            <param name="height">Number of pixels in the height of the bounding rectangle (floating-point)</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the element to the location and size of the specified bounding rectangle object
            (with integer values). 
            </summary>
            <param name="rectInput">Rectangle object that contains the bounding rectangle in integer dimensions</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetBounds(System.Drawing.RectangleF)">
            <summary>
            Sets the bounds of the element to the location and size of the specified bounding rectangle object
            (with floating-point values). 
            </summary>
            <param name="rectInput">Rectangle object that contains the bounding rectangle in floating-point dimensions</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Focus(System.Boolean)">
            <summary>
            Moves the focus to the element.
            </summary>
            <param name="giveFocus">Whether the element is to receive focus</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.AttachMouseListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DetachListeners">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.BackgroundImageChanged"/> event when the 
            background picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnForegroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.ForegroundImageChanged"/> event when the 
            foreground picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPictureChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.PictureChanged"/> event when the 
            picture has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.ParentChanged"/> event when the 
            the parent of the element has changed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.Changed"/> event when the 
            element has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.PropertyChanged"/> event when the 
            property on an element has changed.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnNameChanging(System.Object,FarPoint.Win.NameChangingEventArgs)">
            <summary>
            Raises the NameChanging event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown processing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.MouseDown"/> event when the 
            pointer button is pressed while the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DoMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown processing.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.MouseUp"/> event when the 
            pointer button is released while the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DoMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.MouseMove"/> event when the 
            pointer is moved within the control and the cursor is over the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DoMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.Click"/> event when the 
            use clicks on the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DoClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.ElementWindowless.DoubleClick"/> event when the 
            use double-clicks on the control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DoDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Refresh">
            <summary>
            Forces the element to invalidate its client area and immediately repaint.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetElements">
            <summary>
             Resets the elements to their default settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ResetParent">
            <summary>   
            Internal use only.   
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Reset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.Clone">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetState(FarPoint.Win.ElementState)">
            <summary>
            Sets the state of the element.
            </summary>
            <param name="eState">Enumerated state in which to place the element</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.ToggleState">
            <summary>
            Toggles the state of the element.
            </summary> 
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetClientRectangle">
            <summary>
            Gets the coordinates of the element.
            </summary>
            <returns>Coordinates of the element</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetClientRectangle(System.Drawing.Rectangle)">
            <summary>
            Gets the coordinates of the element.
            </summary>
            <param name="rectInput">Rectangle object that contains the rectangle</param>
            <returns>Coordinates of the element</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetClientRectangleF">
            <summary>
            Gets the coordinates of the element.
            </summary>
            <returns>Coordinates of the element</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetClientRectangleF(System.Drawing.RectangleF)">
            <summary>
            Gets the coordinates of the element.
            </summary>
            <param name="rectInput">Rectangle object that contains the rectangle</param>
            <returns>Coordinates of the element</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the element (text and picture).
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Coordinates of the element</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the element (both text and picture) using an overriding style.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Coordinates of the element</param>
            <param name="overrideStyle">Style to use when overriding</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetTextAndPictureRectangles(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
            <summary>
            Gets the rectangles for the text and pictures of the element.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle object that contains the element coordinates</param>
            <param name="rPict">Returned rectangle of the picture</param>
            <param name="rText">Returned rectangle of the text</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.AdjustStringFormat(System.Drawing.StringFormat@)">
            <summary>
            Internal use only.
            </summary>
            <param name="fmt">String format</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintText(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the text of the element in the specified rectangle.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rText">Rectangle bounding the text</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintPicture(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the picture in the element.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rPict">Rectangle boundary of the picture</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintTextAndPicture(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the text and picture in the element.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding both the text and picture</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintForegroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints foreground image.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints focus rectangle.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintElements(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints elements.
            </summary>
            <param name="g">Graphics device</param>
            <param name="faceRect">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints borders.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintBackgroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints background image.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintSpecialBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints special background.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintSpecialForeground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints special foreground.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.PaintBackColor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints background color.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle bounding the area</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the background of the element.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Coordinates of the element</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.OnPaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,FarPoint.Win.ElementStyle)">
            <summary>
            Paints the background of the element using an overriding style.
            </summary>
            <param name="g">Graphics device</param>
            <param name="rectInput">Coordinates of the element</param>
            <param name="overrideStyle">Style to use when overriding</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetElementStyle(FarPoint.Win.ElementStyle)">
            <summary>
            Sets the style for the element.
            </summary>
            <param name="style">ElementStyle object containing the style of the element</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.SetElementStyle(FarPoint.Win.ElementStyle,System.Boolean)">
            <summary>
            Sets the style for the element and clears unset properties.
            </summary>
            <param name="style">ElementStyle object that contains the element style</param>
            <param name="clearUnsetProps">Whether to reset properties that are not set 
               in the element to their default settings</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetElementStyle">
            <summary>
            Gets the style for the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.AddStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.RemoveStateNotify(FarPoint.Win.IStateNotify)">
            <summary>
            Internal use only.
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.FireStateNotify">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetRotatedTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Rectangle,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming)">
            <summary>
            Gets the size of the specified text when drawn with the specified font, orientation, wrapping, hotkey prefix, and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String</param>
            <param name="font">Font</param>
            <param name="r">Rectangle</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise.</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <returns>Size</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetRotatedTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.RectangleF,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming)">
            <summary>
            Gets the size of the specified text when drawn with the specified font, orientation, wrapping, hotkey prefix, and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String</param>
            <param name="font">Font</param>
            <param name="r">RectangleF</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <returns>SizeF</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetRotatedTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.RectangleF,FarPoint.Win.TextOrientation,System.Boolean,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming)">
            <summary>
            Gets the size of the specified text when drawn with the specified font, orientation, wrapping, hotkey prefix, and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String</param>
            <param name="font">Font</param>
            <param name="r">RectangleF</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="multiline">True to draw multiline text, false otherwise</param> // 20080 -scl
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <returns>SizeF</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.GetRotatedTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.RectangleF,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Double)">
            <summary>
            Gets the size of the specified text when drawn with the specified font, orientation, wrapping, hotkey prefix, and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String</param>
            <param name="font">Font</param>
            <param name="r">RectangleF</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="angle">The text rotation angle.</param>
            <returns>SizeF</returns>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Rectangle,FarPoint.Win.HorizontalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignments, orientation, hotkey prefix, and wrapping.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to </param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix, and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix, and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix, and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
            <param name="adjust">Whether to adjust the rectangle for alignment</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean,System.Single)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix, and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
            <param name="adjust">Whether to adjust the rectangle for alignment</param>
            <param name="rotationAngle">Angle to rotate text</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean,System.Single)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix, string trimming, and rotation angle.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="multiline">True for multiline text</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
            <param name="adjust">Whether to adjust the rectangle for alignment</param>
            <param name="rotationAngle">Angle to rotate text</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix, string trimming, and rotation angle.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
            <param name="adjust">Whether to adjust the rectangle for alignment</param>
            <param name="rotationAngle">Angle to rotate text</param>
            <param name="rightToLeft">True for right to left rendering</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix, string trimming, and rotation angle.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="multiline">True to draw text multiline, false otherwise</param> // 20080 -scl
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
            <param name="adjust">Whether to adjust the rectangle for alignment</param>
            <param name="rotationAngle">Angle to rotate text</param>
            <param name="rightToLeft">True for right to left rendering</param>
        </member>
        <member name="M:FarPoint.Win.ElementWindowless.DrawRotatedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean,System.Double,System.Int32,System.Boolean)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix, string trimming, and rotation angle.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectText">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="multiline">True to draw text multiline, false otherwise</param> // 20080 -scl
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
            <param name="adjust">Whether to adjust the rectangle for alignment</param>
            <param name="rotationAngle">Angle to rotate text</param>
            <param name="txtIndent">Amount of pixels to indent text</param>
            <param name="rightToLeft">True for right to left rendering</param>
        </member>
        <member name="T:FarPoint.Win.Elements">
            <summary>
            Represents a collection of elements.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Elements.items">
            <summary>Array list of items</summary>
        </member>
        <member name="F:FarPoint.Win.Elements.elementNotifyList">
            <summary>Array list of element notify</summary>
        </member>
        <member name="F:FarPoint.Win.Elements.elementDeletedNotifyList">
            <summary>Array list of deleted element notify</summary>
        </member>
        <member name="M:FarPoint.Win.Elements.#ctor">
            <summary>
            Creates a collection of elements.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Elements.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Elements.Item(System.Int32)">
            <summary>
            Gets the element at the specified index within the collection.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.Find(System.String)">
            <summary>
            Finds an element in the collection that matches the specified name.
            </summary>
            <param name="elementName">Name of the element</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Contains(System.Object)">
            <summary>
            Gets whether an element is in the collection.
            </summary>
            <param name="element">Element object</param>
        </member>
        <member name="M:FarPoint.Win.Elements.IndexOf(System.Object)">
            <summary>
            Get the index of an element in the collection.
            </summary>
            <param name="element">Element object</param>
        </member>
        <member name="M:FarPoint.Win.Elements.FindByType(System.Type,System.String)">
            <summary>
            Finds an element in the collection that matches the specified type and name.
            </summary>
            <param name="t">Type of element</param>
            <param name="elementName">Name of element</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Add(System.Object)">
            <summary>
            Adds an element to the collection and returns its index.
            </summary>
            <param name="e">Element object</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Add(System.Object,System.Boolean)">
            <summary>
            Adds an element to the collection and returns its index.
            </summary>
            <param name="e">Element object</param>
            <param name="noClone">Whether to add as is, no cloning</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element to the collection at the specified index.
            </summary>
            <param name="index">Index</param>
            <param name="e">Element object</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Insert(System.Int32,System.Object,System.Boolean)">
            <summary>
            Inserts an element to the collection at the specified index.
            </summary>
            <param name="index">Index</param>
            <param name="e">Element object</param>
            <param name="noClone">Whether to add as is, no cloning</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Clear">
            <summary>
            Removes all the elements from the collection.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.Remove(System.Object)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="e">Element object</param>
        </member>
        <member name="M:FarPoint.Win.Elements.MoveItemInternal(System.Int32,System.Int32)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.RemoveAt(System.Int32)">
            <summary>
            Removes the specified element (by index) from the collection.
            </summary>
            <param name="index">Index of the element</param>
        </member>
        <member name="M:FarPoint.Win.Elements.RemoveByName(System.String)">
            <summary>
            Removes the specified element (by name) from the collection.
            </summary>
            <param name="elementName">Name of the element</param>
        </member>
        <member name="M:FarPoint.Win.Elements.Replace(System.Object,System.Object)">
            <summary>
            Replaces an existing element with a new one. 
            </summary>
            <param name="newObj">New element to be used</param>
            <param name="oldObj">Element to be replaced</param>
            <returns>New element if successful; otherwise, -1</returns>
        </member>
        <member name="M:FarPoint.Win.Elements.ReplaceAt(System.Int32,System.Object)">
            <summary>
            Replaces an existing element index with a new one. 
            </summary>
            <param name="index">Index of the element to be replaced</param>
            <param name="newObj">New element to be used</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.Elements.ElementAddNotifyEventArgs">
            <summary>
            Represents the event data for the ElementAdd event, 
            which occurs when the user has added an element.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Elements.ElementAddNotifyEventArgs.Element">
            <summary>
            Gets the element.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.ElementAddNotifyEventArgs.#ctor(System.Object)">
            <summary>
            Create a new instance of the <see cref="T:FarPoint.Win.Elements.ElementAddNotifyEventArgs"/>
            </summary>
            <param name="element">Object element</param>
        </member>
        <member name="T:FarPoint.Win.Elements.ElementAddNotifyEventHandler">
            <summary>
            Represents a defined method that handles the element add event.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event argument</param>
        </member>
        <member name="E:FarPoint.Win.Elements.ElementAddNotify">
            <summary>
            Occurs when an element is added.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Elements.ElementDeletingNotifyEventArgs">
            <summary>
            Represents the event data for the ElementDeleting event, 
            which occurs when the user has deleted an element.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Elements.ElementDeletingNotifyEventHandler">
            <summary>
            Represents a defined method that handles the element deleting event.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event argument</param>
        </member>
        <member name="E:FarPoint.Win.Elements.ElementDeletingNotify">
            <summary>
            Occurs when an element is deleted.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.GetEnumerator(System.Int32,System.Int32)">
            <summary>
            Returns the index and number of the array list of elements.
            </summary>
            <param name="index">Location of the element</param>
            <param name="count">Number of elements in the collection</param>
            <returns>Index and number of the elements' array list</returns>
        </member>
        <member name="M:FarPoint.Win.Elements.GetEnumerator">
            <summary>
            Returns the array list of elements.
            </summary>
            <returns>Elements' array list</returns>
        </member>
        <member name="M:FarPoint.Win.Elements.AddNotify(FarPoint.Win.IElementNotify)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.RemoveNotify(FarPoint.Win.IElementNotify)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.FireElementAddNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.FireElementDeletingNotify(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:FarPoint.Win.Elements.FireElementNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.AddDeletedNotify(FarPoint.Win.IElementDeletedNotify)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.RemoveDeletedNotify(FarPoint.Win.IElementDeletedNotify)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.FireElementDeletedNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Elements.ElementEnumerator">
            <summary>
            Implements IEnumerator for all of the various types of enumerators 
            (All, Days, RecurringDates, and SpecificDates).
            </summary>
        </member>
        <member name="F:FarPoint.Win.Elements.ElementEnumerator.elements">
            <summary>array being enumerated (clone)</summary>
        </member>
        <member name="F:FarPoint.Win.Elements.ElementEnumerator.index">
            <summary>current index</summary>
        </member>
        <member name="F:FarPoint.Win.Elements.ElementEnumerator.returnIndex">
            <summary>flag indicating whether to return index</summary>
        </member>
        <member name="F:FarPoint.Win.Elements.ElementEnumerator.min">
            <summary>minimum index to enumerate (external)</summary>
        </member>
        <member name="F:FarPoint.Win.Elements.ElementEnumerator.max">
            <summary>maximum index to enumerate (external)</summary>
        </member>
        <member name="M:FarPoint.Win.Elements.ElementEnumerator.#ctor(FarPoint.Win.Elements)">
            <summary>
            Creates an enumerator for the elements in the specified array.
            </summary>
            <param name="elementArray">Elements array</param>
        </member>
        <member name="M:FarPoint.Win.Elements.ElementEnumerator.#ctor(FarPoint.Win.Elements,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates an enumerator for the elements in the specified array with the specified start and end.
            </summary>
            <param name="elementArray">Elements array</param>
            <param name="returnIndex">Whether to return the index</param>
            <param name="startIndex">Starting index</param>
            <param name="endIndex">Ending index</param>
        </member>
        <member name="P:FarPoint.Win.Elements.ElementEnumerator.Current">
            <summary>
            Gets the current element in the enumerator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.ElementEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the Elements array.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.ElementEnumerator.Reset">
            <summary>
            Resets the enumerator to its initial position, which is
            before the first element in the Elements array.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.CopyTo(System.Array,System.Int32)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Elements.IsSynchronized">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Elements.SyncRoot">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Elements.AddRange(System.Object[])">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IElementStyle">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.StyleName">
            <summary>Gets or sets the style name.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.Border">
            <summary>Gets or sets the border.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.Picture">
            <summary>Gets or sets the picture.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.PictureTransparencyColor">
            <summary>Gets or sets the picture transparency color.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.PictureMargin">
            <summary>Gets or sets the print margin.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.MarginRight">
            <summary>Gets or sets the right margin.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.MarginLeft">
            <summary>Gets or sets the left margin.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.MarginTop">
            <summary>Gets or sets the top margin.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.MarginBottom">
            <summary>Gets or sets the bottom margin.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.ForegroundImage">
            <summary>Gets or sets the foreground picture.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.BackgroundImage">
            <summary>Gets or sets the background picture.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.Font">
            <summary>Gets or sets the font.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.BackColor">
            <summary>Gets or sets the background color.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.ForeColor">
            <summary>Gets or sets the text color.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.AlignHorz">
            <summary>Gets or sets the horizontal alignment.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.AlignVert">
            <summary>Gets or sets the vertical alignment.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.AlignText">
            <summary>Gets or sets the text alignment.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.TextOrientation">
            <summary>Gets or sets the text orientation.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.PictureOrientation">
            <summary>Gets or sets the picture orientation.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.DrawFocusRectangle">
            <summary>Gets or sets the focus rectangle.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.Text">
            <summary>Gets or sets the text.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.TextWrap">
            <summary>Gets or sets whether to wrap text.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.Visible">
            <summary>Gets or sets whether to display.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.Enabled">
            <summary>Gets or sets whether to enable.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.CanFocus">
            <summary>Gets or sets whether user can set focus.</summary>
        </member>
        <member name="P:FarPoint.Win.IElementStyle.Selectable">
            <summary>Gets or sets whether selectable.</summary>
        </member>
        <member name="T:FarPoint.Win.ElementStyle">
            <summary>
            Represents the element style object. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.#ctor">
            <summary>
            Creates an element style (ElementStyle object).
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.Reset">
            <summary>
            Resets the element style.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsPictureMarginSet">
            <summary>
            Gets whether the PictureMargin property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.PictureMargin">
            <summary>
            Gets or sets the margin between the text and the picture for the style.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsMarginBottomSet">
            <summary>
            Gets whether the MarginBottom property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.MarginBottom">
            <summary>
            Gets or sets the margin between the bottom of the object and its contents. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsMarginTopSet">
            <summary>
            Gets whether the MarginTop property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.MarginTop">
            <summary>
            Gets or sets the margin between the top of the object and its contents. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsMarginLeftSet">
            <summary>
            Gets whether the MarginLeft property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.MarginLeft">
            <summary>
            Gets or sets the margin between the left edge of the object and its contents. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsMarginRightSet">
            <summary>
            Gets whether the MarginRight property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.MarginRight">
            <summary>
            Gets or sets the margin between the right edge of the object and its contents. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsSelectableSet">
            <summary>
            Gets whether the Selectable property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Selectable">
            <summary>
            Gets or sets whether the user can interact with the element. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsDrawFocusRectangleSet">
            <summary>
            Gets whether the DrawFocusRectangle property is set.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.DrawFocusRectangle">
            <summary>
            Gets or sets the focus rectangle drawing style for the object. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsVisibleSet">
            <summary>
            Gets whether the Visible property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Visible">
            <summary>
            Gets or sets, for the style, whether the element is visible. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsEnabledSet">
            <summary>
            Gets whether the Enabled property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Enabled">
            <summary>
            Gets or sets whether the object can receive focus and respond to user actions. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsTextWrapSet">
            <summary>
            Gets whether the TextWrap property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.TextWrap">
            <summary>
            Gets or sets whether to automatically wrap text without line breaks. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsCanFocusSet">
            <summary>
            Gets whether the CanFocus property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.CanFocus">
            <summary>
            Gets or sets whether the object can receive focus. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsBorderSet">
            <summary>
            Gets whether the Border property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Border">
            <summary>
            Gets or sets the border for the style. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsAlignTextSet">
            <summary>
            Gets whether the AlignText property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.AlignText">
            <summary>
            Gets or sets the alignment of the text with respect to the alignment of the picture for the style. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsTextOrientationSet">
            <summary>
            Gets whether the TextOrientation property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.TextOrientation">
            <summary>
            Gets or sets the orientation of the text. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsPictureOrientationSet">
            <summary>
            Gets whether the PictureOrientation property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.PictureOrientation">
            <summary>
            Gets or sets the orientation of the picture for the style.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsPictureTransparencyColorSet">
            <summary>
            Gets whether the PictureTransparencyColor property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.PictureTransparencyColor">
            <summary>
            Gets or sets the transparency color for the picture for the style.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsPictureSet">
            <summary>
            Gets whether the Picture property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Picture">
            <summary>
            Gets or sets the picture for the style. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsForegroundImageSet">
            <summary>
            Gets whether the ForegroundImage property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.ForegroundImage">
            <summary>
            Gets or sets the foreground image for the style. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsBackgroundImageSet">
            <summary>
            Gets whether the BackgroundImage property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.BackgroundImage">
            <summary>
            Gets or sets the background image for the style. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsFontSet">
            <summary>
            Gets whether the Font property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Font">
            <summary>
            Gets or sets the font for the style. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsTextSet">
            <summary>
            Gets whether the Text property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.Text">
            <summary>
            Gets or sets the contents of the control as a string matching exactly what is displayed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsStyleNameSet">
            <summary>
            Gets whether the StyleName property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.StyleName">
            <summary>
            Gets or sets the name for the created style. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsBackColorSet">
            <summary>
            Gets whether the BackColor property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.BackColor">
            <summary>
            Gets or sets the background color for the style. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsForeColorSet">
            <summary>
            Gets whether the ForeColor property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.ForeColor">
            <summary>
            Gets or sets the text color for the style. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsAlignHorzSet">
            <summary>
            Gets whether the AlignHorz property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment for the style. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ElementStyle.IsAlignVertSet">
            <summary>
            Gets whether the AlignVert property is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.ElementStyle.AlignVert">
            <summary>
            Gets or sets the vertical alignment for the style. 
            </summary>
        </member>
        <member name="T:FarPoint.Win.InvalidHyperLinkEventArgs">
            <summary>
            Internal use only, represents the invalid event argument class, indicate whether hyperlink processing need to be canceled
            </summary>
        </member>
        <member name="M:FarPoint.Win.InvalidHyperLinkEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FarPoint.Win.InvalidHyperLinkEventArgs"/> class.
            </summary>
        </member>
        <member name="P:FarPoint.Win.InvalidHyperLinkEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel default processing.
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpHyperlink">
            <summary>
            Represents the FarPoint hyperlink control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpHyperlink.AfterFocus">
            <summary>
            Occurs after this control is focused.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.#ctor">
            <summary>
            Creates a new FarPoint hyperlink control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.Picture">
            <summary>
            Gets or sets the picture to display in the background of the hyperlink control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.StringTrim">
            <summary>
            Gets or sets how to trim characters that do not fit in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.VisitedLinkColor">
            <summary>
            Gets or sets the color to paint the link when it has been visited.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.LinkColor">
            <summary>
            Gets or sets the color of the link in the hyperlink control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.ActiveLink">
            <summary>
            Returns the active link.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.Links">
            <summary>
            Gets or sets the URL string.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.LinkAreas">
            <summary>
            Gets or sets the area of the text to use as the link.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.LinksVisited">
            <summary>
            Gets or sets whether link has been visited.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.Link">
            <summary>
            Gets or sets the URL string.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.LinkArea">
            <summary>
            Gets or sets the area of the text to use as the link.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.Visited">
            <summary>
            Gets or sets whether link has been visited.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of text in the hyperlink control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpHyperlink.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of text in the hyperlink control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the hyperlink control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnPaint(System.Windows.Forms.PaintEventArgs,System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the GotFocus event.
            </summary>
            <param name="e">An EventArgs that contains event data.</param>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>  
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.IsPointInPicture(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle,FarPoint.Win.Picture)">
            <summary>
            Determines if the point is in the picture of the hyperlink control.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="x">X-coordinate of point</param>
            <param name="y">Y-coordinate of point</param>
            <param name="faceRect">Image rectangle</param>
            <param name="pic">Picture (image)</param>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.IsPointInLink(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle,System.String,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Windows.Forms.LinkArea[],FarPoint.Win.Picture)">
            <summary>
            Determines if the point is in the text of the link in the hyperlink control.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="x">X-coordinate of point</param>
            <param name="y">Y-coordinate of point</param>
            <param name="r">Image rectangle</param>
            <param name="text">Text of the hyperlink</param>
            <param name="f">Font of the text</param>
            <param name="horizontalAlignment">Horizontal alignment</param>
            <param name="verticalAlignment">Vertical alignment</param>
            <param name="areas">Areas of the hyperlink</param>
            <param name="pict">Picture (image)</param>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.IsPointInLink(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle,System.String,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Windows.Forms.LinkArea[],FarPoint.Win.Picture,System.Boolean)">
            <summary>
            Determines if the point is in the text of the link in the hyperlink control.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="x">X-coordinate of point</param>
            <param name="y">Y-coordinate of point</param>
            <param name="r">Image rectangle</param>
            <param name="text">Text of the hyperlink</param>
            <param name="f">Font of the text</param>
            <param name="horizontalAlignment">Horizontal alignment</param>
            <param name="verticalAlignment">Vertical alignment</param>
            <param name="areas">Areas of the hyperlink</param>
            <param name="pict">Picture (image)</param>
            <param name="rightToLeft">Whether to set right to left</param>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Windows.Forms.LinkArea[],System.Drawing.Color,System.Drawing.Color,FarPoint.Win.Picture,System.Boolean[],System.Boolean,System.Boolean)">
            <summary>
            Paints the cell.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="r">Image rectangle</param>
            <param name="text">Text of the hyperlink</param>
            <param name="backColor">Background color</param>
            <param name="foreColor">Foreground (text) color</param>
            <param name="font">Font of hyperlink text</param>
            <param name="horizontalAlignment">Horizontal alignment</param>
            <param name="verticalAlignment">Vertical alignment</param>
            <param name="areas">Areas that are hyperlinked</param>
            <param name="linkColor">Color of hyperlink</param>
            <param name="visitedColor">Color of the previously-visited hyperlink</param>
            <param name="pict">Picture (image)</param>
            <param name="visited">Whether the hyperlink has been clicked (visited) before</param>
            <param name="bLocked">Whether the control is locked</param>
            <param name="rightToLeft">Whether to set right to left</param>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Windows.Forms.LinkArea[],System.Drawing.Color,System.Drawing.Color,FarPoint.Win.Picture,System.Boolean[],System.Boolean,System.Boolean,System.Drawing.StringTrimming)">
            <summary>
            Paints the cell.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="r">Image rectangle</param>
            <param name="text">Text of the hyperlink</param>
            <param name="backColor">Background color</param>
            <param name="foreColor">Foreground (text) color</param>
            <param name="font">Font of hyperlink text</param>
            <param name="horizontalAlignment">Horizontal alignment</param>
            <param name="verticalAlignment">Vertical alignment</param>
            <param name="areas">Areas that are hyperlinked</param>
            <param name="linkColor">Color of hyperlink</param>
            <param name="visitedColor">Color of the previously-visited hyperlink</param>
            <param name="pict">Picture (image)</param>
            <param name="visited">Whether the hyperlink has been clicked (visited) before</param>
            <param name="bLocked">Whether the control is locked</param>
            <param name="rightToLeft">Whether to set right to left</param>
            <param name="trim">StringTrimming setting</param>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Font,System.Object)">
            <summary>
            Gets the size to display the text in the hyperlink control.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="font">Font</param>
            <param name="value">Value</param>
        </member>
        <member name="E:FarPoint.Win.FpHyperlink.LinkClicked">
            <summary>
            Occurs when the user clicks on the link.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnAfterFocus(System.EventArgs)">
            <summary>
            Raises the AfterFocus event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnLinkClicked(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpHyperlink.InvalidLink">
            <summary>
            Occurs when the user clicks on the link.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpHyperlink.OnInvalidLink(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Inset">
            <summary>
            Represents the dimensions of borders and margins.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Inset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an inset with specified four sides.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Inset.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an inset with specified x and y.
            </summary>
            <param name="xInset"></param>
            <param name="yInset"></param>
        </member>
        <member name="M:FarPoint.Win.Inset.#ctor(System.Int32)">
            <summary>
            Creates an inset with specified side.
            </summary>
            <param name="sideInset"></param>
        </member>
        <member name="P:FarPoint.Win.Inset.Left">
            <summary>
            Gets the inset from the left.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Inset.Top">
            <summary>
            Gets the inset from the top.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Inset.Right">
            <summary>
            Gets the inset from the right.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Inset.Bottom">
            <summary>
            Gets the inset from the bottom.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ProgressTextStyle">
            <summary>
            Specifies the appearance of the text portion of the progress indicator.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressTextStyle.Value">
            <summary>
            Displays the raw value as text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressTextStyle.Percent">
            <summary>
            Displays the percentage.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressTextStyle.PercentRemaining">
            <summary>
            Displays the percent remaining.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressTextStyle.Custom">
            <summary>
            Displays the custom text defined by the value of the Text property.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ProgressOrientation">
            <summary>
            Specifies the orientation of the progress indicator in the control. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressOrientation.LeftToRight">
            <summary>
            Displays the progress indicator horizontally left to right
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressOrientation.RightToLeft">
            <summary>
            Displays the progress indicator horizontally right to left
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressOrientation.TopToBottom">
            <summary>
            Displays the progress indicator vertically top to bottom
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressOrientation.BottomToTop">
            <summary>
            Displays the progress indicator vertically bottom to top
            </summary>
        </member>
        <member name="T:FarPoint.Win.ProgressStyle">
            <summary>
            Specifies the appearance of the progress indicator in the control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressStyle.Default">
            <summary>
            Displays a progress indicator as solid.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressStyle.Bars">
            <summary>
            Displays a progress indicator as a series of small bars.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressStyle.Gradient">
            <summary>
            Displays a progress indicator as a gradient.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ProgressStyle.Picture">
            <summary>
            Displays a progress indicator as a picture.
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpProgress">
            <summary>
            Represents the FarPoint progress indicator control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpProgress.maximum">
            <summary>
            Progress control orientation constants
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpProgress.theme">
            <summary>
            Internal use only. Visual style theme.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.#cctor">
            <summary>
            Creates a new FarPoint progress indicator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.Finalize">
            <summary>
            Internal use only. FarPoint progress indicator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.Dispose(System.Boolean)">
            <summary>
            Internal use only. Releases any resources used.
            </summary>
            <param name="disposing">Whether disposing</param>
        </member>
        <member name="M:FarPoint.Win.FpProgress.#ctor">
            FpProgress base class.
            <summary>
            Creates a new FarPoint progress indicator control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs if the background picture changes.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="P:FarPoint.Win.FpProgress.TextStyle">
            <summary>
            Gets or sets how the text portion of the progress indicator is displayed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Orientation">
            <summary>
            Gets or sets the orientation of the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Style">
            <summary>
            Gets or sets how the progress indicator is displayed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.VisualStyles">
            <summary>
            Gets or sets whether to use visual styles in the display of the progress indicator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the ThemeChanged event for the VisualStyleTheme.
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Maximum">
            <summary>
            Gets or sets the maximum value of the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Minimum">
            <summary>
            Gets or sets the minimum value of the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Text">
            <summary>
            Gets or sets the value as a string 
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Value">
            <summary>
            Gets or sets the current value of the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.FillColor">
            <summary>
            Gets or sets the color to paint the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.FillColor2">
            <summary>
            Gets or sets the second color (for a gradient) to paint the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.GradientMode">
            <summary>
            Gets or sets the gradient style displayed for the progress indicator
            when the style is set to display a gradient.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.Picture">
            <summary>
            Gets or sets the image displayed for the progress indicator
            when they style is set to display a picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.FillTextColor">
            <summary>
            Gets or sets the color of the text of the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.ShowText">
            <summary>
            Gets or sets whether the percentage displays as text inside the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of text in the progress indicator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpProgress.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of text in the progress indicator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the progress indicator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.OnPaint(System.Windows.Forms.PaintEventArgs,System.Object)">
            <summary>
            Internal use only. Paints the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpProgress.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,System.Int32,System.Int32,System.Int32,FarPoint.Win.ProgressOrientation,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Drawing.Color,System.Drawing.Color,System.Boolean,FarPoint.Win.Picture,System.Boolean,FarPoint.Win.ProgressStyle,FarPoint.Win.VisualStyles,FarPoint.Win.ProgressTextStyle,System.String,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode,FarPoint.Win.Picture,System.Boolean)">
            <summary>
            Paints the progress indicator.
            </summary>
            <param name="g">GDI+ grphics surface</param>
            <param name="r">Image rectangle</param>
            <param name="backColor">Background color of control</param>
            <param name="foreColor">Foreground (text) color of control</param>
            <param name="font">Font of the text</param>
            <param name="value">Value of the control</param>
            <param name="minimum">Minimum value of the progress indicator</param>
            <param name="maximum">Maximum value of the progress indicator</param>
            <param name="orientation">Orientation of the progress indicator</param>
            <param name="horizontalAlignment">Horizontal alignment of the progress indicator</param>
            <param name="verticalAlignment">Vertical alignment of the progress indicator</param>
            <param name="fillColor">Color of the fill of the progress indicator</param>
            <param name="fillTextColor">Color of text in the filled area of the progress indicator</param>
            <param name="showText">Whether to show the text</param>
            <param name="backgroundImage">Background image</param>
            <param name="locked">Whether it is locked</param>
            <param name="style">Type of display of the progress indicator</param>
            <param name="fillColor2">Second color for a progress indicator if set to display a gradient</param>
            <param name="gradMode">Gradient style for a progress indicator if set to display a gradient</param>
            <param name="picture">Image for a progress indicator if set to display a picture</param>
            <param name="visualStyles">Visual styles (XP themes) setting</param>
            <param name="textStyle">Progress indicator text style</param>
            <param name="textStr">Progress indicator text string</param>
            <param name="rightToLeft"> Specifies whether system is right to left</param>
        </member>
        <member name="M:FarPoint.Win.FpProgress.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,System.Int32,System.Int32,System.Int32,FarPoint.Win.ProgressOrientation,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Drawing.Color,System.Drawing.Color,System.Boolean,FarPoint.Win.Picture,System.Boolean,FarPoint.Win.ProgressStyle,FarPoint.Win.VisualStyles,FarPoint.Win.ProgressTextStyle,System.String,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode,FarPoint.Win.Picture,System.Boolean,System.Boolean)">
            <summary>
            Paints the progress indicator.
            </summary>
            <param name="g">GDI+ grphics surface</param>
            <param name="r">Image rectangle</param>
            <param name="backColor">Background color of control</param>
            <param name="foreColor">Foreground (text) color of control</param>
            <param name="font">Font of the text</param>
            <param name="value">Value of the control</param>
            <param name="minimum">Minimum value of the progress indicator</param>
            <param name="maximum">Maximum value of the progress indicator</param>
            <param name="orientation">Orientation of the progress indicator</param>
            <param name="horizontalAlignment">Horizontal alignment of the progress indicator</param>
            <param name="verticalAlignment">Vertical alignment of the progress indicator</param>
            <param name="fillColor">Color of the fill of the progress indicator</param>
            <param name="fillTextColor">Color of text in the filled area of the progress indicator</param>
            <param name="showText">Whether to show the text</param>
            <param name="backgroundImage">Background image</param>
            <param name="locked">Whether it is locked</param>
            <param name="style">Type of display of the progress indicator</param>
            <param name="fillColor2">Second color for a progress indicator if set to display a gradient</param>
            <param name="gradMode">Gradient style for a progress indicator if set to display a gradient</param>
            <param name="picture">Image for a progress indicator if set to display a picture</param>
            <param name="visualStyles">Visual styles (XP themes) setting</param>
            <param name="textStyle">Progress indicator text style</param>
            <param name="textStr">Progress indicator text string</param>
            <param name="rightToLeft"> Specifies whether system is right to left</param>
            <param name="validValue">Specifies whether value is valid or not</param>
        </member>
        <member name="M:FarPoint.Win.FpProgress.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,System.Int32,System.Int32,System.Int32,FarPoint.Win.ProgressOrientation,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Drawing.Color,System.Drawing.Color,System.Boolean,FarPoint.Win.Picture,System.Boolean,FarPoint.Win.ProgressStyle,FarPoint.Win.VisualStyles,FarPoint.Win.ProgressTextStyle,System.String,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode,FarPoint.Win.Picture,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Paints the progress indicator.
            </summary>
            <param name="g">GDI+ grphics surface</param>
            <param name="r">Image rectangle</param>
            <param name="backColor">Background color of control</param>
            <param name="foreColor">Foreground (text) color of control</param>
            <param name="font">Font of the text</param>
            <param name="value">Value of the control</param>
            <param name="minimum">Minimum value of the progress indicator</param>
            <param name="maximum">Maximum value of the progress indicator</param>
            <param name="orientation">Orientation of the progress indicator</param>
            <param name="horizontalAlignment">Horizontal alignment of the progress indicator</param>
            <param name="verticalAlignment">Vertical alignment of the progress indicator</param>
            <param name="fillColor">Color of the fill of the progress indicator</param>
            <param name="fillTextColor">Color of text in the filled area of the progress indicator</param>
            <param name="showText">Whether to show the text</param>
            <param name="backgroundImage">Background image</param>
            <param name="locked">Whether it is locked</param>
            <param name="style">Type of display of the progress indicator</param>
            <param name="fillColor2">Second color for a progress indicator if set to display a gradient</param>
            <param name="gradMode">Gradient style for a progress indicator if set to display a gradient</param>
            <param name="picture">Image for a progress indicator if set to display a picture</param>
            <param name="visualStyles">Visual styles (XP themes) setting</param>
            <param name="textStyle">Progress indicator text style</param>
            <param name="textStr">Progress indicator text string</param>
            <param name="rightToLeft"> Specifies whether system is right to left</param>
            <param name="validValue">Specifies whether value is valid or not</param>
            <param name="isGrayScale">Whether painting in grayscale mode</param>
        </member>
        <member name="M:FarPoint.Win.FpProgress.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Font,System.Int32,System.Int32,System.Int32,FarPoint.Win.ProgressOrientation)">
            <summary>
            Calculates the height and width required to display the text and picture in the progress indicator.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="font">Font of text</param>
            <param name="value">Value</param>
            <param name="minimum">Minimum allowed value</param>
            <param name="maximum">Maximum allowed value</param>
            <param name="orientation">Orientation of the progress indicator</param>        
        </member>
        <member name="M:FarPoint.Win.FpProgress.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Font,System.Int32,System.Int32,System.Int32,FarPoint.Win.ProgressOrientation,FarPoint.Win.ProgressTextStyle,System.String)">
            <summary>
            Calculates the height and width required to display the text and picture in the progress indicator.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="font">Font of text</param>
            <param name="value">Value</param>
            <param name="minimum">Minimum allowed value</param>
            <param name="maximum">Maximum allowed value</param>
            <param name="orientation">Orientation of the progress indicator</param>   
            <param name="textStyle">Determines what to display as the text</param>
            <param name="textStr">Text string to display</param>
        </member>
        <member name="T:FarPoint.Win.RadioOrientation">
            <summary>
            Specifies the orientation of the option buttons in the control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioOrientation.Horizontal">
            <summary>
            Displays the option buttons horizontally
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioOrientation.Vertical">
            <summary>
            Displays the option buttons vertically
            </summary>
        </member>
        <member name="T:FarPoint.Win.RadioPictureType">
            <summary>
            Specifies the state of the individual option in the multiple options button control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioPictureType.PictureFalse">
            <summary>
            Uses the picture for the false state
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioPictureType.PictureFalsePressed">
            <summary>
            Uses the picture for the false and pressed state
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioPictureType.PictureTrue">
            <summary>
            Uses the picture for the true state
            </summary>
        </member>
        <member name="F:FarPoint.Win.RadioPictureType.PictureTruePressed">
            <summary>
            Uses the picture for the true and pressed state
            </summary>
        </member>
        <member name="T:FarPoint.Win.RadioPictureConverter">
            <summary>
            Converts CheckBoxPicture objects from one type to another.
            </summary>
        </member>
        <member name="M:FarPoint.Win.RadioPictureConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type by using a specified set of
            property values for the object.
            </summary>
            <param name="context">Context</param>
            <param name="propertyValues">Property values</param>
        </member>
        <member name="M:FarPoint.Win.RadioPictureConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets whether changing a value on this object requires
            a call to the CreateInstance method to create a new value.
            </summary>
        </member>
        <member name="T:FarPoint.Win.LayoutablePicture">
            <summary>
            Represents a picture to display.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LayoutablePicture.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="T:FarPoint.Win.RadioPicture">
            <summary>
            Represents the pictures for the different option button states.
            </summary>
        </member>
        <member name="P:FarPoint.Win.RadioPicture.Item(System.Int32)">
            <summary>
            Gets or sets the picture for the different option button states.
            </summary>
        </member>
        <member name="P:FarPoint.Win.RadioPicture.Item(FarPoint.Win.RadioPictureType)">
            <summary>
            Gets or sets the picture for the different option button states.
            </summary>
        </member>
        <member name="P:FarPoint.Win.RadioPicture.False">
            <summary>
            Gets or sets the image used for the false state.
            </summary>   
        </member>
        <member name="P:FarPoint.Win.RadioPicture.FalsePressed">
            <summary>
            Gets or sets the image used for the false pressed state.
            </summary>
        </member>
        <member name="P:FarPoint.Win.RadioPicture.True">
            <summary>
            Gets or sets the image used for the true state.
            </summary>
        </member>
        <member name="P:FarPoint.Win.RadioPicture.TruePressed">
            <summary>
            Gets or sets the image used for the true pressed state.
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpMultiOption">
            <summary>
            Represents the FarPoint button control with multiple options.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpMultiOption.DEFAULT_PICTURE_WIDTH">
            <summary>
            Default picture (image) width.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpMultiOption.DEFAULT_PICTURE_HEIGHT">
            <summary>
            Default picture (image) height.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpMultiOption.theme">
            <summary>
            Internal use only. Visual style theme.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpMultiOption.ValueChanged">
            <summary>
            Occurs when the user selects a different option (the value changes).
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpMultiOption.AfterFocus">
            <summary>
            Occurs after the control receives focus.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.Finalize">
            <summary>
            Internal use only. Frees up resources.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.Dispose(System.Boolean)">
            <summary>
            Internal use only. Frees up resources.
            </summary>
            <param name="disposing">Whether disposing</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.#ctor">
            <summary>
            Creates a new multiple option button control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.BackgroundImage">
            <summary>
            Gets or sets the background image to use for the options button control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs if the background picture changes.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnAfterFocus(System.EventArgs)">
            <summary>
            Raises the AfterFocus event
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.VisualStyles">
            <summary>
            Gets or sets whether to use visual styles.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the ThemeChanged event for the VisualStyleTheme
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.ItemData">
            <summary>
            Gets or sets the item data list.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.UseMnemonic">
            <summary>
            Gets or sets whether special (shortcut) keys can be used to select items.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.TextAlign">
            <summary>
            Gets or sets how text is aligned relative to the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.Orientation">
            <summary>
            Gets or sets how the multiple option buttons are oriented.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.Picture">
            <summary>
            Gets or sets the pictures used for the different states of the option buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.List">
            <summary>
            Gets or sets the list of the individual option buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.Value">
            <summary>
            Gets or sets the currently selected option from the multiple option buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.HorizontalAlignment">
            <summary>
            Gets or sets how the option buttons are aligned horizontally.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.VerticalAlignment">
            <summary>
            Gets or sets how the option buttons are aligned vertically.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the ValueChanged event.
            </summary>
            <param name="e">EventArgs containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the key up event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.ProcessMnemonic(System.Char)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.IsInputChar(System.Char)">
            <summary>
            Determines whether the input is character.
            </summary>
            <param name="charCode">Character code</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.GotFocus event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse down event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse move event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnMouseLeave(System.EventArgs)">
            <summary>
            Handles the mouse leave event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse up event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.PictureWidth">
            <summary>
            Gets or sets the width of the picture (image) in the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpMultiOption.PictureHeight">
            <summary>
            Gets or sets the height of the picture (image) in the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.DoLayout(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.ButtonTextAlign,FarPoint.Win.RadioOrientation,FarPoint.Win.RadioPicture,System.Collections.ArrayList,System.Drawing.Rectangle[]@,System.Drawing.Rectangle[]@,System.Drawing.Rectangle[]@,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Calculates the layout rectangles for the multiple option buttons.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Font,FarPoint.Win.ButtonTextAlign,FarPoint.Win.RadioOrientation,FarPoint.Win.RadioPicture,System.Collections.ArrayList)">
            <summary>
            Calculates the height and width required to display the text and picture 
            (of the option buttons) in the control with default width and height.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="font">Font</param>
            <param name="nAlign">Alignment of text</param>
            <param name="nOrientation">Orientation (vertical or horizontal) of list of option buttons</param>
            <param name="radioPicture">Picture (image) for the option buttons</param>
            <param name="radioList">Array of list of options</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.GetPreferredSize(System.Drawing.Graphics,System.Drawing.Font,FarPoint.Win.ButtonTextAlign,FarPoint.Win.RadioOrientation,FarPoint.Win.RadioPicture,System.Collections.ArrayList,System.Int32,System.Int32)">
            <summary>
            Calculates the height and width required to display the text and picture 
            (of the option buttons) in the control.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="font">Font</param>
            <param name="nAlign">Alignment of text</param>
            <param name="nOrientation">Orientation (vertical or horizontal) of list of option buttons</param>
            <param name="radioPicture">Picture (image) for the option buttons</param>
            <param name="radioList">Array of list of options</param>
            <param name="pictWidth">Width of picture for the option buttons</param>
            <param name="pictHeight">Height of picture for the option buttons</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Handles the paint event.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.ButtonTextAlign,FarPoint.Win.RadioOrientation,FarPoint.Win.RadioPicture,System.Collections.ArrayList,System.Int32,System.Int32,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Boolean)">
            <summary>
            Paints the multiple options buttons with default width and height.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.ButtonTextAlign,FarPoint.Win.RadioOrientation,FarPoint.Win.RadioPicture,System.Collections.ArrayList,System.Int32,System.Int32,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Boolean,System.Int32,System.Int32,System.Int32,FarPoint.Win.VisualStyles,System.Boolean)">
            <summary>
            Paints the multiple options buttons.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpMultiOption.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.ButtonTextAlign,FarPoint.Win.RadioOrientation,FarPoint.Win.RadioPicture,System.Collections.ArrayList,System.Int32,System.Int32,System.Boolean,System.Boolean,FarPoint.Win.Picture,System.Boolean,System.Int32,System.Int32,System.Int32,FarPoint.Win.VisualStyles,System.Boolean,System.Boolean)">
            <summary>
            Paints the multiple options buttons.
            </summary>
            <param name="g">GDI+ grphics surface</param>
            <param name="r">Image rectangle</param>
            <param name="backColor">Background color of control</param>
            <param name="foreColor">Foreground (text) color of control</param>
            <param name="font">Font of the text</param>
            <param name="halign">Horizontal alignment of the control</param>
            <param name="valign">Vertical alignment of the control</param>
            <param name="nAlign">Aligment of text</param>
            <param name="nOrientation">Specifies the orientation of the option buttons in the control.</param>
            <param name="radioPicture">Represents the pictures for the different option button states.</param>
            <param name="radioList">List of radio</param>
            <param name="selectedItem">Index of selected item in list</param>
            <param name="focusItem">Index of of focused item in list</param>
            <param name="pressed">Whether radio is pressed</param>
            <param name="mnemonics">Whether nemonics is on/off</param>
            <param name="backpict">Background picture of check box</param>
            <param name="bLocked">Whether it is locked</param>
            <param name="pictWidth">Specifies width of picture</param>
            <param name="pictHeight">Specifies height of picture</param>
            <param name="mouseItem">Index of item on mouse position</param>
            <param name="visualStyles"> if visual styles are applied to the control</param>
            <param name="rightToLeft">Specifies whether system is right to left</param>
            <param name="isGrayScale">Whether painting in grayscale mode</param>
        </member>
        <member name="T:FarPoint.Win.SliderOrientation">
            <summary>
            Specifies the orientation of the slider.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SliderOrientation.Horizontal">
            <summary>
            Displays the slider horizontally
            </summary>
        </member>
        <member name="F:FarPoint.Win.SliderOrientation.Vertical">
            <summary>
            Displays the slider vertically
            </summary>
        </member>
        <member name="F:FarPoint.Win.SliderOrientation.HorizontalRightToLeft">
            <summary>
            Displays slider horizontally with right to left orientation
            </summary>
        </member>
        <member name="F:FarPoint.Win.SliderOrientation.VerticalBottomToTop">
            <summary>
            Displays slider vertically with bottom to top orientation
            </summary>
        </member>
        <member name="T:FarPoint.Win.FpSlider">
            <summary>
            Represents the FarPoint slider (track bar) control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.FpSlider.theme">
            <summary>
            Internal use only. Theme for visual styles.
            </summary>  
        </member>
        <member name="E:FarPoint.Win.FpSlider.AfterFocus">
            <summary>
            Occurs after the control receives focus.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpSlider.ValueChanged">
            <summary>
            Occurs when the user moves the slider and changes the value.
            </summary>
        </member>
        <member name="E:FarPoint.Win.FpSlider.Error">
            <summary>
            Occurs when an error occurs.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.#ctor">
            <summary>
            Creates a new FarPoint slider (track bar) control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.BackgroundImage">
            <summary>
            Gets or sets the background image for the slider.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnBackgroundImageChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs if the background picture changes.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="P:FarPoint.Win.FpSlider.VisualStyles">
            <summary>
            Gets or sets whether to use visual styles.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the ThemeChanged event for the VisualStyleTheme
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnAfterFocus(System.EventArgs)">
            <summary>
            Raises the AfterFocus event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data</param>
        </member>
        <member name="P:FarPoint.Win.FpSlider.TrackPicture">
            <summary>
            Gets or sets the picture displayed inside the track area of the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.TrackColor">
            <summary>
            Gets or sets the color of the track in the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.KnobPicture">
            <summary>
            Gets or sets the picture that displays on the knob of the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.TickLength">
            <summary>
            Gets or sets the width of the ticks of the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.KnobWidth">
            <summary>
            Gets or sets the width of the knob of the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.TrackWidth">
            <summary>
            Gets or sets the width of the track of the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.KnobColor">
            <summary>
            Gets or sets the color of the knob of the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.TickColor">
            <summary>
            Gets or sets the color of the tick marks in the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.Value">
            <summary>
            Gets or sets the value in the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.Minimum">
            <summary>
            Gets or sets the minimum value for the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.Text">
            <summary>
            Gets or sets the value as a string
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.Maximum">
            <summary>
            Gets or sets the maximum value for the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.Orientation">
            <summary>
            Gets or sets the orientation of the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.TickSpacing">
            <summary>
            Gets or sets how frequently to space the tick marks in the slider.
            </summary>
        </member>
        <member name="P:FarPoint.Win.FpSlider.ChangeOnFocus">
            <summary>
            Gets or sets whether the slider knob moves when intially clicking on the track.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the ValueChanged event.
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnError(System.EventArgs)">
            <summary>
            Raises the Error event.
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnMouseEnter(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.GotFocus event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnMouseLeave(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.  Paints the background.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpSlider.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Drawing.Color,FarPoint.Win.SliderOrientation,System.Int32,System.Int32,System.Int32,FarPoint.Win.Picture,System.Int32,System.Int32,FarPoint.Win.Picture,System.Drawing.Color,FarPoint.Win.Picture,System.Boolean,System.Boolean,System.Boolean,FarPoint.Win.VisualStyles,System.Drawing.Color,System.Boolean,System.Int32)">
             <summary>
             Paints the slider control.
             </summary>
             <param name="g">GDI+ graphics drawing surface</param>
             <param name="r">Image rectangle</param>
             <param name="backColor">Background color</param>
             <param name="foreColor">Foreground (text) color</param>
             <param name="value">Value of slider control</param>
             <param name="focus">Whether the control has focus</param>
             <param name="knobColor">Color of slider knob</param>
             <param name="orient">Orientation of slider</param>
             <param name="minimum">Minimum value of slider</param>
             <param name="maximum">Maximum value of slider</param>
             <param name="tickSpacing">Space between slider tick marks</param>
             <param name="backpict">Background picture of slider</param>
             <param name="knobWidth">Width in pixels of slider knob</param>
             <param name="trackWidth">Overall slider track width</param>
             <param name="knobPicture">Picture (image) for slider knob</param>
             <param name="trackColor">Color of slider track</param>
             <param name="trackPicture">Picture (image) for slider track</param>
             <param name="bLocked">Whether the control is locked</param>
             <param name="valueIsAdjusting">True if the slider knob is moving</param>
             <param name="ptInKnob">True if mouse is over the knob</param>
            <param name="tickColor">Color of the slider tick marks</param>
            <param name="rightToLeft">True to paint right to left</param>
             <param name="tickLength"> Width of the slider ticks</param>
             <param name="visualStyles">Specifies how visual style is applied to the control</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.GetPreferredSize(FarPoint.Win.SliderOrientation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the size needed to display the entire slider with the specified orientation and values.
            </summary>
            <param name="orientation">Orientation of the slider</param>
            <param name="minimum">Minimum value of the slider</param>
            <param name="maximum">Maximum value of the slider</param>
            <param name="tickSpacing">Space between tick marks</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.IsPointInKnob(System.Int32,System.Int32,System.Drawing.Rectangle,System.Int32,FarPoint.Win.SliderOrientation,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the point is in the knob of the slider.
            </summary>
            <param name="x">X-coordinate of point</param>
            <param name="y">Y-coordinate of point</param>
            <param name="r">Image rectangle</param>
            <param name="value">Value</param>
            <param name="orientation">Orientation of slider</param>
            <param name="minimum">Minimum value</param>
            <param name="maximum">Maximum value</param>
            <param name="knobWidth">Width of slider knob</param>
            <param name="trackWidth">Width of slider track</param>
            <param name="tickLength">Width of slider ticks</param>
        </member>
        <member name="M:FarPoint.Win.FpSlider.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:FarPoint.Win.StringSearch">
            <summary>
            Represents the string search capabilities using regular expressions.
            </summary>
        </member>
        <member name="M:FarPoint.Win.StringSearch.#ctor">
            <summary>
            Creates a new string search.
            </summary>
        </member>
        <member name="M:FarPoint.Win.StringSearch.#ctor(System.String)">
            <summary>
            Creates a new string search with the specified search pattern.
            </summary>
            <param name="pattern">Search pattern</param>
        </member>
        <member name="P:FarPoint.Win.StringSearch.SearchPattern">
            <summary>
            Sets the search pattern. Note: This is not a regular expression pattern.
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.Greedy">
            <summary>
            Gets or sets whether the regular expression should do a greedy search. A non-Greedy search
            on the string "FarPoint Technologies" with the pattern "F*o" would return "FarPo".  A Greedy
            search of the same string would return "FarPoint Techno".
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.RegularExpressionPattern">
            <summary>
            Gets or sets the regular expression pattern to use for the search.
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.MatchExact">
            <summary>
            Gets or sets whether the match must be exact.  An exact match is a string that is 
            delimited at the beginning and end by either whitespace or end of line.
            Note: This property does not have any affect on the search pattern if the 
            pattern was set using the RegularExpressionPattern property.
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.MatchIndex">
            <summary>
            Gets the index of the first character in the matched substring
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.MatchLength">
            <summary>
            Gets the length of the matched substring
            </summary>
        </member>
        <member name="P:FarPoint.Win.StringSearch.MatchString">
            <summary>
            Gets the matched substring
            </summary>
        </member>
        <member name="M:FarPoint.Win.StringSearch.BuildRegExprPattern(System.String)">
            <summary>
            Builds a regular expression pattern string from a patten string that uses '*' and '?' 
            as search wildcard characters.
            </summary>
            <param name="pattern">Pattern string</param>
        </member>
        <member name="M:FarPoint.Win.StringSearch.Find(System.String,System.Int32)">
            <summary>
            Searches the value string, starting at a specified index, for a character 
            sequence that matches the provided pattern.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.ILabelFormatter">
            <summary>
            Interface that defines the methods and properties required by objects used as formatters.
            Formatters are responsible for formatting chart contents.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ILabelFormatter.Format(System.Object)">
            <summary>
            Formats the specified object as a string.
            </summary>
            <param name="o">Object to be formatted.</param>
            <returns></returns>
        </member>
        <member name="P:FarPoint.Win.ILabelFormatter.FormatString">
            <summary>
            Gets the formatted string.
            </summary>
        </member>
        <member name="E:FarPoint.Win.ILabelFormatter.Changed">
            <summary>
            Occurs when the setting of the formatter is changed.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ILabelFormatter2">
            <summary>
            Interface that defines the methods and properties required by objects used as formatters.
            Formatters are responsible for formatting chart contents.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ILabelFormatter2.Parse(System.String,System.IFormatProvider@,System.String@)">
            <summary>
            Parses the string to an object and returns the result.
            </summary>
            <param name="s">String</param>
            <param name="formatInfo">IFormatProvider</param>
            <param name="formatString">String</param>
            <exception cref="!:ParseException">Not a valid hexidecimal number.</exception>
            <returns>Results of the parsing</returns>
        </member>
        <member name="T:FarPoint.Win.VerticalScrollMode">
             <summary>
            Specifies the scroll style for vertical scroll control.
             </summary>
        </member>
        <member name="F:FarPoint.Win.VerticalScrollMode.Row">
            <summary>
             Scrolls the control pixel by row.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VerticalScrollMode.Pixel">
            <summary>
             Scrolls the control pixel by pixel.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VerticalScrollMode.PixelAndRow">
            <summary>
             Scrolls the control pixel by row and pixel.
            </summary>
        </member>
        <member name="T:FarPoint.Win.HorizontalScrollMode">
            <summary>
            Specifies the scroll style for horizontal scroll control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.HorizontalScrollMode.Column">
            <summary>
             Scrolls the control pixel by row.
            </summary>
        </member>
        <member name="F:FarPoint.Win.HorizontalScrollMode.Pixel">
            <summary>
             Scrolls the control pixel by pixel.
            </summary>
        </member>
        <member name="F:FarPoint.Win.HorizontalScrollMode.PixelAndColumn">
            <summary>
             Scrolls the control pixel by row and pixel.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ISelectSupport">
            <summary>
            Interface that supports selection.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISelectSupport.Select(System.Boolean,System.Boolean)">
            <summary>
            Selects.
            </summary>
            <param name="directed">Whether directed selection</param>
            <param name="forward">Whether forward selection</param>
        </member>
        <member name="T:FarPoint.Win.EditMessage">
            <summary>
            Specifies the edit message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetSel">
            <summary>
            GetSel message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.SetSel">
            <summary>
            SetSel message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetRect">
            <summary>
            GetRect message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.SetRect">
            <summary>
            SetRect message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.SetRectNP">
            <summary>
            SetRectNP message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.Scroll">
            <summary>
            Scroll message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.LineScroll">
            <summary>
            LineScroll message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.ScrollCaret">
            <summary>
            ScrollCaret message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetModify">
            <summary>
            GetModify message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.SetModify">
            <summary>
            SetModify message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetLineCount">
            <summary>
            GetLineCount message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.LineIndex">
            <summary>
            LineIndex message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.SetHandle">
            <summary>
            SetHandle message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetHandle">
            <summary>
            GetHandle message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetThumb">
            <summary>
            GetThumb message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.LineLength">
            <summary>
            LineLength message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.ReplaceSel">
            <summary>
            ReplaceSel message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetLine">
            <summary>
            GetLine message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.LimitText">
            <summary>
            LimitText message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.CanUndo">
            <summary>
            CanUndo message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.Undo">
            <summary>
            Undo message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.FmtLines">
            <summary>
            FmtLines message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.LineFromChar">
            <summary>
            LineFromChar message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.SetTabStops">
            <summary>
            SetTabStops message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.SetPasswordChar">
            <summary>
            SetPasswordChar message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.EmptyUndoBuffer">
            <summary>
            EmptyUndoBuffer message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetFirstVisibleLine">
            <summary>
            GetFirstVisibleLine message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.SetReadOnly">
            <summary>
            SetReadOnly message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.SetWordBreakProc">
            <summary>
            SetWordBreakProc message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetWordBreakProc">
            <summary>
            GetWordBreakProc message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetPasswordChar">
            <summary>
            GetPasswordChar message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.SetMargins">
            <summary>
            SetMargins message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetMargins">
            <summary>
            GetMargins message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.GetLimitText">
            <summary>
            GetLimitText message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.PosFromChar">
            <summary>
            PosFromChar message.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditMessage.CharFromPos">
            <summary>
            CharFromPos message.
            </summary>
        </member>
        <member name="T:FarPoint.Win.EditModeCursorPosition">
            <summary>
            Specifies the position of the pointer when the edit control receives the focus.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditModeCursorPosition.MouseLocation">
            <summary>
            Positions the pointer at the location of the pointer device,
            without any text selected
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditModeCursorPosition.FirstInputPosition">
            <summary>
            Positions the pointer at the first input position in the control,
            without any text selected
            </summary>
        </member>
        <member name="F:FarPoint.Win.EditModeCursorPosition.End">
            <summary>
            Positions the pointer at the end of the text in the control,
            without any text selected
            </summary> 
        </member>
        <member name="F:FarPoint.Win.EditModeCursorPosition.LastKnownPosition">
            <summary>
            Positions the pointer at its last location prior to the control losing focus,
            without any text selected
            </summary> 
        </member>
        <member name="F:FarPoint.Win.EditModeCursorPosition.SelectAll">
            <summary>
            Positions the pointer at the end of the text in the control,
            with all text selected
            </summary> 
        </member>
        <member name="T:FarPoint.Win.NumberNegativeFormat">
            <summary>
            Specifies the formatting of a negative value in a numeric edit control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.UseRegional">
            <summary>
            Displays the sign and value according to the Windows regional settings
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.Parentheses">
            <summary>
            Displays the negative sign and the value in the control in parentheses
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.NegativeSignBefore">
            <summary>
            Displays the negative sign before the value in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.NegativeSignBeforeWithSpace">
            <summary>
            Displays the negative sign with a space before the value in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.NegativeSignAfter">
            <summary>
            Displays the negative sign after the value in the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.NumberNegativeFormat.NegativeSignAfterWithSpace">
            <summary>
            Displays the negative sign with a space after the value in the control
            </summary>
        </member>
        <member name="T:FarPoint.Win.UserEntry">
            <summary>
            Specifies whether data is validated when it is provided to the editing control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UserEntry.Formatted">
            <summary>
            Checks the data as it is provided to the control 
            </summary>
        </member>
        <member name="F:FarPoint.Win.UserEntry.FreeFormat">
            <summary>
            Does not check the data as it is provided to the control 
            </summary> 
        </member>
        <member name="T:FarPoint.Win.ControlType">
            <summary>
            Specifies how the contents of the control can be handled.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ControlType.Normal">
            <summary>
            Allows changes to the contents based on the default settings
            </summary>
        </member>
        <member name="F:FarPoint.Win.ControlType.ReadOnly">
            <summary>
            Allows no changes to the contents but allows some interaction, such as copying 
            </summary>
        </member>
        <member name="F:FarPoint.Win.ControlType.Static">
            <summary>
            Allows contents to be seen only, as in a label, but not set focus to 
            </summary> 
        </member>
        <member name="F:FarPoint.Win.ControlType.ButtonEdit">
            <summary>
            Allows contents to be changed only by means of buttons
            </summary>
        </member>
        <member name="T:FarPoint.Win.ButtonAlign">
            <summary>
            Specifies the alignment of the button in the edit control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonAlign.Right">
            <summary>
            Aligns the button on the right side of the control
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonAlign.Left">
            <summary>
            Aligns the button on the left side of the control
            </summary>
        </member>
        <member name="T:FarPoint.Win.ButtonStyle">
            <summary>
            Specifies the style of the button to display in the edit control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonStyle.None">
            <summary>
            Displays no buttons
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonStyle.Spin">
            <summary>
            Displays two spin buttons to increment and decrement values
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonStyle.PopUp">
            <summary>
            Displays a button with ellipsis points to launch a dialog or pop-up calendar or clock
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonStyle.DropDown">
            <summary>
            Displays a button with a drop-down arrow for a drop-down list or drop-down calendar or clock
            </summary>
        </member>
        <member name="F:FarPoint.Win.ButtonStyle.Slide">
            <summary>
            Displays two buttons to scroll horizontally through long data
            </summary>
        </member>
        <member name="T:FarPoint.Win.InvalidOption">
            <summary>
            Specifies what to do with invalid data when the edit control loses focus.
            </summary>
        </member>
        <member name="F:FarPoint.Win.InvalidOption.ShowData">
            <summary>
            Displays invalid data in the control at all times
            </summary>
        </member>
        <member name="F:FarPoint.Win.InvalidOption.HideData">
            <summary>
            Hides invalid data when the control loses the focus (and displays it again when the focus returns)
            </summary>
        </member>
        <member name="F:FarPoint.Win.InvalidOption.ClearData">
            <summary>
            Clears invalid data from the control when the control loses the focus
            </summary>
        </member>
        <member name="T:FarPoint.Win.ISpinUpNotify">
            <summary>
            Internal use only. Interface that supports spin up notification.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISpinUpNotify.SpinUpNotify(System.Object)">
            <summary>
            Specifies spin up notification.
            </summary>
            <param name="o">Object</param>
        </member>
        <member name="T:FarPoint.Win.ISpinDownNotify">
            <summary>
            Internal use only. Interface that supports spin down notification.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISpinDownNotify.SpinDownNotify(System.Object)">
            <summary>
            Specifies spin down notification. 
            </summary>
            <param name="o">Object</param>
        </member>
        <member name="T:FarPoint.Win.IPopUpNotify">
            <summary>
            Internal use only. Interface that supports pop up notification.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IPopUpNotify.PopUpNotify(System.Object)">
            <summary>
            Specifies pop up notification.
            </summary>
            <param name="o">Object</param>
        </member>
        <member name="T:FarPoint.Win.IDropDownNotify">
            <summary>
            Internal use only. Interface that supports drop-down notification.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IDropDownNotify.DropDownNotify(System.Object)">
            <summary>
            Specifies drop-down notification.
            </summary>
            <param name="o">Object</param>
        </member>
        <member name="T:FarPoint.Win.ISlideLeftNotify">
            <summary>
            Internal use only. Interface that supports slide left notification.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISlideLeftNotify.SlideLeftNotify(System.Object)">
            <summary>
            Specifies slide left notification.
            </summary>
            <param name="o">Object</param>
        </member>
        <member name="T:FarPoint.Win.ISlideRightNotify">
            <summary>
            Internal use only. Interface that supports slide right notification.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISlideRightNotify.SlideRightNotify(System.Object)">
            <summary>
            Specifies slide right notification.
            </summary>
            <param name="o">Object</param>
        </member>
        <member name="T:FarPoint.Win.SpinUpEventArgs">
            Derives from System.EventArgs.
            <summary>
            Represents the event data for the SpinUp event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinUpEventArgs.#ctor">
            <summary>
            Constructs a new SpinUpEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SpinUpEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SpinUpEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the SpinUp event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SpinDownEventArgs">
            Derives from System.EventArgs.
            <summary>
            Represents the event data for the SpinDown event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SpinDownEventArgs.#ctor">
            <summary>
            Constructs a new SpinDownEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SpinDownEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SpinDownEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the SpinDown event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.PopUpEventArgs">
            Derives from System.EventArgs.
            <summary>
            Represents the event data for the PopUp event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PopUpEventArgs.#ctor">
            <summary>
            Constructs a new PopUpEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.PopUpEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.PopUpEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the PopUp event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.DropDownEventArgs">
            Derives from System.EventArgs.
            <summary>
            Represents the event data for the DropDown event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.DropDownEventArgs.#ctor">
            <summary>
            Constructs a new DropDownEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.DropDownEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.DropDownEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the DropDown event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SlideLeftEventArgs">
            <summary>
            Represents the event data for the SlideLeft event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SlideLeftEventArgs.#ctor">
            <summary>
            Constructs a new SlideLeftEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SlideLeftEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SlideLeftEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the SlideLeft event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SlideRightEventArgs">
            SlideRight event
            Derives from System.EventArgs.
            <summary>
            Represents the event data for the SlideRight event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SlideRightEventArgs.#ctor">
            <summary>
            Constructs a new SlideRightEventArgs object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SlideRightEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether default processing should be cancelled.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SlideRightEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the SlideRight event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.InvalidDataEventHandler">
            Delegate declaration.
            <summary>
            Represents a defined method that handles the InvalidData event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEditPreview">
            <summary>
            Represents a preview of the editing control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditPreview.#ctor">
            <summary>
            Creates a new super edit preview.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEditBase">
            <summary>
            Represents the base for editing controls.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.EmptyUndefinedStringConstant">
            <summary>
            Internal use only. Empty undefined string.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.NumericValueStringConstant">
            <summary>
            Internal use only. Numeric value string.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.TextValueStringConstant">
            <summary>
            Internal use only. Text value string.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.DateValueStringConstant">
            <summary>
            Internal use only. Date value string.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.FormulaValueStringConstant">
            <summary>
            Internal use only. Formula value string.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.CurrencyValueStringConstant">
            <summary>
            Internal use only. Currency value string.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.DefaultHeightConstant">
            <summary>
            Internal use only. Default height.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.DecimalConstant">
            <summary>
            Internal use only. Decimal.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.ThousandSeparatorConstant">
            <summary>
            Internal use only. Thousand Separator.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.LiteralConstant">
            <summary>
            Internal use only. Literal.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.textbox">
            <summary> 
            Internal use only. Input text box.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEditBase.trueHeight">
            <summary>
            Internal use only. True height.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.FarPoint#Win#ITouchEditor#ShowGrippers">
            <summary>
            Gets or sets whether to show grippers when using touch for input.
            </summary>
            <value>
            <see langword="true" /> to show grippers when using touch for input; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.FarPoint#Win#ITouchEditorSupport#SelectionGripperLength">
            <summary>
            Returns active edit control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShowSelectionGripper">
            <summary>
            Displays the selection gripper.
            </summary>
            <remarks>
            Shows the selection gripper
            </remarks>    
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.HideSelectionGripper">
            <summary>
            Hides the selection gripper.
            </summary>
            <remarks>
            Hides the selection gripper
            </remarks>    
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ImeModeBase">
            <summary>
            Gets or sets the ime mode base.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetCurrentLine">
            <summary>
            Gets the current line.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetLineCount">
            <summary>
            Returns the number of lines.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnImeModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ImeModeChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SetImeModeRecursive(System.Windows.Forms.Control,System.Windows.Forms.ImeMode)">
            <summary>
            Sets the IME mode recursive.
            </summary>
            <param name="c">The c.</param>
            <param name="imeMode">The IME mode.</param>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.SpinUp">
            <summary>
            Occurs when a user clicks a spin up button in the edit control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.SpinDown">
            <summary>
            Occurs when a user clicks a spin down button in the edit control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.PopUp">
            <summary>
            Occurs when a user clicks a pop-up button in the edit control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.DropDown">
            <summary>
            Occurs when a user clicks a drop-down button in the edit control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnDropDown(System.Object,FarPoint.Win.DropDownEventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.SuperEditBase.DropDown"/> event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.SlideLeft">
            <summary>
            Occurs when a user clicks a slide left button in the edit control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.SlideRight">
            <summary>
            Occurs when a user clicks a slide right button in the edit control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.UserError">
            <summary>
            Occurs when content is provided that cannot be processed or is invalid.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.InvalidData">
            <summary>
            Occurs when the control contains invalid data.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEditBase.Advance">
            <summary>
            Occurs when focus moves to the previous or next control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only. Processes Window.
            </summary>
            <param name="m">Message</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.#ctor">
            <summary>
            Creates a new SuperEditBase object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Finalize">
            <summary>
            Release object memory.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeCursor">
            <summary>
            Gets whether the cursor should be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Cursor">
            <summary>
            Gets or sets the image for the pointer when the pointer is over the edit control. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.VisualStyles">
            <summary>
            Gets or sets whether visual styles are used.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Modified">
            <summary>
            Gets or sets whether the text in the edit control has been modified.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Reset">
            <summary>
            Resets the contents of the control to the default value. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.TextboxPriv">
            <summary>
            Internal use only. Gets or sets the input text box.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonPriv">
            <summary>
            Internal use only. Gets or sets the edit button.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonAlign">
            <summary>
            Gets or sets the alignment of the button in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonAlignPriv">
            <summary>
            Internal use only. Gets or sets the button alignment.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonWidth">
            <summary>
            Gets or sets the width of the button in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonWidthPriv">
            <summary>
            Internal use only. Gets or sets the button width.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonMargin">
            <summary>
            Gets or sets the margin between the button and the text in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonMarginPriv">
            <summary>
            Internal use only. Gets or sets the button margin.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonWrap">
            <summary>
            Gets or sets whether the button index wraps when it reaches the value specified 
            by the ButtonMin and ButtonMax properties.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonWrapPriv">
            <summary>
            Internal use only. Gets or sets whether the button index wraps.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonIndex">
            <summary>
            Gets or sets the index value for the button in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonIndexPriv">
            <summary>
            Internal use only. Gets or sets the button index.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonMin">
            <summary>
            Gets or sets the minimum value for the button index in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonMinPriv">
            <summary>
            Internal use only. Gets or sets the minimum button index.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonMax">
            <summary>
            Gets or sets the maximum value for the button index in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonMaxPriv">
            <summary>
            Internal use only. Gets or sets the maximum button index.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonStyle">
            <summary>
            Gets or sets the type of button to display in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonStylePriv">
            <summary>
            Internal use only. Gets or sets the button style.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.DrawFocusRectangle">
            <summary>
            Gets or sets the focus rectangle drawing style for the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.EditModeCursorPosition">
            <summary>
            Gets or sets the position of the pointer in the edit control when it receives the focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AllowClipboardKeys">
            <summary>
            Gets or sets whether the control supports the Clipboard shortcut keys.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Focused">
            <summary>
            Gets whether the edit control has focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Enabled">
            <summary>
            Gets or sets whether the control can receive focus and respond to user actions.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AutoAdvance">
            <summary>
            Gets or sets whether the focus moves to another control when the pointer is moved with the arrow keys.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.IsNull">
            <summary>
            Gets whether the control contains a null value.
            </summary>
            <returns>Whether the control contains a null value.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.IsValid">
            <summary>
            Gets whether the contents of the control are valid.
            </summary>
            <returns>True if the contents are valid.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only. Gets whether it is an input key.
            </summary>
            <param name="keyData">Key data</param>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.IsInvalidPriv">
            <summary>
            Internal use only. Gets or sets whether contents are invalid.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.InvalidOption">
            <summary>
            Gets or sets whether invalid data is displayed, hidden, or cleared when the control loses the focus.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetFont">
            <summary>
            Resets the font of the control to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Font">
            <summary>
            Gets or sets the font for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.FontPriv">
            <summary>
            Internal use only. Gets or sets the font.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeBackColor">
            <summary>
            Internal use only. Determines whether the background color should be serialized.
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetBackColor">
            <summary>
            Resets the background color to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.BackgroundImage">
            <summary>
            Gets or sets the background image for the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeForeColor">
            <summary>
            Internal use only. 
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetForeColor">
            <summary>
            Resets the text color to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ForeColor">
            <summary>
            Gets or sets the text color for the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeInvalidColor">
            <summary>
            Internal use only. 
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetInvalidColor">
            <summary>
            Resets the background color used when the control contains invalid data to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.InvalidColor">
            <summary>
            Gets or sets the background color to display when the control contains invalid data.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeNullColor">
            <summary>
            Internal use only. 
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetNullColor">
            <summary>
            Resets the background color displayed when the control contains the null value to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.NullColor">
            <summary>
            Gets or sets the background color displayed when the control contains the null value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.UserEntry">
            <summary>
            Gets or sets how data is validated when it is provided to the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.UserEntryPriv">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.CausesValidation">
            <summary>
            Gets or sets whether data validation occurs on other controls when the control loses focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.CanValidate">
            <summary>
            Gets or sets whether the control validates data when it loses the focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Selectable">
            <summary>
            Gets or sets whether the user can interact with the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.CanFocus">
            <summary>
            Gets or sets whether the edit control can receive focus.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetText">
            <summary>
            Resets the contents to the default value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeText">
            <summary>
            Internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Text">
            <summary>
            Gets or sets the formatted contents of the control as a string 
            matching exactly what is displayed.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeButtonColor">
            <summary>
            Internal use only. 
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetButtonColor">
            <summary>
            Resets the background color of the buttons in the control to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonColor">
            <summary>
            Gets or sets the background color of the button in the edit control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeButtonMarginColor">
            <summary>
            Internal use only. Determines whether button margin color should be serialized.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetButtonMarginColor">
            <summary>
            Resets the margin color between the button and the text in the edit control to its default color.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ButtonMarginColor">
            <summary>
            Gets or sets the margin color between the button and the text in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AllowNull">
            <summary>
            Gets or sets whether the control considers a null value valid.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AllowNullPriv">
            <summary>
            Internal use only. Gets or sets whether to allow null.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.StringTrimmingPriv">
            <summary>
            Internal use only. Gets or sets string trimming.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.HideSelection">
            <summary>
            Gets or sets whether selected text loses its highlighting when the control loses focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AutoHeight">
            <summary>
            Gets or sets whether the control resizes itself based on the font.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AutoMenu">
            <summary>
            Gets or sets whether the control displays a context menu that provides basic edit operations.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ControlType">
            <summary>
            Gets or sets whether the control is read-write, read-only, static, or allows values to be changed by pressing buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.PictureOrientation">
            <summary>
            Gets or sets the orientation of the picture in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.PictureTransparencyColor">
            <summary>
            Gets or sets the transparency color for the picture in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.TextOrientation">
            <summary>
            Gets or sets the orientation of the text in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.TextWrap">
            <summary>
            Gets or sets whether to automatically wrap text without line breaks. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AlignText">
            <summary>
            Gets or sets the alignment of the text with respect to the alignment of the picture. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Picture">
            <summary>
            Gets or sets the picture to display in the edit control. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.PictureMargin">
            <summary>
            Gets or sets the margin between the text and the picture.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.FormatText">
            <summary>
            Gets how text contents of the edit control are formatted.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Value">
            <summary>
            Gets or sets the unformatted value of the edit control. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Border">
            <summary>
            Gets or sets the border for the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.IsDefaultBorder(FarPoint.Win.IBorder)">
            <summary>
            Gets whether the default border.
            </summary>
            <param name="border">Border</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ShouldSerializeBorder">
            <summary>
            Internal use only. 
            </summary>
            <returns>True if the property value has changed from its default; otherwise, false.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetBorder">
            <summary>
            Resets the border to its default value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment of the control's contents.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.AlignVert">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.SelectionStart">
            <summary>
            Gets or sets the starting point of selected characters or the position of the 
            insertion point if no characters are selected. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.SelectionLength">
            <summary>
            Gets or sets the number of characters selected in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.SelectedText">
            <summary>
            Gets or sets the currently selected text in the edit control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetRegionalSettingsPriv">
            <summary>
            Internal use only. Gets the Regional Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SetRegionalSettingsPriv(FarPoint.Win.SuperEdit.IRegionalSettings)">
            <summary>
            Internal use only. Sets the Regional Settings.
            </summary>
            <param name="rgnSettings">Regional Settings</param>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.Formatter">
            <summary>
            Gets or sets the formatter for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.MaxLength">
            <summary>
            Gets or sets the maximum number of characters that can be typed or pasted into the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.ContextMenuStrip">
            <summary>
            Gets or sets the context menu strip to display for the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.DirtyFlag">
            <summary>
            Gets or sets the flag that edit has changed (dirty).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetNewFormat">
            <summary>
            Gets the new format.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SetNewFormat(System.Object)">
            <summary>
            Sets the new format.
            </summary>
            <param name="val">Value</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SetNewFormat">
            <summary>
            Sets the new format.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetPaintString">
            <summary>
            Gets the string to paint.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetDrawingFont(System.Boolean@)">
            <summary>
            Gets the font for painting.
            </summary>
            <param name="fontCreated">Created font</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetDrawingText(System.String)">
            <summary>
            Gets a string that contains the text to draw.
            </summary>
            <param name="paintString">String that contains the text</param>
            <returns>String that contains the text</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetDrawingStringFormat(System.Drawing.Rectangle@)">
            <summary>
            Gets a new string format for drawing the text in the specified rectangle.
            </summary>
            <param name="drawRect">Rectangle for drawing text</param>
            <returns>StringFormat object that contains the string format</returns>
            <remarks>This method modifies the rectangle under certain settings.</remarks>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.PaintString(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            Paints the string.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="faceRect">Rectangular area</param>
            <param name="paintStr">String to paint</param>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.HotkeyPrefix">
            <summary>
            Gets or sets whether an ampersand typed in front of a character  
            underlines the character in a static control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ResetToInitText">
            <summary>
            Resets to the initial text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.PaintTextAndPicture(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the text and picture.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="r">Rectangular area</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.PaintFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the focus rectangle.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="r">Rectangular area</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event, which paints the edit control.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.PaintBackgroundImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the background image.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="r">Rectangular area</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.PaintBackColor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the background color.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="r">Rectangular area</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.PaintSpecialBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the special background.
            </summary>
            <param name="g">Graphics device interface</param>
            <param name="r">Rectangular area</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.IsSizeAllowed">
            <summary>
            Gets whether the size is allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the SizeChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnParentFontChanged(System.EventArgs)">
            <summary>
            Raises the ParentFontChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the ParentChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.IsMouseOverButton">
            <summary>
            Gets whether the pointer is over a button in the edit control. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SetToolTip(System.Windows.Forms.ToolTip,System.String)">
            <summary>
            Sets the ToolTip text for embedded (inner child) controls.
            </summary>
            <param name="toolTipControl">Name of the ToolTip control</param>
            <param name="toolTipText">String of text to appear as the tip</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SetTextBoxBackColor">
            <summary>
            Internal use only. Sets the background color of the text box.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SetTextBoxBackgroundImage">
            <summary>
            Internal use only. Sets the background image of the text box.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ToggleState">
            <summary>
            Internal use only. Toggles the state.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.AdjustClientArea">
            <summary>
            Internal use only. Adjusts the client area.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.AdjustClientArea(System.Boolean)">
            <summary>
            Internal use only. Adjusts the client area.
            </summary>
            <param name="bInvalidate">Whether to invalidate</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetInputTextBox">
            <summary>
            Internal use only. override get input textbox
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetBottomMarging(System.Int32)">
            <summary>
            Use internal only
            </summary>
            <param name="gdiHeight"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SetElementBounds(System.Drawing.Rectangle)">
            <summary>
            Internal use only. Sets element bounds.
            </summary>
            <param name="r">Rectangular bounds</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Select(System.Int32,System.Int32)">
            <summary>
            Selects the specified number of characters in the edit control starting at the specified location.
            </summary>
            <param name="selStart">Position of the first character in the control from which to start the selection</param>
            <param name="selLength">Number of characters to select</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SelectAll">
            <summary>
            Selects the entire contents of the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event. 
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnCausesValidationChanged(System.EventArgs)">
            <summary>
            Raises the CausesValidationChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the MouseEnter event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the MouseLeave event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.InitLayout">
            <summary>
            Internal use only. Initializes layout.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetCharIndexAtPoint(System.Drawing.Point,System.Boolean)">
            <summary>
            Calculates the character index at a specified point for the graphics object.
            </summary>
            <param name="pt">Point</param>
            <param name="splitChar">Whether to split character</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.AdjustEditorFaceRectangle(System.Boolean,System.Int32)">
            <summary>
            Adjust face rectangle of editor
            </summary>
            <param name="rightToLeft"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only. Processes mouse up.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only. Processes mouse up.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ProcessMnemonic(System.Char)">
            <summary>
            Internal use only. Processes shortcut key character.
            </summary>
            <param name="charCode">Character code</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the DoubleClick event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the GotFocus event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditTextCut(System.Object,System.EventArgs)">
            <summary>
            Raises the EditTextCut event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditTextPasted(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the EditTextPasted event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditTextPasting(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the EditTextPasting event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditPreviewKeyDown(System.Object,System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Handles the preview key down event.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the EditKeyDown event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the EditKeyPress event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the EditKeyUp event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditValidating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the EditValidating event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditValidated(System.Object,System.EventArgs)">
            <summary>
            Raises the EditValidated event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditTextChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the EditTextChanged event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditClick(System.Object,System.EventArgs)">
            <summary>
            Raises the EditClick event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Raises the EditDoubleClick event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditHelpRequested(System.Object,System.Windows.Forms.HelpEventArgs)">
            <summary>
            Raises the EditHelpRequested event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Raises the EditMouseEnter event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditorVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the visible state changed event.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnLocationChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the location changed event.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditLeave(System.Object,System.EventArgs)">
            <summary>
            Handles the leave event.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditEnter(System.Object,System.EventArgs)">
            <summary>
            Handles the enter event.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Raises the EditMouseLeave event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the EditMouseWheel event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the EditMouseUp event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the EditMouseMove event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the EditMouseDown event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditGotFocus(System.Object,System.EventArgs)">
            <summary>
            Raises the EditGotFocus event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Validate(System.String)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Validate">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetValueFromFreeFormat">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ForceValidation">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ForceText(FarPoint.Win.SuperEdit.ISEditFormatter,System.Object)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnEditLostFocus(System.Object,System.EventArgs)">
            <summary>
            Raises the EditLostFocus event.
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnUserError(FarPoint.Win.SuperEdit.UserErrorEventArgs)">
            Occurs when the user performs an action that cannot be processed or is invalid.
            <summary>
            Raises the <see cref="E:FarPoint.Win.SuperEditBase.UserError"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnInvalidData(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.SuperEditBase.InvalidData"/> event.
            </summary>
            <param name="e">Event arguments</param>
            Occurs when the control contains invalid data.
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnAdvance(System.EventArgs)">
            <summary>
            Raises the <see cref="E:FarPoint.Win.SuperEditBase.Advance"/> event. 
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Raises the Layout event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Copy">
            <summary>
            Copies the selected text in the edit control to the Clipboard.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Cut">
            <summary>
            Cuts the selected contents in the edit control to the Clipboard.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Paste">
            <summary>
            Pastes the contents of the Clipboard into the edit control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Clear">
            <summary>
            Removes all of the selected contents of the edit control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Undo">
            <summary>
            Reverses the previous edit command.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SetNull">
            <summary>
            Sets the value of the control to the null value.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.ClearAll">
            <summary>
            Removes all of the contents of the edit control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SpinUpDefaultAction">
            <summary>
            Internal use only. Spin up default action.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SpinDownDefaultAction">
            <summary>
            Internal use only. Spin down default action.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.PopUpDefaultAction">
            <summary>
            Internal use only. Pop up default action.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.DropDownDefaultAction">
            <summary>
            Internal use only. Drop down default action.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SlideLeftDefaultAction">
            <summary>
            Internal use only. Slide left default action.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SlideRightDefaultAction">
            <summary>
            Internal use only. Slide right default action.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SpinUpNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SpinDownNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.FirePopup">
            <summary>
            Internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.PopUpNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.DropDownNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SlideLeftNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.SlideRightNotify(System.Object)">
            <summary>
            Internal use only.
            </summary>
            <param name="o">Object of the action</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.CreateStringWithLiterals(System.String)">
            <summary>
            Creates a string composed of literal characters.
            </summary>
            <param name="originalString">String that contains original characters</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.HandleValidCharacter(System.Int32@)">
            <summary>
            Internal use only. Character is valid if not handled by the control.
            </summary>
            <param name="c">Numerical value for an ASCII character</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.HandleValidKey(System.Int32)">
            <summary>
            Internal use only. Key is valid if not handled by the control.
            </summary>
            <param name="c">Numerical value for an ASCII character</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetLeftmostCharacters(System.Int32)">
            <summary>
            Gets a specified number of characters, starting with the leftmost character. 
            </summary>
            <param name="count">Number of characters to return</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetRightmostCharacters(System.Int32)">
            <summary>
            Gets a specified number of characters, starting with the rightmost character. 
            </summary>
            <param name="count">Number of characters to return</param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.GetCharFromPos(System.Drawing.Point)">
            <summary>
            Internal use only.
            </summary>
            <param name="pt">The point</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Select(System.Boolean,System.Boolean)">
            <summary>
            Selects a control with the specified direction in the tab order 
            from which to select the control.
            </summary>
            <param name="directed">
            true to specify the direction of the control to select; otherwise, false
            </param>
            <param name="forward">
            true to move forward in the tab order; false to move backward in the tab order
            </param>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.Dispose(System.Boolean)">
            <summary>
            Internal use only. Disposes and frees up resources.
            </summary>
            <param name="disposing">Whether disposing</param>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.FarPoint#Win#IEditorImeSenteceModeSupport#ImeSentenceMode">
            <summary>
            Gets and sets IME sentence mode.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.CanShowSelectionGripper">
            <summary>
            Gets whether the selection gripper can be displayed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEditBase.FarPoint#Win#IVerticalAlignmentSupport#AllowEditorVerticalAlignment">
            <summary>
            Gets or sets whether to allow vertical alignment.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEditBase.FarPoint#Win#IVerticalAlignmentSupport#UpdateEditorBounds">
            <summary>
            Updates the editor bounds.
            </summary>
        </member>
        <member name="T:FarPoint.Win.InputTextBox">
            <summary>
            Represents a text editor in the edit control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.InputTextBox.AllowClipboardKeys">
            <summary>
            Internal use only. Gets or sets whether to allow Clipboard shortcut keys.
            </summary>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.ProcessAlphaNumericSysKey(System.Windows.Forms.Message@)">
            <summary>
            Internal use only. Processes alphanumeric system keys.
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Internal use only. Sets core bounds.
            </summary>
            <param name="x">Starting x-coordinate of bounds</param>
            <param name="y">Starting y-coordinate of bounds</param>
            <param name="width">Width of bounds</param>
            <param name="height">Height of bounds</param>
            <param name="specified">Bounds specified</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Internal use only. Determines whether input key.
            </summary>
            <param name="keyData">Key data</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.IsInputChar(System.Char)">
            <summary>
            Determines whether a character is an input character that the control recognizes.
            </summary>
            <param name="charCode">Character to check</param>
            <returns>true if the character can be handled by the control and not preprocessed; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only. Windows process.
            </summary>
            <param name="m">Message</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.#ctor">
            <summary>
            Constructs a text editor (input text box).
            </summary>
        </member>
        <member name="P:FarPoint.Win.InputTextBox.EditModeCursorPosition">
            <summary>
            Gets or sets the position of the pointer in the control when it receives the focus.
            </summary>
        </member>
        <member name="P:FarPoint.Win.InputTextBox.LastCaretPos">
            <summary>
            Gets or sets the last caret position.
            </summary>
        </member>
        <member name="P:FarPoint.Win.InputTextBox.Value">
            <summary>
            Gets or sets the value in the control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.OnUserError(FarPoint.Win.SuperEdit.UserErrorEventArgs)">
            <summary>
            Occurs on user error.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.OnAdvance(System.EventArgs)">
            <summary>
            Occurs on focus advance.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.ProcessKeyMessage(System.Windows.Forms.Message@)">
            <summary>
            Processes the key message.
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.SEditProcessWmCharMsg(System.Windows.Forms.Message@)">
            <summary>
            Internal use only. Processes the WmChar message.
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.SEditProcessWmKeyUpMsg(System.Windows.Forms.Message@)">
            <summary>
            Internal use only. Processes the WmKeyUp message ourselves, only for Advance (ArrowKeys).
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.SEditProcessWmKeyDownMsg(System.Windows.Forms.Message@)">
            <summary>
            Internal use only. Processes the WmKeyDown message.
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.SetTextNoUndo(System.String)">
            <summary>
            Sets the text editor to not allow undo. 
            </summary>
            <param name="stringIn">String</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.OnLostFocus(System.EventArgs)">
            <summary>
            Occurs when focus is lost.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Occurs when painted.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Occurs when background is painted.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.InputTextBox.OnGotFocus(System.EventArgs)">
            <summary>
            Occurs when focus is received.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="T:FarPoint.Win.SEditButtonElement">
            <summary>
            Represents a button element for an editing control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButtonElement.ToggleState">
            <summary>
            Toggles the state of the button.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SEditButton">
            <summary>
            Represents a button for an editing control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SEditButton.dropDown">
            <summary>
            Internal use only. Drop-down button.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.#ctor">
            <summary>
            Constructs a new button for an editing control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.InitializeButtons">
            <summary>
            Initializes the control elements.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.BackColor">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.PaintBackColor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the background color.
            </summary>
            <param name="g">Graphics device</param>
            <param name="r">Rectangle boundary of the area</param>
        </member>
        <member name="P:FarPoint.Win.SEditButton.SpinVisible">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.PopupVisible">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.VisualStyles">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.DropdownVisible">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.SlideVisible">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.UpdateClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.AdjustClientArea">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.ToggleState">
            <summary>
            Toggles the state of the control. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.SpecialResetState">
            <summary>
            Resets the control to a specific state.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.DoMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse up processing.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SEditButton.spinUpDelegate">
            <summary>
            Internal use only. Handles spin up.
            </summary>
            <param name="spinButton">Spin button</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.SpinUpProc">
            <summary>
            Internal use only. SpinUp thread procedure.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SEditButton.spinDownDelegate">
            <summary>
            Internal use only. Handles spin down.
            </summary>
            <param name="spinButton">Spin button</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.SpinDownProc">
            <summary>
            Internal use only. SpinDown thread procedure
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnSpinUpMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is pressed on the spin button.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnSpinDownMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is pressed on a spin button.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnSpinUpMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is released on spin up.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnSpinDownMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is released on spin down.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnDropDownMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is pressed on drop-down.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnPopUpMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is pressed on pop-up.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="T:FarPoint.Win.SEditButton.slideLeftDelegate">
            <summary>
            Internal use only. Handles slide right.
            </summary>
            <param name="slideButton">Slide button</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.SlideLeftProc">
            <summary>
            Internal use only. SlideLeft thread procedure.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SEditButton.slideRightDelegate">
            <summary>
            Internal use only. Handles slide right.
            </summary>
            <param name="slideButton">Slide button</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.SlideRightProc">
            <summary>
            Internal use only. SlideRight thread procedure.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnSlideLeftMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is pressed on slide left.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnSlideRightMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is pressed on slide right.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnSlideLeftMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is released on slide left.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnSlideRightMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is released on slide right.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnPopUpMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is released on pop-up.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.OnDropDownMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the mouse is released on drop-down.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SEditButton.Dispose">
            <summary>
            Disposes and frees up resources.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SEditButton.IsDisposed">
            <summary>
            Internal use only. Gets whether disposed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SEditButton.Dispose(System.Boolean)">
            <summary>
            Disposes and frees up resources.
            </summary>
            <param name="disposing">Whether disposing</param>
        </member>
        <member name="T:FarPoint.Win.IEditorImeSenteceModeSupport">
            <summary>
            Interface that defines the methods and properties required by objects 
            used for allowing arrows to move the active cell.
            </summary>
        </member>
        <member name="P:FarPoint.Win.IEditorImeSenteceModeSupport.ImeSentenceMode">
            <summary>
            Gets and sets IME sentence mode.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ImeSentenceMode">
            <summary>
              Determines how the IME should handle sentences.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ImeSentenceMode.Inherit">
            <summary>
              Inherits the IME sentence mode of the parent control.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ImeSentenceMode.NoControl">
            <summary>
              Does not control the IME sentence mode.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ImeSentenceMode.Normal">
            <summary>
              Uses phrase information to predict the next character.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ImeSentenceMode.BiasForNames">
            <summary>
              The IME uses plural clause information to carry out conversion processing.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ImeSentenceMode.BiasForSpeech">
            <summary>
              The IME uses conversation mode. This is useful for chat applications.
            </summary>
        </member>
        <member name="F:FarPoint.Win.ImeSentenceMode.Direct">
            <summary>
              No information for sentence.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IVerticalAlignmentSupport">
            <summary>
            Interface that supports vertical alignment to the editor control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IVerticalAlignmentSupport.UpdateEditorBounds">
            <summary>
              Updates the editor editor bounds.
            </summary>
        </member>
        <member name="P:FarPoint.Win.IVerticalAlignmentSupport.AllowEditorVerticalAlignment">
            <summary>
            Gets or sets whether to allow vertical alignment.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IInputScopeSupport">
            <summary>
            Interface that supports setting InputScopeNameValue to the editor control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IInputScopeSupport.InputScope(FarPoint.Win.InputScopeNameValue)">
            <summary>
            Sets the InputScopeNameValue value to the editor control.
            </summary>
            <param name="inputScopeNameValue"></param>
        </member>
        <member name="T:FarPoint.Win.InputScopeNameValue">
            <summary>
              Specifies the input scope name which modifies how input from alternative input methods is interpreted.
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.Inherit">
            <summary>
            Specifies the property is not set and gets the value from the parent.
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.Default">
            <summary>
            Specifies the default handling of input commands and that input status is determined by ImeMode and ImeSentenceMode. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.Url">
            <summary>
            Specifies the text input pattern for an Uniform Resource Locator (URL). 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.EmailSmtpAddress">
            <summary>
            Specifies the text input pattern for a Simple Mail Transfer Protocol (SMTP) email address. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.Number">
            <summary>
            Specifies the text input pattern for a number. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.TelephoneNumber">
            <summary>
            Specifies the text input pattern for a telephone number. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.NumberFullWidth">
            <summary>
            Specifies the text input pattern for a full-width number. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.AlphanumericHalfWidth">
            <summary>
            Specifies the text input pattern for alphanumeric half-width characters. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.AlphanumericFullWidth">
            <summary>
            Specifies the text input pattern for alphanumeric full-width characters. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.Hiragana">
            <summary>
            Specifies the text input pattern for the Hiragana writing system.
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.KatakanaHalfWidth">
            <summary>
            Specifies the text input pattern for half-width Katakana characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.KatakanaFullWidth">
            <summary>
            Specifies the text input pattern for full-width Katakana characters. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.Hanja">
            <summary>
            Specifies the text input pattern for Hanja characters. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.HanjaHalfWidth">
            <summary>
            Specifies the text input pattern for Hangul half-width characters. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.HanjaFullWidth">
            <summary>
            Specifies the text input pattern for Hangul full-width characters. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.InputScopeNameValue.Search">
            <summary>
             Specifies the text input pattern for a search query. 
            </summary>
        </member>
        <member name="T:FarPoint.Win.spreadImeHelper">
            <summary>
            Describes the Spread IME helper.
            </summary>
        </member>
        <member name="M:FarPoint.Win.spreadImeHelper.#ctor">
            <summary>
            Creates an instance of <see cref="T:FarPoint.Win.spreadImeHelper"/>.
            </summary>
        </member>
        <member name="T:FarPoint.Win.spreadImeHelper.ImeModeConversion">
            <summary>
              Defines a class used to convert ImeMode to ImeConversionMode or convert ImeConversionMode to ImeMode.
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadImeHelper.ImeModeConversion.JapaneseTable">
            <summary>
              Defines a Japanese conversion table.
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadImeHelper.ImeModeConversion.KoreanTable">
            <summary>
              Defines a Korean conversion table.
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadImeHelper.ImeModeConversion.ChineseTable">
            <summary>
              Defines a Chinese conversion table.
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadImeHelper.ImeModeConversion.UnsupportedTable">
            <summary>
              Defines an empty conversion table.
            </summary>
        </member>
        <member name="P:FarPoint.Win.spreadImeHelper.ImeModeConversion.InputLanguageTable">
            <summary>
              Gets the conversion table based on the current input language.
            </summary>
            <value>
              The conversion table based on the language.
            </value>
        </member>
        <member name="M:FarPoint.Win.spreadImeHelper.SetOpenStatus(System.Boolean,System.IntPtr)">
            <summary>
            Gets the IME mode of the control.
            </summary>
            <param name="handle">The control handle to get</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.spreadImeHelper.Disable(System.IntPtr)">
            <summary>
            Disables the specified IME.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:FarPoint.Win.spreadImeHelper.Enable(System.IntPtr)">
            <summary>
            Enables the specified IME.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:FarPoint.Win.spreadImeHelper.SetImeStatus(System.Windows.Forms.ImeMode,System.IntPtr)">
            <summary>
            Sets the status of the specified IME.
            </summary>
            <param name="imeMode"></param>
            <param name="handle"></param>
        </member>
        <member name="M:FarPoint.Win.spreadImeHelper.IsOpen(System.IntPtr)">
            <summary>
            Returns a value that indicates whether the specified IME is open.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.spreadImeHelper.GetImeMode(System.IntPtr)">
            <summary>
            Returns the mode of the specified IME.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.spreadImeHelper.GetImeSentenceMode(System.IntPtr)">
            <summary>
            Gets the ImeSentence mode.
            </summary>
            <param name="handle">The control handle to get</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.spreadImeHelper.SetImeSentenceMode(System.IntPtr,FarPoint.Win.ImeSentenceMode)">
            <summary>
            Sets the IME sentence mode for a handle.
            </summary>
            <param name="handle">The control handle to set</param>
            <param name="sentenceMode">The sentence mode to set</param>
        </member>
        <member name="T:FarPoint.Win.spreadIme">
            <summary>
            Spread ime class
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Language">
            <summary>
              Language mask.
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Alphanumeric">
            <summary>
              Alphanumeric mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Native">
            <summary>
              Native mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Chinese">
            <summary>
              Chinese mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Hangeul">
            <summary>
              Hangeul mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Hangul">
            <summary>
              Hangul mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Japanese">
            <summary>
              Japanese mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Katakana">
            <summary>
              Katakana mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.FullShape">
            <summary>
              Full shape mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Roman">
            <summary>
              Roman input mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.CharCode">
            <summary>
              Character code input mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Hanja">
            <summary>
              Hanja convert mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.SoftBoard">
            <summary>
              Soft Keyboard mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.NoConversion">
            <summary>
              Prevent processing of conversions by IME
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Eudc">
            <summary>
              Eudc conversion mode
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeConversionMode.Symbol">
            <summary>
              Symbol conversion mode
            </summary>
        </member>
        <member name="T:FarPoint.Win.spreadIme.ImeSentenceMode">
            <summary>
            Ime sentence Mode enum
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeSentenceMode.None">
            <summary>
              No information for sentence.
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeSentenceMode.PluralClause">
            <summary>
              The IME uses plural clause information to carry out conversion processing.
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeSentenceMode.SingleConvert">
            <summary>
              The IME carries out conversion processing in single-character mode.
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeSentenceMode.Automatic">
            <summary>
              The IME carries out conversion processing in automatic mode.
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeSentenceMode.PhrasePredict">
            <summary>
              The IME uses phrase information to predict the next character.
            </summary>
        </member>
        <member name="F:FarPoint.Win.spreadIme.ImeSentenceMode.Conversation">
            <summary>
              The IME uses conversation mode. This is useful for chat applications.
            </summary>
        </member>
        <member name="M:FarPoint.Win.spreadIme.GetImeConversionMode(System.IntPtr)">
            <summary>
            get conversion mode
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.spreadIme.GetImeSentenceMode(System.IntPtr)">
            <summary>
            Gets the IME sentence mode.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.spreadIme.SetImeSentenceMode(System.IntPtr,FarPoint.Win.spreadIme.ImeSentenceMode)">
            <summary>
            Sets the IME sentence mode.
            </summary>
            <param name="handle"></param>
            <param name="mode"></param>
        </member>
        <member name="T:FarPoint.Win.NavButton">
            <summary>Specifies the navigation buttons.</summary>
        </member>
        <member name="F:FarPoint.Win.NavButton.Home">
            <summary>Moves the first tab into view</summary>
        </member>
        <member name="F:FarPoint.Win.NavButton.Previous">
            <summary>Moves to previous tab</summary>
        </member>
        <member name="F:FarPoint.Win.NavButton.Next">
            <summary>Moves to next tab</summary>
        </member>
        <member name="F:FarPoint.Win.NavButton.End">
            <summary>Moves the last tab into view</summary>
        </member>
        <member name="T:FarPoint.Win.TabManagerChangeAction">
            <summary>
            Specifies the change action for the tabs.
            </summary>
        </member>
        <member name="F:FarPoint.Win.TabManagerChangeAction.RefreshAll">
            <summary>Refreshes all</summary>
        </member>
        <member name="F:FarPoint.Win.TabManagerChangeAction.RefreshAllTabs">
            <summary>Refreshes all tabs</summary>
        </member>
        <member name="F:FarPoint.Win.TabManagerChangeAction.RefreshTabs">
            <summary>Refreshes tabs</summary>
        </member>
        <member name="F:FarPoint.Win.TabManagerChangeAction.RefreshTab">
            <summary>Refreshes tab</summary>
        </member>
        <member name="F:FarPoint.Win.TabManagerChangeAction.SelectTab">
            <summary>Selects tab</summary>
        </member>
        <member name="T:FarPoint.Win.TabStripSelectEventArgs">
            <summary>
            Represents the event data for TabStripSelect event.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStripSelectEventArgs.SelectedTab">
            <summary>
            Gets the index of the selected tab.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStripSelectEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel.
            </summary>
        </member>
        <member name="T:FarPoint.Win.TabStripSelectEventHandler">
            <summary>
            Delegate that handles TabStripSelect event.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="T:FarPoint.Win.TabStripNavigateEventArgs">
            <summary>
            Represents the event data for the TabStripNavigate event.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStripNavigateEventArgs.PreviousLeftTab">
            <summary>Gets the previous left tab.</summary>
        </member>
        <member name="P:FarPoint.Win.TabStripNavigateEventArgs.NewLeftTab">
            <summary>Gets the next left tab.</summary>
        </member>
        <member name="T:FarPoint.Win.TabStripNavigateEventHandler">
            <summary>
            Delegate that handles TabStripNavigate events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:FarPoint.Win.TabOrientation">
            <summary>
            Specifies where the tabs display.
            </summary>
        </member>
        <member name="F:FarPoint.Win.TabOrientation.Top">
            <summary>Displays the tabs at the top</summary>
        </member>
        <member name="F:FarPoint.Win.TabOrientation.Bottom">
            <summary>Displays the tabs at the bottom</summary>
        </member>
        <member name="F:FarPoint.Win.TabOrientation.Left">
            <summary>Displays the tabs at the left</summary>
        </member>
        <member name="F:FarPoint.Win.TabOrientation.Right">
            <summary>Displays the tabs at the right</summary>
        </member>
        <member name="T:FarPoint.Win.DefaultTabShape">
            <summary>
            Specifies the default tab shape.
            </summary>
        </member>
        <member name="F:FarPoint.Win.DefaultTabShape.Square">
            <summary>Displays the tab as square</summary>
        </member>
        <member name="F:FarPoint.Win.DefaultTabShape.Rounded">
            <summary>Displays the tab as rounded</summary>
        </member>
        <member name="F:FarPoint.Win.DefaultTabShape.Angled">
            <summary>Displays the tab as angled</summary>
        </member>
        <member name="T:FarPoint.Win.TabStrip">
            <summary>
            Represents the tab strip.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.#ctor">
            <summary>
            Initializes a new TabStrip object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.#ctor(FarPoint.Win.ITabManager)">
            <summary>
            Initializes a new TabStrip object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.ShowNavButtons">
            <summary>
            Gets or sets whether the tab strip displays buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.SelectedTabOutlineColor">
            <summary>
            Gets or sets the outline color of the selected tab.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.DefaultTabShape">
            <summary>
            Gets or sets the default tab shape.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.ActiveTabInflate">
            <summary>
            Gets or sets whether the active tab appears larger than the other tabs.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.Orientation">
            <summary>
            Gets or sets the tab strip orientation.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.SelectedTabBackColor">
            <summary>
            Gets or sets the background color of the selected tab.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.SelectedTabForeColor">
            <summary>
            Gets or sets the text color of the selected tab.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.ButtonBackColor">
            <summary>
            Gets or sets the background color of the tab strip buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.ButtonForeColor">
            <summary>
            Gets or sets the foreground color of the tab strip buttons.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.DrawControlBorder">
            <summary>
            Gets or sets whether to draw the border around the control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.BackColor">
            <summary>
            Gets or sets the background color for the tab strip.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.ForeColor">
            <summary>
            Gets or sets the text color for the tabs.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.Font">
            <summary>
            Gets or sets the font properties for the text in the tabs.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabPicture(System.Int32)">
            <summary>
            Gets the picture displayed in the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabPicture(System.Int32,FarPoint.Win.Picture)">
            <summary>
            Sets the picture to display in the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabShape(System.Int32)">
            <summary>
            Gets the shape of the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabShape(System.Int32,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Sets the shape of the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabFont(System.Int32)">
            <summary>
            Gets the font of the specified tab.
            </summary>
            <param name="index">Tab index</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabBackColor(System.Int32)">
            <summary>
            Gets the background color of the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabForeColor(System.Int32)">
            <summary>
            Gets the text color of the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabFont(System.Int32,System.Drawing.Font)">
            <summary>
            Sets the font settings for the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabBackColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the background color for the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabForeColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the text color for the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabText(System.Int32,System.String)">
            <summary>
            Sets the text displayed in the specified tab.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.Count">
            <summary>
            Gets or sets the number of tabs.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabStrip.SelectedTab">
            <summary>
            Gets or sets the active tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.RefreshAllTabs">
            <summary>
            Redraws all tabs in the tab strip.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.RefreshTabs(System.Int32,System.Int32)">
            <summary>
            Redraws the range of tabs between the specified tabs.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.RefreshTab(System.Int32)">
            <summary>
            Redraws the specified tab.
            </summary>
            <param name="index">Tab index</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SelectTab(System.Int32,System.Int32)">
            <summary>
            Selects the range of tabs between the specified tabs.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaint - Paints the tabstrip control
            </summary>
            <param name="e">PaintEventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabText(System.Int32)">
            <summary>
            Gets the text displayed in the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.GetTabRectangle(System.Int32)">
            <summary>
            Gets the rectangle for the specified tab.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnSizeChanged(System.EventArgs)">
            <summary>
            Occurs when the size has changed.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.CalculateTabLayout(System.Drawing.Graphics,System.Boolean)">
            <summary>
            CalculateTabLayout
            </summary>
            <param name="g">Graphics device</param>
            <param name="adjustLayout">Whether to adjust the layout</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.DrawTabs(System.Windows.Forms.PaintEventArgs)">
            DrawTabs - Compute the tab layout and paint the tabs
            The tab layout is computed going left-to-right and then the tabs are
            painted right-to-left to take care of painting issues with the overlapped tabs.
            <summary>
            Draws the tabs after computing the tab layout.
            </summary>
            <param name="e">PaintEventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.DrawNavArrow(FarPoint.Win.NavButton,System.Windows.Forms.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            Draws the navigation button arrows.
            </summary>
            <param name="navbutton">Navigation button</param>
            <param name="e">PaintEventArgs object containing the event data</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.DrawNavButtons(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the navigation buttons.
            </summary>
            <param name="e">PaintEventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.SetTabInsertionBar(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets the tab insertion bar.
            </summary>
            <param name="hitTestTab">Integer tab index</param>
            <param name="rightOfTabs">Whether to set it to the right of the tabs</param>
            <param name="setBar">Whether to set the bar</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.HitTestNavButton(System.Drawing.Point)">
            <summary>
            Determines which navigation button the mouse is over.
            </summary>
            <param name="pt">Point</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.HitTestNavButton(System.Int32)">
            <summary>
            Determines which navigation button is pressed.
            </summary>
            <param name="x">Index of tab</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.HitTestTab(System.Drawing.Point,System.Boolean@)">
            <summary>
            Determines the selected tab index.
            </summary>
            <param name="pt">Point</param>
            <param name="rightOfTabs">Whether right of tabs</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MouseOverNavButton(System.Drawing.Point)">
            <summary>
            Gets the coordinates of the pointer.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MouseOverTab(System.Drawing.Point)">
            <summary>
            Gets the coordinates of the pointer.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.HitTestTab(System.Drawing.Point)">
            <summary>
            Determines the selected tab index.
            </summary>
            <param name="pt">Point</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MovePreviousEvent(System.Object,System.EventArgs)">
            <summary>
            MovePreviousEvent
            </summary>
            <param name="o">Object source of event</param>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MoveNextEvent(System.Object,System.EventArgs)">
            <summary>
            MoveNextEvent
            </summary>
            <param name="o">Object source of event</param>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MoveFirst">
            <summary>
            MoveFirst - Moves to the first tab
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MovePrevious">
            <summary>
            MovePrevious - Moves to the previous tab
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MoveNext">
            <summary>
            MoveNext - Moves to the next tab
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MoveLast">
            <summary>
            MoveLast - Moves to the last tab
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            OnKeyDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseDown
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseMove
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseUp
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.OnResize(System.EventArgs)">
            <summary>
            OnResize - Override the resize event
            </summary>
            <param name="e">EventArgs object containing the event data</param>
        </member>
        <member name="M:FarPoint.Win.TabStrip.MoveTab(System.Int32,System.Int32)">
            <summary>
            Moves the specified tab to a new position in the tab strip.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.Finalize">
            <summary>
            Finalizes
            </summary>
        </member>
        <member name="E:FarPoint.Win.TabStrip.TabStripSelect">
            <summary>
            Represents the method that handles the TabStripSelect event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.FireTabStripSelect(System.Int32,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Internal use only.
            </summary>
            <param name="selectedTab"></param>
            <param name="scrollLeft"></param>
            <param name="scrollRight"></param>
            <param name="cancel"></param>
        </member>
        <member name="E:FarPoint.Win.TabStrip.TabStripNavigate">
            <summary>
            Represents the method that handles the TabStripNavigate event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.FireTabStripNavigate">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabStrip.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>
            <param name="m"></param>
        </member>
        <member name="T:FarPoint.Win.TabManagerChangeEventArgs">
            <summary>
            Represents the event data for the TabManagerChange event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabManagerChangeEventArgs.#ctor(FarPoint.Win.TabManagerChangeAction,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:FarPoint.Win.TabManagerChangeEventArgs.#ctor(FarPoint.Win.TabManagerChangeAction,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="P:FarPoint.Win.TabManagerChangeEventArgs.TabIndex">
            <summary></summary>
        </member>
        <member name="P:FarPoint.Win.TabManagerChangeEventArgs.TabIndex1">
            <summary></summary>
        </member>
        <member name="P:FarPoint.Win.TabManagerChangeEventArgs.TabIndex2">
            <summary></summary>
        </member>
        <member name="P:FarPoint.Win.TabManagerChangeEventArgs.TabAction">
            <summary></summary>
        </member>
        <member name="T:FarPoint.Win.TabManagerChangeEventHandler">
            <summary>
            Delegate that handles the TabManagerChange events.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="T:FarPoint.Win.ITabManager">
            <summary>
            Interface that provides the information for painting sheet tabs.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ITabManager.TabBackColor">
            <summary>Gets or sets the background color of the tab.</summary>
        </member>
        <member name="P:FarPoint.Win.ITabManager.TabForeColor">
            <summary>Gets or sets the text color of the tab.</summary>
        </member>
        <member name="P:FarPoint.Win.ITabManager.TabFont">
            <summary>Gets or sets the font of the tab.</summary>
        </member>
        <member name="P:FarPoint.Win.ITabManager.TabCount">
            <summary>Gets or sets the number of tabs.</summary>
        </member>
        <member name="P:FarPoint.Win.ITabManager.SelectedTab">
            <summary>Gets or sets the index of the active tab.</summary>
        </member>
        <member name="P:FarPoint.Win.ITabManager.TabStrip">
            <summary>Gets or sets the tab strip.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.GetTabFont(System.Int32)">
            <summary>Gets the font of the tab.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.SetTabFont(System.Int32,System.Drawing.Font)">
            <summary>Sets the font of the tab.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.GetTabText(System.Int32)">
            <summary>Gets the text of the tab.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.SetTabText(System.Int32,System.String)">
            <summary>Sets the text of the tab.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.GetTabBackColor(System.Int32)">
            <summary>Gets the background color of the tab.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.SetTabBackColor(System.Int32,System.Drawing.Color)">
            <summary>Sets the background color of the tab.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.GetTabForeColor(System.Int32)">
            <summary>Gets the text color of the tab.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.SetTabForeColor(System.Int32,System.Drawing.Color)">
            <summary>Sets the text color of the tab.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.GetTabShape(System.Int32)">
            <summary>Gets tab shape.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.SetTabShape(System.Int32,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>Sets tab shape.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.GetTabPicture(System.Int32)">
            <summary>Gets the picture of the tab.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.SetTabPicture(System.Int32,FarPoint.Win.Picture)">
            <summary>Sets the picture of the tab.</summary>
        </member>
        <member name="M:FarPoint.Win.ITabManager.TabMove(System.Int32,System.Int32)">
            <summary>Moves to a new tab.</summary>
        </member>
        <member name="E:FarPoint.Win.ITabManager.TabManagerChange">
            <summary>Tab manager change.</summary>
        </member>
        <member name="T:FarPoint.Win.TabManager">
            <summary>
            Represents the tab manager.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabManager.#ctor">
            <summary>
            Creates a new tab manager with default values.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabManager.#ctor(FarPoint.Win.TabStrip)">
            <summary>
            Creates a new tab manager for the specified tab strip.
            </summary>
            <param name="tabs">Tab strip</param>
        </member>
        <member name="P:FarPoint.Win.TabManager.TabStrip">
            <summary>
            Gets or sets a tab strip.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabManager.TabCount">
            <summary>
            Gets or sets the number of tabs.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabManager.SelectedTab">
            <summary>
            Gets or sets the index of the active tab.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabManager.TabBackColor">
            <summary>
            Gets or sets the background color of the tab.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabManager.TabForeColor">
            <summary>
            Gets or sets the text color of the tab.
            </summary>
        </member>
        <member name="P:FarPoint.Win.TabManager.TabFont">
            <summary>
            Gets or sets the font of the tab text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabManager.GetTextDirect(System.Int32)">
            <summary>
            Gets the text.
            </summary>
            <param name="index">Tab index</param>
        </member>
        <member name="M:FarPoint.Win.TabManager.GetTabPicture(System.Int32)">
            <summary>
            Gets the picture.
            </summary>
            <param name="index">Tab index</param>
        </member>
        <member name="M:FarPoint.Win.TabManager.SetTabPicture(System.Int32,FarPoint.Win.Picture)">
            <summary>
            Sets the picture.
            </summary>
            <param name="index">Tab index</param>
            <param name="newPicture"></param>
        </member>
        <member name="M:FarPoint.Win.TabManager.GetTabText(System.Int32)">
            <summary>
            Gets the text.
            </summary>
            <param name="index">Tab index</param>
        </member>
        <member name="M:FarPoint.Win.TabManager.SetTabText(System.Int32,System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="index">Tab index</param>
            <param name="newText"></param>
        </member>
        <member name="M:FarPoint.Win.TabManager.SetTabFont(System.Int32,System.Drawing.Font)">
            <summary>
            Sets the font.
            </summary>
            <param name="index">Tab index</param>
            <param name="newFont"></param>
        </member>
        <member name="M:FarPoint.Win.TabManager.GetTabFont(System.Int32)">
            <summary>
            Gets the font.
            </summary>
            <param name="index">Tab index</param>
        </member>
        <member name="M:FarPoint.Win.TabManager.GetTabBackColor(System.Int32)">
            <summary>
            Gets the background color of the tab.
            </summary>
            <param name="index">Tab index</param>
        </member>
        <member name="M:FarPoint.Win.TabManager.GetTabForeColor(System.Int32)">
            <summary>
            Gets the text color of the tab.
            </summary>
            <param name="index">Tab index</param>
        </member>
        <member name="M:FarPoint.Win.TabManager.SetTabBackColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the background color of the tab.
            </summary>
            <param name="index">Tab index</param>
            <param name="newColor"></param>
        </member>
        <member name="M:FarPoint.Win.TabManager.SetTabForeColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the text color of the tab.
            </summary>
            <param name="index">Tab index</param>
            <param name="newColor"></param>
        </member>
        <member name="M:FarPoint.Win.TabManager.GetTabShape(System.Int32)">
            <summary>
            Gets the shape of the tab.
            </summary>
            <param name="index">Tab index</param>
        </member>
        <member name="M:FarPoint.Win.TabManager.SetTabShape(System.Int32,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Sets the shape of the tab.
            </summary>
            <param name="index">Tab index</param>
            <param name="newShape"></param>
        </member>
        <member name="M:FarPoint.Win.TabManager.DeleteTab(System.Int32)">
            <summary>
            Deletes a tab.
            </summary>
            <param name="index">Tab index</param>
        </member>
        <member name="M:FarPoint.Win.TabManager.InsertTab(System.Int32,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,System.Drawing.Drawing2D.GraphicsPath,FarPoint.Win.Picture)">
            <summary>
            Inserts a tab.
            </summary>
            <param name="index">Tab index</param>
            <param name="text"></param>
            <param name="bColor"></param>
            <param name="fColor"></param>
            <param name="tFont"></param>
            <param name="shape"></param>
            <param name="picture"></param>
        </member>
        <member name="M:FarPoint.Win.TabManager.TabMove(System.Int32,System.Int32)">
            <summary>
            Moves a tab.
            </summary>
            <param name="index">Tab index</param>
            <param name="newIndex"></param>
        </member>
        <member name="E:FarPoint.Win.TabManager.TabManagerChange">
            <summary>
            Occurs when tab manager changes.
            </summary>
        </member>
        <member name="M:FarPoint.Win.TabManager.OnTabManagerChange(System.Object,FarPoint.Win.TabManagerChangeEventArgs)">
            <summary>
            Occurs when the tab manager changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FarPoint.Win.TabManager.FireTabManagerChange(FarPoint.Win.TabManagerChangeAction,System.Int32)">
            <summary>
            Internal use only.
            </summary>
            <param name="action"></param>
            <param name="index">Tab index</param>
        </member>
        <member name="T:FarPoint.Win.CaptionsArrayList">
            <summary>
            Represents an array of textual captions.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.#ctor">
            <summary>
            Creates an array representing the captions that are available for the user.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.#ctor(System.Collections.ArrayList,System.String)">
            <summary>
            Creates an array representing the captions that are available for the user.
            </summary>
            <param name="captions">Array list of captions</param>
            <param name="listName">List name</param>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.#ctor(System.String)">
            <summary>
            Creates an array representing the captions that are available for the user.
            </summary>
            <param name="listName">List name</param>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.#ctor(System.Collections.ArrayList)">
            <summary>
            Creates an array representing the captions that are available for the user.
            </summary>
            <param name="captions">Array list of captions</param>
        </member>
        <member name="P:FarPoint.Win.CaptionsArrayList.Count">
            <summary>
            Gets the number of captions in the array.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CaptionsArrayList.Item(System.Int32)">
            <summary>
            Gets the caption at the specified index within the array.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CaptionsArrayList.List">
            <summary>
            Gets or sets a list of captions.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.Find(System.String)">
            <summary>
            Finds a caption in the array that matches the specified name.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.Add(System.String)">
            <summary>
            Adds a caption to the array and returns its index.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.Clear">
            <summary>
            Clears all the captions.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.Remove(System.String)">
            <summary>
            Removes a caption.
            </summary>
            <param name="caption">Caption</param>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.RemoveAt(System.Int32)">
            <summary>
            Removes a caption at a specified position.
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.GetEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets the enumerator at the specified position.
            </summary>
            <param name="index">Index</param>
            <param name="count">Number</param>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.CaptionsArrayList.Clone">
            <summary>
            Creates a copy of a list.
            </summary>
        </member>
        <member name="T:FarPoint.Win.IPersist">
            <summary>
            Interface that persists.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IPersist.Save">
            <summary>
            Saves.
            </summary>
        </member>
        <member name="M:FarPoint.Win.IPersist.Load">
            <summary>
            Loads.
            </summary>
        </member>
        <member name="T:FarPoint.Win.EnumeratedType">
            <summary>
            Specifies the type of cell.
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.General">
            <summary>
            General cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.DateTime">
            <summary>
            Date-time-formatted cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Number">
            <summary>
            Numeric cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.PicMask">
            <summary>
            Mask input cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Button">
            <summary>
            Button cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.CheckBox">
            <summary>
            Check box cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Slider">
            <summary>
            Slider (task bar) cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Combo">
            <summary>
            Combo box cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Hyperlink">
            <summary>
            Hyperlink cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Progress">
            <summary>
            Progress indicator cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.MultiOption">
            <summary>
            Multiple option button cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Percent">
            <summary>
            Percent-formatted numeric cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Currency">
            <summary>
            Currency-formatted numeric cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Text">
            <summary>
            Text cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.ColumnHeader">
            <summary>
            Column header cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.RowHeader">
            <summary>
            Row header cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.RichText">
            <summary>
            RichText cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.CustomBase">
            <summary>
            Custom cell
            </summary>    
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.BarCode">
            <summary>
            Barcode cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.ColorPicker">
            <summary>
            Color picker cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.Empty">
            <summary>
            Empty cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.FilterBar">
            <summary>
            FilterBar cell
            </summary>
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.MultiColumnComboBox">
            <summary>
            MultiColumnComboBox cell
            </summary>    
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.GcCharMask">
            <summary>
            GcCharMask cell
            </summary>    
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.GcComboBox">
            <summary>
            GcComboBox cell
            </summary>    
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.GcDateTime">
            <summary>
            GcDateTime cell
            </summary>    
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.GcMask">
            <summary>
            GcMask cell
            </summary>    
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.GcNumber">
            <summary>
            GcNumber cell
            </summary>    
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.GcTextBox">
            <summary>
            GcTextBox cell
            </summary>    
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.GcTimeSpan">
            <summary>
            GcTimeSpan cell
            </summary>    
        </member>
        <member name="F:FarPoint.Win.EnumeratedType.ListBox">
            <summary>
            Litbox cell
            </summary>    
        </member>
        <member name="T:FarPoint.Win.CustomTypes">
            <summary>
            Represents a collection of custom cell types.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CustomTypes.#ctor">
            <summary>
            Creates a collection representing the custom editors that
            are available for the user.
            </summary>
        </member>
        <member name="P:FarPoint.Win.CustomTypes.Count">
            <summary>
            Gets the number of custom cell types in the collection.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CustomTypes.Clear">
            <summary>
            Adds a custom cell type to the collection and returns its index.
            </summary>
        </member>
        <member name="M:FarPoint.Win.CustomTypes.RemoveAt(System.Int32)">
            <summary>
            Removes a custom cell type from the collection at the specified index.
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:FarPoint.Win.CustomTypes.GetEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets the enumerator as the specified position.
            </summary>
            <param name="index">Index</param>
            <param name="count">Number</param>
        </member>
        <member name="M:FarPoint.Win.CustomTypes.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ITouchEditor">
            <summary>
            Interface that defines properties and methods to support to show grip editor when editing in touch mode.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ITouchEditor.ShowGrippers">
            <summary>
            Gets or sets whether to show grippers when inputting by touch.
            </summary>
            <value>
            <see langword="true" /> to show grippers when inputting by touch; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:FarPoint.Win.ITouchEditorSupport.CanShowSelectionGripper">
            <summary>
            Gets Can Show selection gripper or not.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ITouchEditorSupport.SelectionGripperLength">
            <summary>
            Return selection gripper length.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.TexboxTouchHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:FarPoint.Win.TexboxTouchHelper.GetColumn(System.Windows.Forms.TextBoxBase,System.Int32)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.TexboxTouchHelper.GetPositionFromCharIndexInternal(System.Windows.Forms.TextBoxBase,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.TexboxTouchHelper.getSizeOfChacter(System.Windows.Forms.TextBoxBase,System.Char)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.TexboxTouchHelper.ValidatePosition(System.Windows.Forms.TextBoxBase,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.TexboxTouchHelper.GetColumnIndex(System.Windows.Forms.TextBoxBase,FarPoint.Win.LocationChangedEventArgs,System.Int32)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="e"></param>
            <param name="currentMoveIndex"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.TexboxTouchHelper.MakeLParam(System.Int32,System.Int32)">
            <summary>
            MakeLParam Macro
            </summary>
        </member>
        <member name="M:FarPoint.Win.PlusPakUnsafeNativeMethods.ShowWindow(System.IntPtr,System.UInt32)">
            <summary>
              The ShowWindow Function.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PlusPakUnsafeNativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
              The SetWindowPos function changes the size, position, and Z order of a child, pop-up, 
              or top-level window. Child, pop-up, and top-level windows are ordered according to their appearance 
              on the screen. The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">
              [in] Handle to the window.
            </param>
            <param name="hWndInsertAfter">
              [in] Handle to the window to precede the positioned window in the Z order.
            </param>
            <param name="x">
              [in] Specifies the new position of the left side of the window, in client coordinates.
            </param>
            <param name="y">
              [in] Specifies the new position of the top of the window, in client coordinates.
            </param>
            <param name="cx">
              [in] Specifies the new width of the window, in pixels.
            </param>
            <param name="cy">
              [in] Specifies the new height of the window, in pixels.
            </param>
            <param name="flags">
              [in] Specifies the window sizing and positioning flags.
            </param>
            <returns>
              If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:FarPoint.Win.PlusPakUnsafeNativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>The SelectObject Function.</summary>
        </member>
        <member name="M:FarPoint.Win.PlusPakUnsafeNativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
              The ReleaseDC function releases a device context (DC), freeing it for use by other applications.
            </summary>
            <param name="hWnd">
              [in] Handle to the window whose DC is to be released.
            </param>
            <param name="hDC">
              [in] Handle to the DC to be released.
            </param>
            <returns>
              The return value indicates whether the DC was released. If the DC was released, the return value is 1.
              If the DC was not released, the return value is zero.
            </returns>
        </member>
        <member name="M:FarPoint.Win.PlusPakUnsafeNativeMethods.DeleteObject(System.IntPtr)">
            <summary>The DeleteObject Function.</summary>
        </member>
        <member name="M:FarPoint.Win.PlusPakUnsafeNativeMethods.DeleteDC(System.IntPtr)">
            <summary>The DeleteDC Function.</summary>
        </member>
        <member name="M:FarPoint.Win.PlusPakUnsafeNativeMethods.IsWindowVisible(System.IntPtr)">
            <summary>The IsWindowVisible Function.</summary>
        </member>
        <member name="M:FarPoint.Win.PlusPakUnsafeNativeMethods.GetDC(System.IntPtr)">
            <summary>
              The GetDC function retrieves a handle to a display device context (DC) 
              for the client area of a specified window or for the entire screen.
            </summary>
            <param name="hWnd">
              [in] Handle to the window whose DC is to be retrieved. 
              If this value is NULL, GetDC retrieves the DC for the entire screen.
            </param>
            <returns>
              If the function succeeds, the return value is a handle to the DC for the specified window's client area.
              If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:FarPoint.Win.PlusPakUnsafeNativeMethods.CreateCompatibleDC(System.IntPtr)">
            <summary>The CreateCompatibleDC Function.</summary>
        </member>
        <member name="T:FarPoint.Win.PlusPakNativeMethods.SIZE">
            <summary>
              The SIZE structure specifies the width and height of a rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.SIZE.cx">
            <summary>
              Specifies the rectangle's width. The units depend on which function uses this.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.SIZE.cy">
            <summary>
              Specifies the rectangle's height. The units depend on which function uses this.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PlusPakNativeMethods.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs the SIZE structure.
            </summary>
            <param name="width">Specifies the size's width.</param>
            <param name="height">Specifies the size's height.</param>
        </member>
        <member name="T:FarPoint.Win.PlusPakNativeMethods.POINT">
            <summary>
              The POINT structure defines the x and y coordinates of a point.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.POINT.X">
            <summary>
              Specifies the x-coordinate of the point.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.POINT.Y">
            <summary>
              Specifies the y-coordinate of the point.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PlusPakNativeMethods.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs the POINT structure.
            </summary>
            <param name="x">
              Specifies the x-coordinate of the point.
            </param>
            <param name="y">
              Specifies the y-coordinate of the point.
            </param>
        </member>
        <member name="M:FarPoint.Win.PlusPakNativeMethods.POINT.#ctor(System.Drawing.Point)">
            <summary>
              Constructs the POINT structure.
            </summary>
            <param name="point">
              A point whith another type.
            </param>
        </member>
        <member name="T:FarPoint.Win.PlusPakNativeMethods.RECT">
            <summary>
              The RECT structure defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.RECT.Left">
            <summary>
              Specifies the x-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.RECT.Top">
            <summary>
              Specifies the y-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.RECT.Right">
            <summary>
              Specifies the x-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.RECT.Bottom">
            <summary>
              Specifies the y-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="M:FarPoint.Win.PlusPakNativeMethods.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs the RECT structure.
            </summary>
            <param name="left">
              Specifies the x-coordinate of the upper-left corner of a rectangle.
            </param>
            <param name="top">
              Specifies the y-coordinate of the upper-left corner of a rectangle.
            </param>
            <param name="right">
              Specifies the x-coordinate of the lower-right corner of a rectangle.
            </param>
            <param name="bottom">
              Specifies the y-coordinate of the lower-right corner of a rectangle.
            </param>
        </member>
        <member name="M:FarPoint.Win.PlusPakNativeMethods.RECT.#ctor(System.Drawing.Rectangle)">
            <summary>
              Constructs the RECT structure.
            </summary>
            <param name="rectangle">
              Specifies the rectangle
            </param>
        </member>
        <member name="M:FarPoint.Win.PlusPakNativeMethods.RECT.Offset(System.Int32,System.Int32)">
            <summary>
              Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="x">
              The horizontal offset.
            </param>
            <param name="y">
              The vertical offset.
            </param>
        </member>
        <member name="P:FarPoint.Win.PlusPakNativeMethods.RECT.Width">
            <summary>
              Gets the width.
            </summary>
            <value>
              The width of RECT.
            </value>
        </member>
        <member name="P:FarPoint.Win.PlusPakNativeMethods.RECT.Height">
            <summary>
              Gets the height.
            </summary>
            <value>
              The height of RECT.
            </value>
        </member>
        <member name="T:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC">
            <summary>
              The TEXTMETRIC structure contains basic information about a physical font. 
              All sizes are specified in logical units; that is, they depend on 
              the current mapping mode of the display context.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.Height">
            <summary>
              Specifies the height (ascent + descent) of characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.Ascent">
            <summary>
              Specifies the ascent (units above the base line) of characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.Descent">
            <summary>
              Specifies the descent (units below the base line) of characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.InternalLeading">
            <summary>
              Specifies the amount of leading (space) inside the bounds set by 
              the tmHeight member. Accent marks and other diacritical characters 
              may occur in this area. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.ExternalLeading">
            <summary>
              Specifies the amount of extra leading (space) that the application 
              adds between rows. Since this area is outside the font, it contains 
              no marks and is not altered by text output calls in either OPAQUE or 
              TRANSPARENT mode. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.AveCharWidth">
            <summary>
              Specifies the average width of characters in the font 
              (generally defined as the width of the letter x). This value 
              does not include the overhang required for bold or italic characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.MaxCharWidth">
            <summary>
              Specifies the width of the widest character in the font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.Weight">
            <summary>
              Specifies the weight of the font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.Overhang">
            <summary>
              Specifies the extra width per string that may be added to 
              some synthesized fonts. When synthesizing some attributes, 
              such as bold or italic, graphics device interface (GDI) or 
              a device may have to add width to a string on both a 
              per-character and per-string basis.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.DigitizedAspectX">
            <summary>
              Specifies the horizontal aspect of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.DigitizedAspectY">
            <summary>
              Specifies the vertical aspect of the device for which the font was designed. 
              The ratio of the tmDigitizedAspectX and tmDigitizedAspectY members is 
              the aspect ratio of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.FirstChar">
            <summary>
              Specifies the value of the first character defined in the font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.LastChar">
            <summary>
              Specifies the value of the last character defined in the font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.DefaultChar">
            <summary>
              Specifies the value of the character to be substituted for 
              characters not in the font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.BreakChar">
            <summary>
              Specifies the value of the character that will be used to 
              define word breaks for text justification.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.Italic">
            <summary>
              Specifies an italic font if it is nonzero.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.Underlined">
            <summary>
              Specifies an underlined font if it is nonzero.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.StruckOut">
            <summary>
              Specifies a strikeout font if it is nonzero.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.PitchAndFamily">
            <summary>
              Specifies information about the pitch, the technology, 
              and the family of a physical font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.PlusPakNativeMethods.TEXTMETRIC.CharSet">
            <summary>
              Specifies the character set of the font. The character set 
              can be one of the following values.
            </summary>
        </member>
        <member name="F:FarPoint.Win.LayeredWindow._bounds">
            <summary>
              Indicates the bounds of window.
            </summary>
        </member>
        <member name="F:FarPoint.Win.LayeredWindow._bitmap">
            <summary>
              Indicates the appearance of window.
            </summary>
        </member>
        <member name="F:FarPoint.Win.LayeredWindow._alphaBlend">
            <summary>
              Indicates the alpha blending level.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LayeredWindow.#ctor(System.Windows.Forms.Control)">
            <summary>
              Initializes the instance of <b>LayeredWindow</b>.
            </summary>
        </member>
        <member name="P:FarPoint.Win.LayeredWindow.CreateParams">
            <summary>
              Gets the required creation parameters when the window handle is created.
            </summary>
            <value>
              A <see cref="P:FarPoint.Win.LayeredWindow.CreateParams"/> object that contains the required creation
              parameters when the handle to the control is created.
            </value>
        </member>
        <member name="P:FarPoint.Win.LayeredWindow.Visible">
            <summary>
              Gets the visibility state of the window.
            </summary>
            <value>
              A <b>bool</b> value indicating whether the window is visible.
            </value>
        </member>
        <member name="P:FarPoint.Win.LayeredWindow.Bounds">
            <summary>
              Gets or sets a value indicating the bounds of window.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Rectangle"/> value indicates the bounds of window.
            </value>
        </member>
        <member name="P:FarPoint.Win.LayeredWindow.Location">
            <summary>
              Gets or sets a value indicating the location of window.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Point"/> value indicates the location of window.
            </value>
        </member>
        <member name="P:FarPoint.Win.LayeredWindow.Size">
            <summary>
              Gets or sets a value indicating the size of window.
            </summary>
            <value>
              A <see cref="P:FarPoint.Win.LayeredWindow.Size"/> value indicates the size of window.
            </value>
        </member>
        <member name="P:FarPoint.Win.LayeredWindow.Bitmap">
            <summary>
              Gets or sets a bitmap to draw the appearance of window.
            </summary>
            <value>
              A <see cref="P:FarPoint.Win.LayeredWindow.Bitmap"/> object used to draw the appearance of window.
            </value>
        </member>
        <member name="P:FarPoint.Win.LayeredWindow.AlphaBlend">
            <summary>
              Gets or sets the value indicating the alpha blending level.
            </summary>
            <value>
              An <b>int</b> value indicates the alpha blending level.
            </value>
        </member>
        <member name="M:FarPoint.Win.LayeredWindow.Hide">
            <summary>
              Conceals the window from the user.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LayeredWindow.SetBitmap(System.Drawing.Bitmap)">
            <summary>
              Sets a bitmap to the layered window to update it.
            </summary>
            <param name="bitmap">
              The <see cref="P:FarPoint.Win.LayeredWindow.Bitmap"/> to be set.
            </param>
        </member>
        <member name="T:FarPoint.Win.LicenseDialog">
            <summary>
            Represents a product licence dialog.
            </summary>
        </member>
        <member name="F:FarPoint.Win.LicenseDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LicenseDialog.#ctor(System.Object)">
            <summary>
            Creates a product license dialog.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:FarPoint.Win.LicenseDialog.#ctor">
            <summary>
            Creates a product license dialog.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LicenseDialog.LocalizeGUIStrings">
            <summary>
            Localize all GUI strings of this instance
            </summary>
        </member>
        <member name="M:FarPoint.Win.LicenseDialog.AllowPurchase">
            <summary>
            Allow the purchase of the product.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LicenseDialog.Agreed(System.Boolean)">
            <summary>
            Determines whether user agrees to the license.
            </summary>
            <param name="agreedToLicense">Whether user agrees to the license</param>
        </member>
        <member name="M:FarPoint.Win.LicenseDialog.SetProductText(System.String)">
            <summary>
            Sets the product text string.
            </summary>
            <param name="prodText">Product text string</param>
        </member>
        <member name="M:FarPoint.Win.LicenseDialog.IsBeta(System.Boolean,System.String)">
            <summary>
            Determines whether the license is for a beta product.
            </summary>
            <param name="beta">Whether beta</param>
            <param name="licenseText">License text string</param>
        </member>
        <member name="M:FarPoint.Win.LicenseDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LicenseDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FarPoint.Win.LicenseDialogGC">
            <summary>
            Represents a product licence dialog.
            </summary>
        </member>
        <member name="F:FarPoint.Win.LicenseDialogGC.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LicenseDialogGC.#ctor(System.Object)">
            <summary>
            Creates a product license dialog.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:FarPoint.Win.LicenseDialogGC.#ctor">
            <summary>
            Creates a product license dialog.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LicenseDialogGC.AllowPurchase">
            <summary>
            Allow the purchase of the product.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LicenseDialogGC.Agreed(System.Boolean)">
            <summary>
            Determines whether user agrees to the license.
            </summary>
            <param name="agreedToLicense">Whether user agrees to the license</param>
        </member>
        <member name="M:FarPoint.Win.LicenseDialogGC.SetProductText(System.String)">
            <summary>
            Sets the product text string.
            </summary>
            <param name="prodText">Product text string</param>
        </member>
        <member name="M:FarPoint.Win.LicenseDialogGC.IsBeta(System.Boolean,System.String)">
            <summary>
            Determines whether the license is for a beta product.
            </summary>
            <param name="beta">Whether beta</param>
            <param name="licenseText">License text string</param>
        </member>
        <member name="M:FarPoint.Win.LicenseDialogGC.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FarPoint.Win.LicenseDialogGC.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.LinePosition.LineIndex">
            <summary>
              Gets or sets the line index in editor.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.LinePosition.CharPosition">
            <summary>
              Gets or sets the character position in the line.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Touch.LinePosition.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the LinePosition struct.
            </summary>
            <param name="lineIndex">
              The line index in editor.
            </param>
            <param name="charPosition">
              The character position in the line in editor.
            </param>
        </member>
        <member name="P:FarPoint.Win.Touch.LinePosition.IsEmpty">
            <summary>
              Gets a value indicating whether it is empty.
            </summary>
            <value>
              A <b>bool</b> value indicates whther the LinePosition is empty.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.LinePosition.Empty">
            <summary>
              Gets a empty TextPosition.
            </summary>
            <value>
              A <see cref="T:FarPoint.Win.Touch.LinePosition"/> empty.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.TouchSelectionGripperPackage.GetTouchSelectionGripperLocationDelegate">
            <summary>
            
            </summary>
            <param name="isSelectionPositionInClientView">Indicates whether the related selection position is in client view or not.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.Touch.TouchSelectionGripperPackage.#ctor(FarPoint.Win.ITouchEditorSupport,FarPoint.Win.Touch.TouchSelectionGripperPackage.TouchSelectionGripperMovedByTouchDelegate,FarPoint.Win.Touch.TouchSelectionGripperPackage.GetTouchSelectionGripperLocationDelegate,FarPoint.Win.Touch.TouchSelectionGripperPackage.GetTouchSelectionGripperLocationDelegate,FarPoint.Win.Touch.TouchSelectionGripperPackage.TouchSelectionGripperMovedByTouchDelegate,FarPoint.Win.Touch.TouchSelectionGripperPackage.TouchSelectionGripperMovedByTouchDelegate)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="moveGripperByTouch"></param>
            <param name="getCaretGripperLocation"></param>
            <param name="getOtherEndGripperLocation"></param>
            <param name="gripperStopTouchSelecting"></param>
            <param name="gripperStartTouchSelecting"></param>
        </member>
        <member name="P:FarPoint.Win.Touch.TouchSelectionGripperPackage.GripperSize">
            <summary>
            Gets size of gripper
            </summary>
        </member>
        <member name="P:FarPoint.Win.Touch.TouchSelectionGripperPackage.CanShowSelectionGripper">
            <summary>
            Gets can show selection girpper or not.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Touch.TouchSelectionGripperPackage.ShowSelectionGripper">
            <summary>
            Show selection gripper
            </summary>
        </member>
        <member name="M:FarPoint.Win.Touch.TouchSelectionGripperPackage.HideSelectionGripper">
            <summary>
            Hide selection gripper
            </summary>
        </member>
        <member name="M:FarPoint.Win.Touch.OSInfo.#cctor">
            <summary>
              Initialize static variables.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Touch.OSInfo.#ctor">
            <summary>
              Private contstructor.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo._fullName">
            <summary>
              
            </summary>
        </member>
        <member name="P:FarPoint.Win.Touch.OSInfo.IsAvailable">
            <summary>
              Gets whether current <see cref="T:FarPoint.Win.Touch.OSInfo"/> is available or not.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Touch.OSInfo.Name">
            <summary>
              Gets an <see cref="T:FarPoint.Win.Touch.OSInfo.OSName"/> indicate the current os details type.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Touch.OSInfo.Type">
            <summary>
              Gets the <see cref="T:FarPoint.Win.Touch.OSInfo.ProductType"/> of special os.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Touch.OSInfo.FullName">
            <summary>
              Gets the full name of special os.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Touch.OSInfo.ToString">
            <summary>
              Returns a <b>String</b> that represents the specail os.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FarPoint.Win.Touch.OSInfo.Current">
            <summary>
              Get an <see cref="T:FarPoint.Win.Touch.OSInfo"/> for current operating system.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Touch.OSInfo.GetCurrentOSInfo">
            <summary>
              Internal get current os inf helper.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.Touch.OSInfo.OSName">
            <summary>
              <see cref="T:FarPoint.Win.Touch.OSInfo.OSName"/> Represent the name of special os.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Invalid">
            <summary>
              Invalid OS, not detected.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Unknown">
            <summary>
              Unkown OS
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Win9x">
            <summary>
              Represent Microsoft Windows 9x serials OS.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Win95">
            <summary>
              Represent Microsoft Windows 95, and OSR2
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Win98">
            <summary>
              Represent Microsoft Windows 98, and SE
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.WinMe">
            <summary>
              Represent Microsoft Windows Millennium Edition
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.WinNT">
            <summary>
              Represent Microsoft Windows NT serials OS.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Nt4">
            <summary>
              Represent Microsoft Windows NT4.0
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Win2k">
            <summary>
              Represent Microsoft Windows 2000 Pro/Svr/AdSvr
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.WinXp">
            <summary>
              Represent Microsoft Windows XP Home/Pro/X64 Version
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Win2k3">
            <summary>
              Represent Microsoft Windows 2003 Web/Std/Ent/DC (x86/x64), as well R2.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Vista">
            <summary>
              Represent Microsoft Windows Vista.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Win2k8">
            <summary>
              Represent Microsoft Windows Server 2008.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Win7">
            <summary>
            
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Win2K8R2">
            <summary>
            
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.Win8">
            <summary>
            
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.OSName.WinSvr2012">
            <summary>
              
            </summary>
        </member>
        <member name="T:FarPoint.Win.Touch.OSInfo.ProductType">
            <summary>
              Represent the product type of special os.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.ProductType.NT_Workstation">
            <summary>
              Represent workstation.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.ProductType.NT_Domain_Controller">
            <summary>
              Represent domain controller sever.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.OSInfo.ProductType.NT_Server">
            <summary>
             Represent server.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Touch.NumberTranslator.LowWord(System.UInt32)">
            <summary>
              Get the lower word from a unsigned integer value.
            </summary>
            <param name="value">
              An <b>uint</b> indicates the unsigned integer value.
            </param>
            <returns>
              Return the lower word as result.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Touch.NumberTranslator.HighWord(System.UInt32)">
            <summary>
              Get the higher word from a unsigned integer value.
            </summary>
            <param name="value">
              An <b>unint</b> indicates the unsigned integer value.
            </param>
            <returns>
              Returns the higher word as result.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Touch.NumberTranslator.LowWord(System.Int32)">
            <summary>
              Get the lower word from a integer value.
            </summary>
            <param name="value">
              An <b>int</b> indicates the integer value.
            </param>
            <returns>
              Returns the lower word as result.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Touch.NumberTranslator.HighWord(System.Int32)">
            <summary>
              Get the higher word from a integer value.
            </summary>
            <param name="value">
              An <b>unint</b> indicates the integer value.
            </param>
            <returns>
              Returns the higher word as result.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Touch.NumberTranslator.LowWord(System.IntPtr)">
            <summary>
              Get the higher word from a <see cref="T:System.IntPtr"/> value.
            </summary>
            <param name="intValue">
              An <b>unint</b> indicates the <see cref="T:System.IntPtr"/> value.
            </param>
            <returns>
              Returns the higher word as result.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Touch.NumberTranslator.HighWord(System.IntPtr)">
            <summary>
              Get the higher word from a <see cref="T:System.IntPtr"/> value.
            </summary>
            <param name="intValue">
              An <b>unint</b> indicates the <see cref="T:System.IntPtr"/> value.
            </param>
            <returns>
              Returns the higher word as result.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Touch.NumberTranslator.MakeDoubleWord(System.UInt16,System.UInt16)">
            <summary>
              Make a double word by low and high word.
            </summary>
            <param name="lowWord">
              An <b>ushort</b> indicates the low word of the long.
            </param>
            <param name="highWord">
              An <b>ushort</b> indicates the high word of the long.
            </param>
            <returns>
              An <b>uint</b> indicates the long.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Touch.NumberTranslator.MakeDoubleWord(System.Int16,System.Int16)">
            <summary>
              Make a double word by low and high word.
            </summary>
            <param name="lowWord">
              A <b>short</b> indicates the low word of the long.
            </param>
            <param name="highWord">
              A <b>short</b> indicates the high word of the long.
            </param>
            <returns>
              An <b>int</b> indicates the long.
            </returns>
        </member>
        <member name="T:FarPoint.Win.Touch.ManipulationCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:FarPoint.Win.Touch.GcTouchEventProvider.ManipulationCompleted"/> event.
            </summary>
            <example>
            <para>
              The following code example shows how to use the <see cref="T:FarPoint.Win.Touch.ManipulationCompletedEventArgs"/> class. 
            </para>
            <para>
              This code example is part of a larger example provided for the <see cref="T:FarPoint.Win.Touch.GcTouchEventProvider"/> class.
            </para>
              <code lang = "CS" source="GcTouchEventProviderDemo.cs" region = "ID_009"/>
              <code lang = "VB" source="GcTouchEventProviderDemo.vb" region = "ID_009"/>
            </example>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationCompletedEventArgs.Cumulative">
            <summary>
            Gets the overall changes since the beginning of the manipulation.
            </summary>
            <value>
            The overall changes since the beginning of the manipulation.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationCompletedEventArgs.Position">
            <summary>
            Gets the x and y control coordinates of the touch input at the completed position.
            </summary>
            <value>
            The x and y control coordinates of the touch input at the completed position.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationCompletedEventArgs.PointerDeviceType">
            <summary>
            Gets the <see cref="!:MultiTouch.PointerDeviceType"/> for the pointer device involved in the manipulation.
            </summary>
            <value>
            One of the <see cref="!:MultiTouch.PointerDeviceType"/> values.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationCompletedEventArgs.Velocities">
            <summary>
            Gets the velocities that are used for the manipulation.
            </summary>
            <value>
            The velocities that are used for the manipulation.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.ManipulationDeltaEventArgs">
            <summary>
            Provides data for the <see cref="E:FarPoint.Win.Touch.GcTouchEventProvider.ManipulationDelta"/> event.
            </summary>
            <example>
            <para>
              The following code example shows how to use the <see cref="T:FarPoint.Win.Touch.ManipulationDeltaEventArgs"/> class. 
            </para>
            <para>
              This code example is part of a larger example provided for the <see cref="T:FarPoint.Win.Touch.GcTouchEventProvider"/> class.
            </para>
              <code lang = "CS" source="GcTouchEventProviderDemo.cs" region = "ID_007"/>
              <code lang = "VB" source="GcTouchEventProviderDemo.vb" region = "ID_007"/>
            </example>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationDeltaEventArgs.Cumulative">
            <summary>
            Gets the overall changes since the beginning of the manipulation.
            </summary>
            <value>
            The overall changes since the beginning of the manipulation.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationDeltaEventArgs.Delta">
            <summary>
            Gets the most recent changes of the current manipulation, as a <see cref="T:FarPoint.Win.Touch.ManipulationDelta"/> object.
            </summary>
            <value>
            The most recent changes of the current manipulation.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationDeltaEventArgs.Position">
            <summary>
            Gets the point from which the manipulation originated.
            </summary>
            <value>
            The point from which the manipulation originated.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationDeltaEventArgs.PointerDeviceType">
            <summary>
            Gets the <see cref="!:MultiTouch.PointerDeviceType"/> for the pointer device involved in the manipulation.
            </summary>
            <value>
            One of the <see cref="!:MultiTouch.PointerDeviceType"/> values.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationDeltaEventArgs.Velocities">
            <summary>
            Gets the rates of the most recent changes to the manipulation.
            </summary>
            <value>
            The rates of the most recent changes to the manipulation.
            </value>
        </member>
        <member name="M:FarPoint.Win.Touch.ManipulationDeltaEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Touch.ManipulationInertiaStartingEventArgs">
            <summary>
            Provides data for the <see cref="E:FarPoint.Win.Touch.GcTouchEventProvider.ManipulationInertiaStarting"/> event.
            </summary>
            <example>
            <para>
              The following code example shows how to use the <see cref="T:FarPoint.Win.Touch.ManipulationInertiaStartingEventArgs"/> class. 
            </para>
            <para>
              This code example is part of a larger example provided for the <see cref="T:FarPoint.Win.Touch.GcTouchEventProvider"/> class.
            </para>
              <code lang = "CS" source="GcTouchEventProviderDemo.cs" region = "ID_008"/>
              <code lang = "VB" source="GcTouchEventProviderDemo.vb" region = "ID_008"/>
            </example>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationInertiaStartingEventArgs.Cumulative">
            <summary>
            Gets the overall changes since the beginning of the manipulation.
            </summary>
            <value>
            The overall changes since the beginning of the manipulation.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationInertiaStartingEventArgs.Delta">
            <summary>
            Gets the most recent changes of the current manipulation, as a <see cref="T:FarPoint.Win.Touch.ManipulationDelta"/> object.
            </summary>
            <value>
            The most recent changes of the current manipulation.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationInertiaStartingEventArgs.PointerDeviceType">
            <summary>
            Gets the <see cref="!:MultiTouch.PointerDeviceType"/> for the pointer device involved in the manipulation.
            </summary>
            <value>
            One of the <see cref="!:MultiTouch.PointerDeviceType"/> values.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationInertiaStartingEventArgs.Velocities">
            <summary>
            Gets the rates of the most recent changes to the manipulation.
            </summary>
            <value>
            The rates of the most recent changes to the manipulation.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationInertiaStartingEventArgs.ExpansionBehavior">
            <summary>
            Get or sets the rate of slowdown of the expansion of the inertial movement.
            </summary>
            <value>
            The rate of slowdown of the expansion of the inertial movement.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationInertiaStartingEventArgs.RotationBehavior">
            <summary>
            Get or sets the rate of slowdown of the rotation of the inertial movement.
            </summary>
            <value>
            The rate of slowdown of the rotation of the inertial movement.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationInertiaStartingEventArgs.TranslationBehavior">
            <summary>
            Get or sets the rate of slowdown of the translation of the inertial movement.
            </summary>
            <value>
            The rate of slowdown of the translation of the inertial movement.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.ManipulationStartedEventArgs">
            <summary>
            Provides data for the <see cref="E:FarPoint.Win.Touch.GcTouchEventProvider.ManipulationStarted"/> event.
            </summary>
            <example>
            <para>
              The following code example shows how to use the <see cref="T:FarPoint.Win.Touch.ManipulationStartedEventArgs"/> class. 
            </para>
            <para>
              This code example is part of a larger example provided for the <see cref="T:FarPoint.Win.Touch.GcTouchEventProvider"/> class.
            </para>
              <code lang = "CS" source="GcTouchEventProviderDemo.cs" region = "ID_006"/>
              <code lang = "VB" source="GcTouchEventProviderDemo.vb" region = "ID_006"/>
            </example>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationStartedEventArgs.Cumulative">
            <summary>
            Gets the overall changes since the beginning of the manipulation.
            </summary>
            <value>
            The overall changes since the beginning of the manipulation.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationStartedEventArgs.Position">
            <summary>
            Gets the point from which the manipulation originated.
            </summary>
            <value>
            The point from which the manipulation originated.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationStartedEventArgs.PointerDeviceType">
            <summary>
            Gets the <see cref="!:MultiTouch.PointerDeviceType"/> for the pointer device involved in the manipulation.
            </summary>
            <value>
            One of the <see cref="!:MultiTouch.PointerDeviceType"/> values.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationStartedEventArgs.PointerCount">
            <summary>
            Gets the number of touch points.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> value that represents the number of touch points.
            </value>
        </member>
        <member name="M:FarPoint.Win.Touch.ManipulationStartedEventArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Touch.ManipulationStartingEventArgs">
            <summary>
            Provides data for the <see cref="E:FarPoint.Win.Touch.GcTouchEventProvider.ManipulationStarting"/> event.
            </summary>
            <example>
            <para>
              The following code example shows how to use the <see cref="T:FarPoint.Win.Touch.ManipulationStartingEventArgs"/> class. 
            </para>
            <para>
              This code example is part of a larger example provided for the <see cref="T:FarPoint.Win.Touch.GcTouchEventProvider"/> class.
            </para>
              <code lang = "CS" source="GcTouchEventProviderDemo.cs" region = "ID_005"/>
              <code lang = "VB" source="GcTouchEventProviderDemo.vb" region = "ID_005"/>
            </example>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationStartingEventArgs.Mode">
            <summary>
            Gets or sets which types of manipulations are possible.
            </summary>
            <value>
            One of the <see cref="T:FarPoint.Win.Touch.ManipulationModes"/> values. The default is <see cref="F:FarPoint.Win.Touch.ManipulationModes.All"/>.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationStartingEventArgs.Pivot">
            <summary>
            Gets or sets an object that describes the pivot for a single-point manipulation.
            </summary>
            <value>
            An object that describes the pivot for a single-point manipulation.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationStartingEventArgs.Position">
            <summary>
            Gets the point from which the manipulation originated.
            </summary>
            <value>
            The point from which the manipulation originated.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationStartingEventArgs.PointerDeviceType">
            <summary>
            Gets the <see cref="!:MultiTouch.PointerDeviceType"/> for the pointer device involved in the manipulation.
            </summary>
            <value>
            One of the <see cref="!:MultiTouch.PointerDeviceType"/> values.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.InertiaExpansionBehavior">
            <summary>
            Controls the deceleration of a resizing manipulation during inertia.
            </summary> 
        </member>
        <member name="P:FarPoint.Win.Touch.InertiaExpansionBehavior.DesiredDeceleration">
            <summary>
            Gets or sets the rate at which resizing slows.
            </summary>
            <value>
            The rate at which resizing slows.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.InertiaExpansionBehavior.DesiredExpansion">
            <summary>
            Gets or sets the amount the control resizes at the end of inertia.
            </summary>
            <value>
            The amount the control resizes at the end of inertia.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.InertiaRotationBehavior">
            <summary>
            Controls the deceleration of a rotation manipulation during inertia.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Touch.InertiaRotationBehavior.DesiredDeceleration">
            <summary>
            Gets or sets the rate the rotation slows in degrees per squared millisecond.
            </summary>
            <value>
            The rate the rotation slows in degrees per squared millisecond.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.InertiaRotationBehavior.DesiredRotation">
            <summary>
            Gets or sets the rotation, in degrees, at the end of the inertial movement.
            </summary>
            <value>
            The rotation, in degrees, at the end of the inertial movement.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.InertiaTranslationBehavior">
            <summary>
            Controls deceleration on a translation manipulation during inertia.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Touch.InertiaTranslationBehavior.DesiredDeceleration">
            <summary>
            Gets or sets the rate the linear movement slows in device-independent units (1/96th inch per unit) per squared millisecond.
            </summary>
            <value>
            The rate the linear movement slows in device-independent units (1/96th inch per unit) per squared millisecond. 
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.InertiaTranslationBehavior.DesiredDisplacement">
            <summary>
            Gets or sets the linear movement of the manipulation at the end of inertia.
            </summary>
            <value>
            The linear movement of the manipulation at the end of inertia.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.ManipulationDelta">
            <summary>
            Contains the accumulated transformations for the current manipulation.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationDelta.Translation">
            <summary>
            The change in x-y screen coordinates, in DIPs.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationDelta.Scale">
            <summary>
            The change in distance between touch contacts, as a percentage. For example, 
            if the distance between two contacts changes from 100 DIPs to 200 DIPs during a manipulation, 
            the value of Scale would be 2.0.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationDelta.Rotation">
            <summary>
            The change in angle of rotation, in degrees.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationDelta.Expansion">
            <summary>
            The change in distance between touch contacts, as DIPs. For example, if the distance between two contacts 
            changes from 100 DIPs to 200 DIPs during a manipulation, the value of Expansion would be 100.0.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Touch.ManipulationVelocities">
            <summary>
            Contains the velocities of the accumulated transformations for the current interaction.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationVelocities.Linear">
            <summary>
            Gets the straight line velocity in DIPs per millisecond.
            </summary>
            <value>
            The straight line velocity in DIPs per millisecond.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationVelocities.Angular">
            <summary>
            Gets the rotational velocity in degrees per millisecond.
            </summary>
            <value>
            The rotational velocity in degrees per millisecond.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationVelocities.Expansion">
            <summary>
            Gets the expansion, or scaling, velocity in DIPs per millisecond.
            </summary>
            <value>
            The expansion, or scaling, velocity in DIPs per millisecond.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.ManipulationModes">
            <summary>
            Specifies how a target control interprets manipulation events. 
            This enumeration is flagwise to facilitate setting multiple modes.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationModes.All">
            <summary>
            Enables all manipulation interaction modes.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationModes.None">
            <summary>
            Does not present graphic interaction with manipulation events.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationModes.TranslateX">
            <summary>
            Permits manipulation actions that translate the target on the x-axis.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationModes.TranslateY">
            <summary>
            Permits manipulation actions that translate the target on the y-axis.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationModes.TranslateRailsX">
            <summary>
            Permits manipulation actions that translate the target on the x-axis using a rails mode.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationModes.TranslateRailsY">
            <summary>
            Permits manipulation actions that translate the target on the y-axis using a rails mode.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationModes.Rotate">
            <summary>
            Permits manipulation actions that rotate the target.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationModes.Scale">
            <summary>
            Permits manipulation actions that scale the target.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationModes.TranslateInertia">
            <summary>
            Applies inertia to translate actions.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationModes.RotateInertia">
            <summary>
            Applies inertia to rotate actions.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.ManipulationModes.ScaleInertia">
            <summary>
            Applies inertia to scale actions.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Touch.ManipulationPivot">
            <summary>
            Specifies how a rotation occurs with one point of user input.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Touch.ManipulationPivot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FarPoint.Win.Touch.ManipulationPivot" /> class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Touch.ManipulationPivot.#ctor(System.Drawing.Point,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FarPoint.Win.Touch.ManipulationPivot" /> class.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationPivot.Center">
            <summary>
            Gets or sets the center point for rotation manipulations.
            </summary>
            <value>
            The center point for rotation manipulations.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.ManipulationPivot.Radius">
            <summary>
            Gets or sets the effective radius of rotation for rotation manipulations.
            </summary>
            <value>
            A value in pixels.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.TouchRoutedEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled. Setting to <see langword="true" /> prevents most
            handlers along the event route from handling the same event again.
            </summary>
            <value>
            <see langword="true"/> to mark the routed event handled; <see langword="false"/> to leave the routed event unhandled, 
            which permits the event to potentially route further. The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.TouchRoutedEventArgs.OriginalSource">
            <summary>
            Gets a reference to the object that raised the event.
            </summary>
            <value>
            The object that raised the event.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.PointerEventArgs">
            <summary>
            Provides event data for pointer message events related to <see cref="T:FarPoint.Win.Touch.GcTouchEventProvider"/>, such as <see cref="E:FarPoint.Win.Touch.GcTouchEventProvider.PointerPressed"/>.
            </summary>
            <example>
            <para>
              The following code example shows how to use <see cref="T:FarPoint.Win.Touch.PointerEventArgs"/> class. 
            </para>
            <para>
              This code example is part of a larger example provided for the <see cref="E:FarPoint.Win.Touch.GcTouchEventProvider.PointerPressed"/> event.
            </para>
              <code lang = "CS" source="GcTouchEventProviderPointerDemo.cs" region = "ID_006"/>
              <code lang = "VB" source="GcTouchEventProviderPointerDemo.vb" region = "ID_006"/>
            </example>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerEventArgs.ID">
            <summary>
            Gets the system-generated identifier for this pointer reference.
            </summary>
            <value>
            The system-generated identifier.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerEventArgs.DeviceType">
            <summary>
            Gets the <see cref="T:FarPoint.Win.Touch.PointerDeviceType"/> for the pointer device.
            </summary>
            <value>
            One of <see cref="T:FarPoint.Win.Touch.PointerDeviceType"/> values.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerEventArgs.Position">
            <summary>
            Gets the x and y control coordinates of the touch input at the completed position.
            </summary>
            <value>
            The x and y control coordinates of the touch input at the completed position.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerEventArgs.IsInContact">
            <summary>
            Gets a value that determines whether the pointer device was in contact with a sensor or digitizer
            at the time that the event was reported.
            </summary>
            <value>
            <see langword="true"/> if the pointer device was in contact; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerEventArgs.IsInRange">
            <summary>
            Gets a value that determines whether the pointer device was in detection range of a sensor or digitizer
            at the time that the event was reported.
            </summary>
            <value>
            <see langword="true"/> if the pointer device was in detection range; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerEventArgs.Properties">
            <summary>
            Gets extended information about the input pointer.
            </summary>
            <value>
            The extended properties exposed by the input device.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.HoldingEventArgs">
            <summary>
            Provides data for <see cref="E:FarPoint.Win.Touch.GcTouchEventProvider.Holding"/> event.
            </summary>
            <example>
            <para>
              The following code example shows how to use the <see cref="T:FarPoint.Win.Touch.HoldingEventArgs"/> class. 
            </para>
            <para>
              This code example is part of a larger example provided for the <see cref="T:FarPoint.Win.Touch.GcTouchEventProvider"/> class.
            </para>
              <code lang = "CS" source="GcTouchEventProviderDemo.cs" region = "ID_004"/>
              <code lang = "VB" source="GcTouchEventProviderDemo.vb" region = "ID_004"/>
            </example>
        </member>
        <member name="P:FarPoint.Win.Touch.HoldingEventArgs.PointerDeviceType">
            <summary>
            Gets the <see cref="!:MultiTouch.PointerDeviceType"/> for the pointer device that initiated the associated input event.
            </summary>
            <value>
            One of <see cref="!:MultiTouch.PointerDeviceType"/> values.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.HoldingEventArgs.Position">
            <summary>
            Returns the x and y control coordinates of the pointer position.
            </summary>
            <value>
            The x and y control coordinates of the pointer position.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.HoldingEventArgs.HoldingState">
            <summary>
            Gets the underlying <see cref="!:MultiTouch.HoldingState"/> for the interaction.
            </summary>
            <value>
            One of <see cref="!:MultiTouch.HoldingState"/> values.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.HoldingState">
            <summary>
              Specifies the state of the <see cref="E:FarPoint.Win.Touch.GcTouchEventProvider.Holding"/> event.
            </summary>  
        </member>
        <member name="F:FarPoint.Win.Touch.HoldingState.Started">
            <summary>
              A single contact is detected and a time threshold is crossed without the contact being lifted, another contact is detected, or another gesture is started.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.HoldingState.Completed">
            <summary>
            The single contact is lifted.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.HoldingState.Canceled">
            <summary>
            An additional contact is detected, a subsequent gesture (such as a slide) is detected.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Touch.PointerPointProperties">
            <summary>
              Provides extended properties for a <see cref="T:FarPoint.Win.Touch.PointerEventArgs"/> object.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.ContactRect">
            <summary>
            Gets the rectangle boundary of the contact area (typically from touch input).
            </summary>
            <value>
            The bounding rectangle of the contact area, using client window coordinates in device-independent pixels (DIPs).
            </value>
            <remarks>
            <para>
            <see cref="P:FarPoint.Win.Touch.PointerPointProperties.ContactRect"/> contains the bounding rectangle of the contact area as interpreted by the system. 
            Under some circumstances, such as input prediction, this data can be modified by the system to compensate 
            for hardware latency or message latency due to inherent delays in sensing and processing the pointer location
            on the digitizer.
            </para>
            <para>
            See <see cref="P:FarPoint.Win.Touch.PointerPointProperties.ContactRectRaw"/> for more information on raw input data.
            </para>
            </remarks>
            <seealso cref="P:FarPoint.Win.Touch.PointerPointProperties.ContactRectRaw"/>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.ContactRectRaw">
            <summary>
            Gets the rectangle boundary of the raw input (typically from touch input).
            </summary>
            <value>
            The bounding rectangle of the raw input, in device-independent pixels (DIPs)
            </value>
            <remarks>
            <para>
            <see cref="P:FarPoint.Win.Touch.PointerPointProperties.ContactRectRaw"/> contains the bounding rectangle of the raw input as reported by the input device.
            Under some circumstances, such as input prediction, this data can be modified by the system to compensate for
            hardware latency or message latency due to inherent delays in sensing and processing the pointer location on 
            the digitizer.
            </para>
            <para>
            See <see cref="P:FarPoint.Win.Touch.PointerPointProperties.ContactRect"/> for more information on handling modified input data.
            </para>
            </remarks>
            <seealso cref="P:FarPoint.Win.Touch.PointerPointProperties.ContactRect"/>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.IsBarrelButtonPressed">
            <summary>
            Gets a value that indicates whether the barrel button of the pen or stylus device is pressed.
            </summary>
            <value>
            <see langword="true"/> if the barrel button is pressed; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.IsCanceled">
            <summary>
            Gets a value that indicates whether the input was canceled by the pointer device.
            </summary>
            <value>
            <see langword="true"/> if the input was canceled; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
            Pointer input can be canceled for various reasons, including:
            </para>
            <list type="bullet">
            <item>
            Palm rejection
            </item>
            <item>
            Input arbitration (such as pen or stylus proximity overriding touch input)
            </item>
            <item>
            Device removal
            </item>
            <item>
            Invalid state transition
            </item>
            <item>
            Screen rotation
            </item>
            <item>
            Desktop switching
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.IsEraser">
            <summary>
            Gets a value that indicates whether the input is from a digitizer eraser.
            </summary>
            <value>
            <see langword="true"/> if the input is from a digitizer eraser; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.IsInRange">
            <summary>
            Gets a value that indicates whether the physical entity (finger or pen) is in range of the digitizer.
            </summary>
            <value>
            <see langword="true"/> if in range; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.IsInverted">
            <summary>
            Gets a value that indicates whether the digitizer pen is inverted.
            </summary>
            <value>
            <see langword="true"/> if inverted; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.IsPrimary">
            <summary>
            Gets a value that indicates whether the input is from the primary pointer when multiple pointers are registered.
            </summary>
            <value>
            <see langword="true"/> if the input is from the pointer designated as primary; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            A primary pointer can perform actions that are not available to other pointers. 
            For example, the primary pointer can send a WM_POINTERACTIVATE message when it makes contact with a window.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.Orientation">
            <summary>
            Gets the counter-clockwise angle of rotation around the major axis of the pointer device 
            (the z-axis, perpendicular to the surface of the digitizer). A value of 0.0 degrees indicates 
            the device is oriented towards the top of the digitizer.
            </summary>
            <value>
            A value between 0.0 and 359.0 in degrees of rotation. The default value is 0.0.
            </value>
            <remarks>
            Orientation is also referred to as azimuth.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.Pressure">
            <summary>
            Gets a value that indicates the force that the pointer device (typically a pen or stylus) exerts on the surface
            of the digitizer.
            </summary>
            <value>
            A value from 0 to 1.0. The default value is 0.5.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.TouchConfidence">
            <summary>
            Gets a value that indicates whether the pointer device rejected the touch contact.
            </summary>
            <value>
            <see langword="true"/> if the touch contact was accepted; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.Twist">
            <summary>
            Gets the clockwise rotation in degrees of a pen device around its own major axis 
            (such as when the user spins the pen in their fingers).
            </summary>
            <value>
            A value between 0.0 and 359.0 in degrees of rotation. The default value is 0.0.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.XTilt">
            <summary>
            Gets the plane angle between the Y-Z plane and the plane that contains the y-axis and the axis of the input device 
            (typically a pen or stylus).
            </summary>
            <value>
            The value is 0.0 when the finger or pen is perpendicular to the digitizer surface, 
            between 0.0 and 179.0 when tilted to the right of perpendicular, and between 0.0 and -179.0 
            when tilted to the left of perpendicular. The default value is 0.0.
            </value>
        </member>
        <member name="P:FarPoint.Win.Touch.PointerPointProperties.YTilt">
            <summary>
            Gets the plane angle between the X-Z plane and the plane that contains the x-axis and the axis of the input device 
            (typically a pen or stylus).
            </summary>
            <value>
            The value is 0.0 when the finger or pen is perpendicular to the digitizer surface, between 0.0 and -179.0 when tilted
            towards the user, and between 0.0 and 179.0 when tilted away from the user. The default value is 0.0.
            </value>
        </member>
        <member name="T:FarPoint.Win.Touch.PointerDeviceType">
            <summary>
              Enumerates pointer device types.
            </summary>
            <remarks>
              <note>
              <see cref="T:FarPoint.Win.Touch.GcTouchEventProvider"/> does not support the mouse pointer type, only pen or touch can raise pointer events.
              </note>
            </remarks>
        </member>
        <member name="F:FarPoint.Win.Touch.PointerDeviceType.Touch">
            <summary>
            Specifies a touch-enabled device
            </summary>
        </member>
        <member name="F:FarPoint.Win.Touch.PointerDeviceType.Pen">
            <summary>
            Specifies the pen
            </summary>
        </member>
        <member name="M:FarPoint.Win.Touch.TouchEventsProcessorWrapper.DetachProcessorWrapper(FarPoint.Win.Touch.ITouchEventsProcessor,System.Boolean)">
            <summary>
            Detach touch events processors by completing its running tasks
            </summary>
            <param name="touchEventsProcessor">ITouchEventsProcessor object to be detached</param>
            <param name="raiseEvent">Flag whether to raise event. Default is false</param>
        </member>
        <member name="M:FarPoint.Win.Touch.TouchEventsProcessor.Complete(System.Boolean)">
            <summary>
            Complete all running tasks within ManipulcationProcessor
            </summary>
            <param name="raiseEvent">Flag whether to raise event</param>
            Internal use only
        </member>
        <member name="T:FarPoint.Win.SuperEdit.AbstractFmtParsed">
            <summary>
            Implements the AbstractFmtParsed class.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.AbstractFmtParsed.HasRegionSettings">
            <summary>
            Property that indicates whether we have specific 
            regional settings set (non-default).
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.AbstractFmtParsed.RegionSettings">
            <summary>
            Gets or sets the Regional settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParsed.FromFormattedString(System.String)">
            <summary>
            Parses and returns the "value" from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParsed.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParsed.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the "value" from an unformatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParsed.ToUnformattedString(System.Object)">
            <summary>
            Returns an unformatted string for the value passed.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.AbstractFmtParser">
            <summary>
            Implements the AbstractFmtParser class.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AbstractFmtParser.FORMAT_PREDEFINED_COLORS">
            <summary>
            Constants for String Table.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AbstractFmtParser.parseErrorCharIndex">
            <summary>
            If there's an error while parsing the format string,
            this property will indicate the first char index were
            the problem starts.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AbstractFmtParser.stringTable">
            <summary>
            Sets the dictionary to use for the StringTable.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.AbstractFmtParser.StrTblComparer">
            <summary>
            This class supplies a simple implementation for the 
            default string table implementation.  Since the KEY for 
            the string table is just an integer, this one method just 
            compares 2 integers.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AbstractFmtParser.defaultStringTable">
            <summary>
            Default string table in case one is not supplied.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParser.CreateDefaultStringTable">
            <summary>
            Creates the default string table when invoked.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.AbstractFmtParser.ParseFormatString(System.String,FarPoint.Win.SuperEdit.MaskType)">
            <summary>
            Parses format string into its various parts.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.EraList">
            <summary>
            EraList
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.EraList.IsDateInEra(System.DateTime,System.Int32)">
            <summary>
            Returns true if specified date is within the start and
            end dates of this era.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.EraList.AdjustDateForEra(FarPoint.Win.SuperEdit.EraList,System.DateTime,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            This method will adjust the date for era that relates 
            to a cooresponding period in the specified date.
            Returns true if successful, false is returned if no adjustment.
            Note: "era" is 1 based (1..eraList.Length).
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtParsedExcel">
            <summary>
            ParsedFmtString
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedExcel.FromFormattedString(System.String)">
            <summary>
            Parses and returns the "value" from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedExcel.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            Returned object is really of type FormattedExcelString,
            which is derived from String.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtParsedExcel.CompareType">
            <summary>
            0 for non-conditional, 
            1 for less-than,
            2 for less-than-or-equal-to (or equal-to-or-less-than)
            3 for equals, 
            4 for greater-than-or-equal-to (or equal-to-or-greater than),
            5 for greater-than,
            6 for less-than-or-greater-than (but not equal).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.FMT_COND_POS">
            <summary>
            Use these define indexes into array.
            Last is the Number of conditions.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.fmtStrList">
            <summary>
            Format strings for each type (positive, negative, zero and text 
            or condition passed and condition failed).
            This array can have up to "NUM_OF_CONDS" elements (4).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.fmtStrStartIndex">
            <summary>
            Keeps track of where each format "section" starts.
            Stores an index into the original format string for each part.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.fmtColorList">
            <summary>
            Color for each type (positive, negative, zero and text or 
            condition passed and condition failed).
            This array can have up to "NUM_OF_CONDS" elements (4).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.operand">
            <summary>
            Operand is a temp var used by multiple methods. Values:
            0 for non-conditional, 
            1 for less-than,
            2 for less-than-or-equal-to (or equal-to-or-less-than)
            3 for equals, 
            4 for greater-than-or-equal-to (or equal-to-or-greater than),
            5 for greater-than,
            6 for less-than-or-greater-than (but not equal).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedExcel.testValue">
            <summary>
            The value to compare to the passed-in value to determine 
            which format string to use.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.CustomMaskEventArgs">
            <summary>
            Represents the event data for the CustomMask event. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.CustomMaskEventArgs.MaskUser0">
            <summary>User callback ('0')</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.CustomMaskEventArgs.MaskUser1">
            <summary>User callback ('1')</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.CustomMaskEventArgs.MaskUser2">
            <summary>User callback ('2')</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.CustomMaskEventArgs.MaskUser3">
            <summary>User callback ('3')</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.CustomMaskEventArgs.MaskUser4">
            <summary>User callback ('4')</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.CustomMaskEventArgs.MaskUser5">
            <summary>User callback ('5')</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.CustomMaskEventArgs.MaskUser6">
            <summary>User callback ('6')</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.CustomMaskEventArgs.MaskUser7">
            <summary>User callback ('7')</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.CustomMaskEventArgs.MaskUser8">
            <summary>User callback ('8')</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.CustomMaskEventArgs.MaskUser9">
            <summary>User callback ('9')</summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CustomMaskEventArgs.#ctor(System.Int32,System.Char)">
            <summary>
            Constructs a new CustomMaskEventArgs object.
            </summary>
            <param name="mask">Index for mask</param>
            <param name="inChar">Input character for mask</param>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CustomMaskEventArgs.InputCharacter">
            <summary>
            Gets or sets the input character.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CustomMaskEventArgs.CustomMaskCharacter">
            <summary>
            Gets the custom mask character.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CustomMaskEventArgs.CustomMaskIndex">
            <summary>
            Gets the index of the custom mask.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CustomMaskEventArgs.Valid">
            <summary>
            Gets or sets whether the value is valid.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.CustomMaskEventHandler">
            <summary>
            Represents a defined method that handles the CustomMask event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtParsedPicMask">
            <summary>
            FmtParsedPicMask
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.FromFormattedString(System.String)">
            <summary>
            Parses and returns the value from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the value from an unformatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.ToUnformattedString(System.Object)">
            <summary>
            Returns an unformatted string for the value passed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedPicMask.maskList">
            <summary>
            List of the mask chars and literals.  For literals, the position
            in maskList only indicates that there is a literal in that position,
            the get the actual literal char, you have to get it from the 
            "literals" field.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.FmtParsedPicMask.MinimumValue">
            <summary>
            Minimum value, optional. To clear, set to null.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.FmtParsedPicMask.MaximumValue">
            <summary>
            Maximum value, optional. To clear, set to null.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.FmtParsedPicMask.InitialValue">
            <summary>
            Initial value if string is null, optional. 
            To clear, set to null.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetInitialText">
            <summary>
            This returns the initial text for a format.  Used when
            starting a new value.  Note: this gives the same results as
            "ChangeText()" called with all the text selected and the
            "insertText" parameter null or empty.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.CharInput(System.Int32,System.Char,System.String,System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if char is 
            allowed under given conditions. If not allowed, 
            false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.ChangeText(System.String,System.String@)">
            <summary>
            Returns the resulting text if change
            is allowed for the given conditions.  If no changes
            were made (due to invalid input), false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.ChangeText(System.String,System.Int32,System.Int32,System.String,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if change
            is allowed for the given conditions.  If no changes
            were made (do to invalid input), false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetInitialInputPos(System.String)">
            <summary>
            Returns the initial input position for the given text.
            This initial position may not be first input position.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.IsInputAllowedAtPos(System.String,System.Int32)">
            <summary>
            Returns whether input is allowed at the specified 
            position (index) for the given text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetLastPosInputIsAllowed(System.String)">
            <summary>
            Returns the last position which can receive input 
            for the given text, 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetNextInputPos(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the next input position dependent on the direction,
            the current text and the current position.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetCaretTypeAtPos(System.String,System.Int32)">
            <summary>
            Returns one of the following values for the position in
            the given text:  
              InputPosType.InsertPos, .FixedFldPos, or .LiteralPos
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.IncrementValue(System.String,System.Int32,System.Object,System.Boolean,System.Object,System.String@,System.Int32@)">
            <summary>
            Increments or decrements (dependent on sign of "incrAmt")
            the value represented by the text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedPicMask.GetFormatStringAtPos(System.String,System.Int32)">
            <summary>
            Returns the format string for the field at the specified
            position in the given text.  
            Example: Format String: "d/mm/yy", currText: "25/12/02"
                     position: 3.  This method will return "mm".
            Returns "" if bad position.  If at a literal position,
            then the char at that position, preceded with a backslash,
            is returned ("\c" where 'c' is the actual char).
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtParsedTypeMask">
            <summary>
            ParsedTypeMaskString
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FromFormattedString(System.String)">
            <summary>
            Parses and returns the "value" from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the "value" from an unformatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ChangeText(System.String,System.String@)">
            <summary>
            Returns the resulting text if change
            is allowed for the given conditions.  If no changes
            were made (due to invalid input), false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ChangeText(System.String,System.Int32,System.Int32,System.String,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if change
            is allowed for the given conditions.  If no changes
            were made (do to invalid input), false is returned.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedTypeMask.displayLeadingZero">
            <summary>
            Determines if a leading zero is displayed when a float
            value is less than 1.0 and greater than -1.0 (0.xx).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedTypeMask.daylessDate">
            <summary>
            Whether the date format only includes the month and year.
            In this case, the day is always assumed to be 1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetFldStrList(System.Int32,FarPoint.Win.SuperEdit.IRegionalSettings)">
            <summary>
            If there's a list associated with this fld id, return it. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetAllValues(System.String)">
            <summary>
            Parses the passed text string for "field values" and puts
            those binary values in a newly allocated MaskFldValue object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetAllValues(System.String,System.Int32,System.Int32)">
            <summary>
            Parses the passed text string for "field values" and puts
            those binary values in a newly allocated MaskFldValue object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FmtFldIdAtPos(System.Int32,System.Int32@,System.Int32@,System.String,System.Int32,System.Boolean)">
             <summary>
             Returns the format field id given the position within the string.
            
             NOTE: Only the parameter, "uPos", is required, all others are optional;
                   though, "tstrText" and uTextLen are needed if the SpecialMask
                   type is either FLOAT or INTEGER.
             </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetVarFldLen(System.Int32,System.String,System.Int32)">
            <summary>
            Returns the len of the variable-length field at the
            start position in the text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetBinaryValue(System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean@,System.Int32@)">
             <summary>
             This function converts the string of chars for a given field type
             to a binary value.  
            
             For example, if "03" is given for a field type, MM (2 digit month),
             then a value of 3 is returned in the parameter "pBinaryValBuff".
            
             Another example, if "JUN" is given for a field type of MMM 
             (3 letter month), then a value of 6 is returned in the parameter.
            
             If "fNormalizeStr" is true, then CopyNumberWithoutThSep() is called
             if "eFldValFmt" is MaskFmtInt or MaskFmtFltWhl.
            
             Returns a non-null value if string could be converted.
             </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CopyNumberDigitsAndSign(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Copies the text for a number from one buffer to the other, 
            stripping out anything not a neg sign, decimal separator,
            or digits. Adjusts the returned len and also the specified 
            current position. Returns new string if ok, else null.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.AdjustInputLenForNumber(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32@,System.Boolean)">
            <summary>
             Parse the string and determine the true length of this
             field as it relates to the actual text.
            
             Returns next index to process.  If no valid chars for the field 
             were found, then the starting index is returned (uFldStartIndex).
            
             The parameter, "fFindFldEnd", is true, this function processes 
             all the chars until it reaches what it considers the end of 
             the field, otherwise the function stops after it has processed 
             the char at "uTargetPos" or the end of the field, which ever 
             comes first.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.VerifyCharForFldAtPos(System.Char,System.Int32,System.String@,System.Int32@,System.Int32,System.Int32,System.Int32,System.Boolean@)">
             <summary>
             Verify that field value is in valid range. (ex. 1..12 for month,
             1..31 for day).
            
             NOTE: At this point, the char is a valid char (digit if for a
             number value, a letter if for a text field, like 3-char month).
             
             Returns 2 if char should be applied to next field,
             1 if ok, 0 if error.
             </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ProcessDayOfWeekChg(System.String@,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns true if processing is complete and ok.
            Otherwise, returns false if an error occurred like a date 
            that is outside the min/max range.
            Note: Parameter posWithinFld is current position within
            the specified fld, the location in the string must
            be determined first then added to "posWithinFld".
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ProcessEraChange(System.String@,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns true if processing is complete and ok.
            Otherwise, returns false if an error occurred like a date 
            that is outside the min/max range.
            Note: Parameter posWithinFld is current position within
            the specified fld, the location in the string must
            be determined first then added to "posWithinFld".
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedTypeMask.minValue">
            <summary>
            Minimum value, optional. To clear, set to null.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedTypeMask.maxValue">
            <summary>
            Maximum value, optional. To clear, set to null.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.FmtParsedTypeMask.initialValue">
            <summary>
            Initial value if string is null, optional. 
            To clear, set to null.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.FmtParsedTypeMask.OriginalValue">
            <summary>
            Get or Set Original value
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetInitialText">
            <summary>
            This returns the initial text for a format.  Used when
            starting a new value.  Note: this gives the same results as
            "ChangeText()" called with all the text selected and the
            "insertText" parameter null or empty.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CharInput(System.Int32,System.Char,System.String,System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if char is 
            allowed under given conditions. If not allowed, 
            false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetInitialInputPos(System.String)">
            <summary>
            Returns the initial input position for the given text.
            This initial position may not be first input position.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.IsInputAllowedAtPos(System.String,System.Int32)">
            <summary>
            Returns whether input is allowed at the specified 
            position (index) for the given text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetLastPosInputIsAllowed(System.String)">
            <summary>
            Returns the last position which can receive input 
            for the given text, 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetNextInputPos(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the next input position dependent on the direction,
            the current text and the current position.  
            If no valid "next position", -1 is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetNextInputPos(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the next input position dependent on the direction,
            the current text and the current position.  
            If no valid "next position", -1 is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetCaretTypeAtPos(System.String,System.Int32)">
            <summary>
            Returns one of the following values for the position in
            the given text:  
            INSERT_POS, FIXEDFLD_POS, LITERAL_POS
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.VerifyInputKeyForNumber(System.Int32,System.Char,System.String,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Process char for a number (either integer or float).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetFmtFldFracStartPos(System.String,System.Int32)">
            <summary>
            Returns the starting position in the passed string for the
            fractional portion of a float.
            Note: "startPos" is optional (pass -1 if not specified)
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FindPosAtDecimal(System.String,System.Boolean)">
            <summary>
            Given the new text and desired position relative to 
            the decimal point, determines the new cursor position in 
            the new text.  
            </summary>
            <returns>
            Returns -1 if decimal point is not found, otherwise
            the correct position relative to the decimal is returned.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FindNewCaretPosForNumStr(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Given the new text and the new position in number of digits,
            determines the new cursor position in the new text.  
            </summary>
            <remarks>
            Use -1 for the <i>maxNumOfDigits</i> parameter if the number of digits is not known.
            </remarks>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetNumericDigitsInField(System.String,System.Int32)">
            <summary>
            Counts the number of digits in a string starting at beginPos and going for maxLength
            If maxLength is -1, use text.Length
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.DeleteCharsFromNumStr(System.String,System.Int32,System.Int32,System.Boolean,System.String@,System.Int32@,System.Boolean@)">
            <summary>
            Deletes the chars from the number string (integer or float).
            Digits and negative sign are removed from the number to
            the left of the decimal point, 0's replace any digits
            removed from the right of the decimal point.
            Returns TRUE if no errors.  Return parameter, "retDataChanged",
            is true if any changes were made to the string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.InsertStrIntoNumStr(System.String,System.Int32,System.String,System.Boolean,System.String@,System.Int32@,System.Boolean@)">
            <summary>
            Deletes the chars from the number string (integer or float).
            Digits and negative sign are removed from the number to
            the left of the decimal point, 0's replace any digits
            removed from the right of the decimal point.
            Returns TRUE if no errors.  Return parameter, "retDataChanged",
            is true if any changes were made to the string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FindFldPos(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the begin position and end position of the
            specified field.  Returns true if found, else false.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.FindFldPos(System.String,System.Int32,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Returns the begin position and end position of the
            specified field.  Returns true if found, else false.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.AdjustCaretPosForNumStr(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Counts the number of digits at the old position in
            the old string and returns the same position in the 
            new string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.DeleteCharsFromDateTime(System.String,System.Int32,System.Int32,System.Boolean,System.String@,System.Int32@,System.Boolean@)">
            <summary>
            Deletes the chars from the date-time string.
            All positions are just replaced with 0's or blanks,
            no chars are really deleted, just "reset".
            Returns TRUE if no errors.  Return parameter, "retDataChanged",
            is true if any changes were made to the string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.InsertStrIntoDateTime(System.String,System.Int32,System.String,System.String@,System.Int32@,System.Boolean@)">
            <summary>
            Insert the chars into the date-time string.
            Returns TRUE if no errors.  Return parameter, "retDataChanged",
            is true if any changes were made to the string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.SkipLitCharsInDateTimeInsertStr(System.Text.StringBuilder,System.Int32,System.String,System.Int32,System.Int32@)">
            <summary>
            Returns the index into the "insert string" for the position
            which relates to position AFTER this string of literal chars.
            If we run-out of chars in the insert string, the length
            of "insertStr" is returned as the index into the insert string.
            
            Note, this may add chars to the "currText" if it does not
            include the literal chars.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.SkipSpecialLitCharsInDateTimeInsertStr(System.Text.StringBuilder,System.Int32,System.String,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Returns the index into the "insert string" for the position
            which relates to position AFTER this string of special literal chars.
            If we run-out of chars in the insert string, the length
            of "insertStr" is returned as the index into the insert string.
            
            Note, this may add chars to the "currText" if it does not
            include the special literal chars, such as date separator and time separator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetLiteralStrAtPos(System.Int32,System.Int32@,System.String)">
            <summary>
            Returns literal string at "pos".  If none at that position,
            then null is returned.  "retBeginIndex" returns the 
            position where the literal string begins in the text.
            This does not work for number since it does not take
            the current text as a parameter.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ValidateChanges(FarPoint.Win.SuperEdit.MaskFldValue,System.Boolean@)">
            <summary>
            This function verifies that the fields are valid, and 
            modifies them if out of range (for Date or Time, leaves
            unchange for integer and float).
            Returns null if something is not valid and can't be changed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ValidateChanges(System.String,System.Int32,System.Boolean@)">
            <summary>
            This function verifies that the fields are valid, and 
            modifies them if out of range (for Date or Time, leaves
            unchange for integer and float).
            Returns null if something is not valid and can't be changed.
            </summary>
            <param name="text">Text string</param>
            <param name="beginPosOfNonFullFld">Pass -1 if there are 
            no incomplete fields, otherwise specify the index</param>
            <param name="dataChanged">Whether the data is changed</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.ValidateChanges(System.String,System.Int32,System.Boolean@,System.Int32)">
            <summary>
            This function verifies that the fields are valid, and 
            modifies them if out of range (for Date or Time, leaves
            unchange for integer and float).
            Returns null if something is not valid and can't be changed.
            </summary>
            <param name="text">Text string</param>
            <param name="beginPosOfNonFullFld">Pass -1 if there are 
            no incomplete fields, otherwise specify the index</param>
            <param name="dataChanged">Whether the data is changed</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.IncrementValue(System.String,System.Int32,System.Object,System.Boolean,System.Object,System.String@,System.Int32@)">
            <summary>
            Increments or decrements (dependent on sign of "incrAmt")
            the value represented by the text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithShortMonths(System.String,System.Int32@)">
            <summary>
            Returns a month index between 1 and 12 if string matches
            one of the abbreviated month names, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithLongMonths(System.String,System.Int32@)">
            <summary>
            Returns a month index between 1 and 12 if string matches
            one of the long month names, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithShortDays(System.String,System.Int32@)">
            <summary>
            Returns a day index between 1 and 7 if string matches
            one of the abbreviated weekday names, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithLongDays(System.String,System.Int32@)">
            <summary>
            Returns a day index between 1 and 7 if string matches
            one of the long day names, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithAmPm(System.String,System.Int32@)">
            <summary>
            Returns an Am/Pm index between 0 and 1 if string matches
            either of them, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithShortEras(System.String,System.Int32@)">
            <summary>
            Returns an Era index between 0 and (num of eras - 1)
            if string matches any of them, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CompareWithLongEras(System.String,System.Int32@)">
            <summary>
            Returns an Era index between 0 and (num of eras - 1)
            if string matches any of them, otherwise -1.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.CmpStrWithStrListHelper(System.String[],System.String,System.Int32@)">
            <summary>
            Returns the index into the "list" (0..len-1) if one matches
            the string in s, otherwise -1 is returned.  The compare ignores
            the length of the strings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.VerifyListFldValue(System.Int32,System.String)">
            <summary>
            Returns String of closest match to the text specified.
            If no good match, null is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.PrivGetInitialLeadingText">
            <summary>
            Returns the leading text upto the first input position.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.GetFormatStringAtPos(System.String,System.Int32)">
            <summary>
            Returns the format string for the field at the specified
            position in the given text.  
            Example: Format String: "d/mm/yy", currText: "25/12/02"
                     position: 3.  This method will return "mm".
            Returns "" if bad position.  If at a literal position,
            then the char at that position, preceded with a backslash,
            is returned ("\c" where 'c' is the actual char).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtParsedTypeMask.IsGregorianCalendar">
            <summary>
            Returns true if currently based on a gregorian calendar.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.JapaneseErasConfiguration">
            <summary>
              Get the configuration information formthe config file for the Japanese eras.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.NAME_ATTRIBUTE_NAME">
            <summary>
              A string value indicates the name of name attribute.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.ABBREVIATION_ATTRIBUTE_NAME">
            <summary>
              A string value indicates the name of attribute.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.SYMBOL_ATTRIBUTE_NAME">
            <summary>
              A string value indicates the name of symbol attribute.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.START_DATE_ATTRIBUTE_NAME">
            <summary>
              A string value indicates the name of start date attribute.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.SHORTCUTS_ATTRIBUTE_NAME">
            <summary>
              A string value indicates the name of shortcuts attribute.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration._isValid">
            <summary>
              A <b>bool</b> value indicates the configuration is valid.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration._names">
            <summary>
              A <b>string</b> array indicates the name of eras.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration._abbreviations">
            <summary>
              A <b>string</b> array indicates the abbreviations of eras.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration._symbols">
            <summary>
              A <b>string</b> array indicates the symbols of eras.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration._startDates">
            <summary>
              A <b>string</b> array indicates the start dates of eras.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration._shortcuts">
            <summary>
              A <b>string</b> array indicates the shortcuts of eras.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration._eraCount">
            <value>
              A <b>int</b> value indicates era count.
            </value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.IsValid">
            <summary>
              Gets a value indicates whether the configuration is valid.
            </summary>
            <value>
              A <b>bool</b> value indicates the configuration is valid.
            </value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.Names">
            <summary>
              Gets the names of Japanese eras
            </summary>
            <value>
              A <b>string</b> array indicates the name of eras.
            </value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.Abbreviations">
            <summary>
              Gets the abberviated names of the Japanese eras.
            </summary>
            <value>
              A <b>string</b> array indicates the abbreviations of eras.
            </value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.Symbols">
            <summary>
              Gets the symbol names of the Japanese eras.
            </summary>
            <value>
              A <b>string</b> array indicates the symbols of eras.
            </value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.StartDates">
            <summary>
              Gets the start dates of the each Japanese eras.
            </summary>
            <value>
              A <b>string</b> array indicates the start dates of eras.
            </value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.Shortcuts">
            <summary>
              Gets the shortcus of each Japanese eras.
            </summary>
            <value>
              A <b>string</b> array indicates the shortcuts of eras.
            </value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.EraCount">
            <summary>
              Gets the era count.
            </summary>
            <value>
              A <b>int</b> value indicates era count.
            </value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.GLOBAL_CONFIG_LOCATION">
            <summary>
            indicate the global config file location.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.JAPANESE_ERAS_SECTION_NAME">
            <summary>
              A <b>string</b> value indicates the japanse eras section name.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.JapaneseErasXPath">
            <summary>
            get the JAPANESE_ERAS_SECTION_NAME path.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.JapaneseErasTypeXPath">
            <summary>
            get the sectionhander path of type for JAPANESE_ERAS_SECTION_NAME.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.TryReadingCommonEraSettings">
            <summary>
              Try to read the settings form common custom era setting section.
            </summary>
            <returns>
              A <b>bool</b> value, <see langword="True"/> if the common era settings reading succeed; otherwise, <see langword="False"/>.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.#ctor">
            <summary>
              Initialize the instance of the class <see cref="T:FarPoint.Win.SuperEdit.JapaneseErasConfiguration"/>.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.Split(System.String,System.Char)">
            <summary>
            Use string replacing to handle an escaped comma, preceded with \, correctly.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseErasConfiguration.GetSectionHandler">
            <summary>
            get an section handler instance for era configuration.
            </summary>
            <returns>the era confgirutaion process instance.</returns>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.Configurations">
            <summary>
              A common entery for access the configurations for all the input man classes.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.Configurations.JapaneseEras">
            <summary>
              A <see cref="T:FarPoint.Win.SuperEdit.JapaneseErasConfiguration"/> instance indicates the Japanese eras informations.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.EraInfo">
            <summary>
              Represents the era info.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.EraInfo.#ctor(System.Int32,System.DateTime,System.DateTime,System.String,System.String,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:EraInfo"/> class.
            </summary>
            <param name="era">The era.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="eraName">Name of the era.</param>
            <param name="abbreviatedEraName">Name of the abbreviated era.</param>
            <param name="englishEraName">Name of the english era.</param>
            <param name="symbolEraName">Name of the symbol era.</param>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.EraInfo.Era">
            <summary>
              Gets the era.
            </summary>
            <value>The era.</value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.EraInfo.StartTime">
            <summary>
              Gets the start time.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.EraInfo.EndTime">
            <summary>
              Gets the end time.
            </summary>
            <value>The end time.</value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.EraInfo.EraName">
            <summary>
              Gets the name of the era.
            </summary>
            <value>The name of the era.</value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.EraInfo.AbbreviatedEraName">
            <summary>
              Gets the name of the abbreviated era.
            </summary>
            <value>The name of the abbreviated era.</value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.EraInfo.EnglishEraName">
            <summary>
              Gets the name of the english era.
            </summary>
            <value>The name of the english era.</value>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.EraInfo.SymbolEraName">
            <summary>
              Gets the name of the symbol era.
            </summary>
            <value>The name of the symbol era.</value>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.EraInfo.IsValid(System.DateTime)">
            <summary>
              Determines whether the specified date time is valid.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>
              <b>true</b> if the specified date time is valid; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.EraInfo.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarHelper.GetEraShortcuts(FarPoint.Win.SuperEdit.EraInfo)">
            <summary>
              Gets the shortcuts.
            </summary>
            <param name="eraInfo">
              The era info.
            </param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarHelper.GetDateTimeFormatInfoEx">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CalendarHelper.DateTimeFormatInfoEx">
            <summary>
            Gets datetime FormatInfo follow config file.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CalendarHelper.JapaneseCalendar">
            <summary>
              Gets the japanese calendar.
            </summary>
            <value>
              A <see cref="T:FarPoint.Win.SuperEdit.JapaneseCalendarEx"/> value indicates the japanese calendar.
            </value>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarHelper.GetJapaneseCalendarFromRegedit">
            <summary>
              Gets the japanese calendar from regedit.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarHelper.ValidString(System.String[])">
            <summary>
              Valids the string.
            </summary>
            <param name="strArray">The STR array.</param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.CalendarEx">
            <summary>
              This class implement a calendar extend in order to we can configure era information.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.CalendarEx._erasInfo">
            <summary>
              Save the data of eras info.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CalendarEx"></see> class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.#ctor(FarPoint.Win.SuperEdit.EraInfo[])">
            <summary>
              Initializes a new instance of the <see cref="T:CalendarEx"></see> class.
            </summary>
            <param name="erasInfo">
              An <see cref="T:FarPoint.Win.SuperEdit.EraInfo"/> array that represents the eras information. 
            </param>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CalendarEx.ErasInfo">
            <summary>
              Gets the eras information of this calendar.
            </summary>
            <returns>
              Return a <see cref="T:FarPoint.Win.SuperEdit.EraInfo"/> array.
            </returns>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CalendarEx.Eras">
            <summary>
              Gets the list of eras in the <see cref="T:CalendarEx"></see>.
            </summary>
            <returns>
              An array of integers that represents the eras in the <see cref="T:CalendarEx"></see>.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetEraInfo(System.Int32)">
            <summary>
              Gets the specify era information.
            </summary>
            <param name="era">
              The specify era id.
            </param>
            <returns>
              Return a <see cref="T:FarPoint.Win.SuperEdit.EraInfo"/> value.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetEraInfo(System.DateTime)">
            <summary>
              Gets the specify era information.
            </summary>
            <param name="dateTime">
              The specify date time value.
            </param>
            <returns>
              Return a <see cref="T:FarPoint.Win.SuperEdit.EraInfo"/> value.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetGregorianYear(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Gets the Gregorian year from a era and a era year.
            </summary>
            <param name="year">
              The specify era year.
            </param>
            <param name="era">
              The specify era.
            </param>
            <param name="throwError">
              if set to <b>true</b> throw error when don't fit the condition.
            </param>
            <returns>
              Return a <b>int</b> year value.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetGregorianYear(System.Int32,System.Int32)">
            <summary>
              Gets the Gregorian year from a era and a era year.
            </summary>
            <param name="year">
              The specify era year.
            </param>
            <param name="era">
              The specify era.
            </param>
            <returns>
              Return a <b>int</b> year value.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.IsValidYear(System.Int32,System.Int32)">
            <summary>
              Determines whether [is valid year] [the specified year].
            </summary>
            <param name="year">The year.</param>
            <param name="era">The era.</param>
            <returns>
              <b>true</b> if [is valid year] [the specified year]; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMaxEra">
            <summary>
              Gets the max era.
            </summary>
            <returns>A max era.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMinEra">
            <summary>
              Gets the min era.
            </summary>
            <returns>A min era.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMaxEraYear(System.Int32)">
            <summary>
              Gets the max era year.
            </summary>
            <param name="era">The era.</param>
            <returns>A max era year.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMinEraYear(System.Int32)">
            <summary>
              Gets the min era year.
            </summary>
            <param name="era">The era.</param>
            <returns>A min era year.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMaxEraYear(System.DateTime)">
            <summary>
              Gets the max era year.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMinEraYear(System.DateTime)">
            <summary>
              Gets the min era year.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMaxYear(System.DateTime)">
            <summary>
              Gets the max year.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> max year value.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMinYear(System.DateTime)">
            <summary>
              Gets the min year.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> min year value.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMaxMonth(System.DateTime)">
            <summary>
              Gets the max month.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> max month value.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMinMonth(System.DateTime)">
            <summary>
              Gets the min month.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> min month value.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMaxDay(System.DateTime)">
            <summary>
              Gets the max day.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> max day value.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.GetMinDay(System.DateTime)">
            <summary>
              Gets the min day.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>An <b>int</b> min dayr value.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.CalendarEx.ToFourDigitYear(System.Int32,System.Int32)">
            <summary>
              Converts the specified two-digit year to a four-digit year by using 
              the <see cref="P:System.Globalization.Calendar.TwoDigitYearMax"></see>
              property to determine the appropriate century.
            </summary>
            <param name="year">
              A two-digit integer that represents the year to convert.
            </param>
            <param name="twoDigitYearMax">
              A <b>int</b> value indicates the two digit year max.
            </param>
            <returns>
              An integer that contains the four-digit representation of year.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar or
              twoDigitYearMax large than 99 or twoDigitYearMax less than 9999. 
            </exception>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.CalendarEx.DefaultErasInfo">
            <summary>
              Gets the default eras info.
            </summary>
            <value>The default eras info.</value>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.JapaneseCalendarEx">
            <summary>
              Represents the Japanese calendar extend.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseCalendarEx.DefaultInstance">
            <summary>
              The <see cref="T:FarPoint.Win.SuperEdit.JapaneseCalendarEx"/> default instance.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GlobalErasInfo">
            <summary>
              An <see cref="T:FarPoint.Win.SuperEdit.EraInfo"/> array indicates the global eras info.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseCalendarEx.DEFAULT_TWO_DIGIT_YEAR_MAX">
            <summary>
              The default two digit year max value.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseCalendarEx._prototypeCalendar">
            <summary>
              Save the data of ptototype calendar property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseCalendarEx._maxSupportedDateTime">
            <summary>
              Save the data of max supported date time property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.JapaneseCalendarEx._minSupportedDateTime">
            <summary>
              Save the data of min supported date time property.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:JapaneseCalendarEx"></see> class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.#ctor(FarPoint.Win.SuperEdit.EraInfo[])">
            <summary>
              Initializes a new instance of the <see cref="T:JapaneseCalendarEx"></see> class.
            </summary>
            <param name="erasInfo">
              An <see cref="T:FarPoint.Win.SuperEdit.EraInfo"/> array that represents the eras information. 
            </param>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseCalendarEx.DefaultErasInfo">
            <summary>
              Gets the default eras infomations.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseCalendarEx.PrototypeCalendar">
            <summary>
              Gets a prototype calendar.
            </summary>
            <returns>
              Always return the <see cref="T:System.Globalization.Calendar"/> value.
            </returns>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseCalendarEx.TwoDigitYearMax">
            <summary>
              Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.
            </summary>
            <value></value>
            <returns>
              The last year of a 100-year range that can be represented by a 2-digit year.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              The current <see cref="T:System.Globalization.Calendar"></see> object is read-only.
            </exception>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseCalendarEx.AlgorithmType">
            <summary>
              Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both.
            </summary>
            <returns>
              Always returns the <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar"></see> value.
            </returns>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseCalendarEx.ID">
            <summary>
              Gets the calendar id.
            </summary>
            <returns>
              Always return the <b>int</b> value 3.
            </returns>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseCalendarEx.MaxSupportedDateTime">
            <summary>
              Gets the latest date and time supported by the current <see cref="T:JapaneseCalendarEx"></see> object.
            </summary>
            <returns>
              The latest date and time supported by the <see cref="T:JapaneseCalendarEx"></see> type, 
              which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.
            </returns>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.JapaneseCalendarEx.MinSupportedDateTime">
            <summary>
              Gets the earliest date and time supported by the current <see cref="T:JapaneseCalendarEx"></see> object.
            </summary>
            <returns>
              The earliest date and time supported by the <see cref="T:JapaneseCalendarEx"></see> type,
              which is equivalent to the first moment of September 8, 1868 C.E. in the Gregorian calendar. 
              For more information, see Remarks.
            </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.AddMonths(System.DateTime,System.Int32)">
            <summary>
              Returns a <see cref="T:System.DateTime"></see> that is the specified number of months away from
              the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              The <see cref="T:System.DateTime"></see> that results from adding the specified number of months
              to the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="months">
              The number of months to add. 
            </param>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to which to add months. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              months is less than -120000.-or- months is greater than 120000. 
            </exception>
            <exception cref="T:System.ArgumentException">
              The resulting <see cref="T:System.DateTime"></see> is outside the supported range. 
            </exception>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.AddYears(System.DateTime,System.Int32)">
            <summary>
              Returns a <see cref="T:System.DateTime"></see> that is the specified number of years away from 
              the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              The <see cref="T:System.DateTime"></see> that results from adding the specified number of years to 
              the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to which to add years. 
            </param>
            <param name="years">
              The number of years to add. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              time is outside the supported range of the <see cref="T:JapaneseCalendarEx"></see> type.
              -or-years is less than -10,000 or greater than 10,000. 
            </exception>
            <exception cref="T:System.ArgumentException">
              The resulting <see cref="T:System.DateTime"></see> is outside the supported range. 
            </exception>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GetDayOfMonth(System.DateTime)">
            <summary>
              Returns the day of the month in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              An integer from 1 to 31 that represents the day of the month in the 
              specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GetDayOfWeek(System.DateTime)">
            <summary>
              Returns the day of the week in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              A <see cref="T:System.DayOfWeek"></see> value that represents the day of the week 
              in the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GetDayOfYear(System.DateTime)">
            <summary>
              Returns the day of the year in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
            <summary>
              Returns the number of days in the specified month in the specified year in the specified era.
            </summary>
            <returns>
              The number of days in the specified month in the specified year in the specified era.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="month">
              An integer from 1 to 12 that represents the month. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- month is outside the range supported by the calendar.
              -or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GetDaysInYear(System.Int32,System.Int32)">
            <summary>
              Returns the number of days in the specified year in the specified era.
            </summary>
            <returns>
              The number of days in the specified year in the specified era.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GetEra(System.DateTime)">
            <summary>
              Returns the era in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              An integer that represents the era in the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="dateTime">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GetLeapMonth(System.Int32,System.Int32)">
            <summary>
              Calculates the leap month for a specified year and era.
            </summary>
            <returns>
              The return value is always 0 because the <see cref="T:JapaneseCalendarEx"></see> type
              does not support the notion of a leap month.
            </returns>
            <param name="era">
              An era.
            </param>
            <param name="year">
              A year.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year or era is outside the range supported by the <see cref="T:JapaneseCalendarEx"></see> type.
            </exception>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GetMonth(System.DateTime)">
            <summary>
              Returns the month in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              An integer from 1 to 12 that represents the month in the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="time">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GetMonthsInYear(System.Int32,System.Int32)">
            <summary>
              Returns the number of months in the specified year in the specified era.
            </summary>
            <returns>
              The return value is always 12.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
              Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime"></see> object.
            </summary>
            <returns>
              A 1-based integer that represents the week of the year that includes the date in the time parameter.
            </returns>
            <param name="rule">
              One of the <see cref="T:System.Globalization.CalendarWeekRule"></see> values that defines a calendar week. 
            </param>
            <param name="firstDayOfWeek">
              One of the <see cref="T:System.DayOfWeek"></see> values that represents the first day of the week. 
            </param>
            <param name="time">
              The <see cref="T:System.DateTime"></see> object to read. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              time or firstDayOfWeek is outside the range supported by the calendar.
              -or- rule is not a valid <see cref="T:System.Globalization.CalendarWeekRule"></see> value. 
            </exception>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.GetYear(System.DateTime)">
            <summary>
              Returns the year in the specified <see cref="T:System.DateTime"></see>.
            </summary>
            <returns>
              An integer that represents the year in the specified <see cref="T:System.DateTime"></see>.
            </returns>
            <param name="dateTime">
              The <see cref="T:System.DateTime"></see> to read. 
            </param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Determines whether the specified date in the specified era is a leap day.
            </summary>
            <returns>
              true, if the specified day is a leap day; otherwise, false.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="month">
              An integer from 1 to 12 that represents the month. 
            </param>
            <param name="day">
              An integer from 1 to 31 that represents the day. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- month is outside the range supported by the calendar.
              -or- day is outside the range supported by the calendar.-or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
            <summary>
              Determines whether the specified month in the specified year in the specified era is a leap month.
            </summary>
            <returns>
              This method always returns false, unless overridden by a derived class.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="month">
              An integer from 1 to 12 that represents the month. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- month is outside the range supported by the calendar.
              -or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.IsLeapYear(System.Int32,System.Int32)">
            <summary>
              Determines whether the specified year in the specified era is a leap year.
            </summary>
            <returns>
              true, if the specified year is a leap year; otherwise, false.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.
              -or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.JapaneseCalendarEx.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Returns a <see cref="T:System.DateTime"></see> that is set to the specified date and time in the specified era.
            </summary>
            <returns>
              The <see cref="T:System.DateTime"></see> that is set to the specified date and time in the current era.
            </returns>
            <param name="era">
              An integer that represents the era. 
            </param>
            <param name="month">
              An integer from 1 to 12 that represents the month. 
            </param>
            <param name="millisecond">
              An integer from 0 to 999 that represents the millisecond. 
            </param>
            <param name="day">
              An integer from 1 to 31 that represents the day. 
            </param>
            <param name="minute">
              An integer from 0 to 59 that represents the minute. 
            </param>
            <param name="year">
              An integer that represents the year. 
            </param>
            <param name="hour">
              An integer from 0 to 23 that represents the hour. 
            </param>
            <param name="second">
              An integer from 0 to 59 that represents the second. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              year is outside the range supported by the calendar.-or- month is outside the range supported by the calendar.
              -or- day is outside the range supported by the calendar.-or- hour is less than zero or greater than 23.
              -or- minute is less than zero or greater than 59.-or- second is less than zero or greater than 59.
              -or- millisecond is less than zero or greater than 999.-or- era is outside the range supported by the calendar. 
            </exception>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtStrParserExcel">
            <summary>
            ParsedFmtString
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.#ctor">
            <summary>
            Constructor (without string table object).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.#ctor(System.Collections.IDictionary)">
            <summary>
            Constructor with string table dictionary.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.ParseFormatString(System.String,FarPoint.Win.SuperEdit.MaskType)">
            <summary>
            Parses format string into its various parts.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtStrParserExcel.FmtColor">
            <summary>
            Define the colors recognized in format string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.GetColorForColorIndex(System.Int32)">
            <summary>
            Converts a "color index" to a .NET "Color" object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.DivideString(System.String,FarPoint.Win.SuperEdit.FmtParsedExcel@)">
            <summary>
            This scans thru the string seperating it into sections 
            which are delimited by semicolons (;).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserExcel.ParseForConditionals(FarPoint.Win.SuperEdit.FmtParsedExcel@)">
            <summary>
            Parses each "portion" of the format string looking
            for conditional situations.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtStrParserPicMask">
            <summary>
            ParsedPicMaskString
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserPicMask.ParseFormatString(System.String,FarPoint.Win.SuperEdit.MaskType)">
            <summary>
            Parses format string into its various parts.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserPicMask.GetMaskCodeForChar(System.Char)">
            <summary>
            Returns "Mask code" for passed char.  Returns SE_MASK_LIT if not
            a mask char.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserPicMask.IsMaskChar(System.Char)">
            <summary>
            Returns TRUE if char is a member of the Pic Mask set. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrDateParserTypeMask.ParseFormatString(System.String,FarPoint.Win.SuperEdit.MaskType)">
            <summary>
            Parses format string into its various parts.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrDateParserTypeMask.ParseChar(System.String,System.Int32,System.Int32@,System.Char@,System.Int32@)">
            <summary>
            Parses one char of the format string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrDateParserTypeMask.MaxCharCountForParseFld(System.Int32)">
            <summary>
            Returns the max number of C's allowed for this id (ex. for 'Y'
            the max is 4 Y's - YYYY, so 4 is returned for Y).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrDateParserTypeMask.GetLitSegNearFld(System.Int32,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            If no segment between fields (FALSE), 0 is put in Pos and 0 in Len.
            If fBeforeFld is TRUE, then before field, else following field.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrDateParserTypeMask.GetLitSegBeforeFld(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            If no segment between fields (FALSE), 0 is put in Pos and 0 in Len.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrDateParserTypeMask.GetNumOfFields">
            <summary>
            Returns the value of m_uFormatOrderCount (number of fields found).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrDateParserTypeMask.GetFldIdAtOrderPos(System.Int32,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Returns the Fld id at the requested order index.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrDateParserTypeMask.FillFmtFldArrays">
            <summary>
            Pulls the info from the Parser object and sets up the fmtfld array
            and seperator arrays.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrDateParserTypeMask.ValidateFldArrays(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            This method verifies that variable-length fields have
            between fields either literal seperators (which must be 
            non-numeric) or fixed-length fields. 
            Two numeric, var-len fields cannot be next to each other
            without a seperator.  In addition, a var-len fld cannot
            precede a fixed length numeric field.
            THROWS AN EXCEPTION if there's a problem.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrDateParserTypeMask.GetFldFmtForParsedFldId(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the Format Mask Id (MaskFmtYY) for the specified parser field.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.FmtStrParserTypeMask">
            <summary>
            ParsedTypeMaskString
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.ParseFormatString(System.String,FarPoint.Win.SuperEdit.MaskType)">
            <summary>
            Parses format string into its various parts.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.ParseChar(System.String,System.Int32,System.Int32@,System.Char@,System.Int32@)">
            <summary>
            Parses one char of the format string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.MaxCharCountForParseFld(System.Int32)">
            <summary>
            Returns the max number of C's allowed for this id (ex. for 'Y'
            the max is 4 Y's - YYYY, so 4 is returned for Y).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.GetLitSegNearFld(System.Int32,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            If no segment between fields (FALSE), 0 is put in Pos and 0 in Len.
            If fBeforeFld is TRUE, then before field, else following field.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.GetLitSegBeforeFld(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            If no segment between fields (FALSE), 0 is put in Pos and 0 in Len.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.WasFldSpecifiedInString(System.Int32,System.Int32@)">
            <summary>
            If the specified fld was included in the format string, then TRUE
            is returned (along with the count of chars in string).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.GetNumOfFields">
            <summary>
            Returns the value of m_uFormatOrderCount (number of fields found).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.GetFldIdAtOrderPos(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the Fld id at the requested order index.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.FillFmtFldArrays">
            <summary>
            Pulls the info from the Parser object and sets up the fmtfld array
            and seperator arrays.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.ValidateFldArrays(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String)">
            <summary>
            This method verifies that variable-length fields have
            between fields either literal seperators (which must be 
            non-numeric) or fixed-length fields. 
            Two numeric, var-len fields cannot be next to each other
            without a seperator.  In addition, a var-len fld cannot
            precede a fixed length numeric field.
            THROWS AN EXCEPTION if there's a problem.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.FmtStrParserTypeMask.GetFldFmtForParsedFldId(System.Int32,System.Int32)">
            <summary>
            Returns the Format Mask Id (MaskFmtYY) for the specified parser field.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.GeneralFormatter">
            <summary>
            Implements the GeneralFormatter interface.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.cnvtbLiteralDelimiter">
            <summary>Literal delimiter</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseEmptyUndefined">
            <summary>Empty undefined</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseNumericValue">
            <summary>Numeric value</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseTextValue">
            <summary>Text value</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseDateValue">
            <summary>Date value</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseFormulaValue">
            <summary>Formula value</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseCurrencyValue">
            <summary>Currency value</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpsePercentValue">
            <summary>Percent value</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseDecodeInvalidDate">
            <summary>Invalid date</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseDecodeValidDate">
            <summary>Valid date</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseDecodeDateResultsMask">
            <summary>Date mask</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseDecodeTimeResultsMask">
            <summary>Time mask</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseDecodeInvalidTime">
            <summary>Invalid time</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseDecodeValidTime">
            <summary>Valid time</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseYear">
            <summary>Year</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseMonth">
            <summary>Month</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseDay">
            <summary>Day</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseHour">
            <summary>Hour</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseMinute">
            <summary>Minute</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSecond">
            <summary>Second</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseTimeDesignator">
            <summary>Time designator</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolUndefined">
            <summary>Undefined symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolUnknown">
            <summary>Unknown symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolNumbericDigits">
            <summary>Numeric digits symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolNumberUsedForDate">
            <summary>Number for date symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolNumberUsedForTime">
            <summary>Number for time symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolWhiteSpace">
            <summary>White space symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMinus">
            <summary>Minus symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolComma">
            <summary>Comma symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolTimeAMStringGrp">
            <summary>Time AM symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolTimePMStringGrp">
            <summary>Time PM symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolDateSeparatorGrp">
            <summary>Date separator symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolTimeSeparatorGrp">
            <summary>Time separator symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthNameGrp">
            <summary>Month name symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName1Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName2Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName3Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName4Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName5Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName6Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName7Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName8Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName9Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName10Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName11Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolMonthName12Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthNameGrp">
            <summary>Month short name symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName1Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName2Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName3Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName4Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName5Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName6Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName7Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName8Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName9Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName10Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName11Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseSymbolShortMonthName12Grp">
            <summary></summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseDatePartsMaximum">
            <summary>Maximum number of date parts</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseTimePartsMaximum">
            <summary>Maximum number of time parts</summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters">
            <summary>Represents the decode parameters.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.TimeSeparatorsCount">
            <summary>Gets or sets time separators.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.DateSeparatorsCount">
            <summary>Gets or sets date separators.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.DateParts">
            <summary>Gets or sets date parts.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.TimeParts">
            <summary>Gets or sets time parts.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.DateSeparator">
            <summary>Gets or sets the date separator.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.TimeSeparator">
            <summary>Gets or sets the time separator.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.TimeAMString">
            <summary>Gets or sets the time AM string.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.TimePMString">
            <summary>Gets or sets the time PM string.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.IsPendingNumber">
            <summary>Gets or sets whether number pending.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.IsAM">
            <summary>Gets or sets whether time is AM.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.IsPM">
            <summary>Gets or sets whether time is PM.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.DatePartsAllowed">
            <summary>Gets or sets number of date parts allowed.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.DatePartsCount">
            <summary>Gets or sets number of date parts.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.DateSeparatorCount">
            <summary>Gets or sets number of date separators.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.MonthPartIndex">
            <summary>Gets or sets number of month part.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.SymbolPrevious">
            <summary>Gets or sets previous symbol.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.TimePartsAllowed">
            <summary>Gets or sets number of time parts allowed.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.TimePartsCount">
            <summary>Gets or sets number of time parts.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.PendingNumberValue">
            <summary>Gets or sets pending number value.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.TimeFormatOrder">
            <summary>Gets or sets order format of time.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.DateFormatOrder">
            <summary>Gets or sets order format of date.</summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters.#ctor(System.Int32,System.Int32)">
            <summary>
            Gets or sets decode parameters.
            </summary>
            <param name="dtMax">Date maximum</param>
            <param name="tmMax">Time maximum</param>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.strDefCurrencySym">
            <summary>Currency symbol</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseTempStringMax">
            <summary>Maximum number of characters.</summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.GeneralFormatter.fpseMonthSeparatorCharSet">
            <summary>Month separator character set.</summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.RegionSettings">
            <summary>
            Gets or sets the Regional settings.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.GeneralFormatter.ManageInput">
            <summary>
            This class does not support "Managed Input".
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.FromFormattedString(System.String)">
            <summary>
            Parses and returns the "value" from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.FromUnformattedString(System.String,System.IFormatProvider@,System.String@)">
            <summary>
            Parses and returns the "value" from an unformatted string along with additional information about the parsed string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the "value" from an unformatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.ToUnformattedString(System.Object)">
            <summary>
            Returns an unformatted string for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.GetPseudoParsedStringType(System.String)">
            <summary>
            Gets the parsed string type.
            </summary>
            <param name="value">Value string</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.PrivConvToBinaryValue(System.String,System.Int32,System.Object@,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Converts a string to a date or numeric value.
            </summary>
            <param name="szText"></param>
            <param name="iDataLen"></param>
            <param name="pVar"></param>
            <param name="iDataType"></param>
            <param name="iRetFlags"></param>
            <param name="iOptDictateDataType"></param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.PrivConvToBinaryValue(System.String,System.Int32,System.Object@,System.Int32@,System.Int32@,System.Int32,System.IFormatProvider@,System.String@)">
            <summary>
            Converts a string to a date or numeric value.
            </summary>
            <param name="szText"></param>
            <param name="iDataLen"></param>
            <param name="pVar"></param>
            <param name="iDataType"></param>
            <param name="iRetFlags"></param>
            <param name="iOptDictateDataType"></param>
            <param name="formatInfo"></param>
            <param name="formatString"></param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.GetLeftDigitGroup(System.String,System.Int32,System.Int32,System.Int32,System.Char,System.Int32,System.Int32@)">
            <summary>
            Returns the indexes (start and end) of the group of numbers at the 
            left side of the decimal point
            </summary>
            <param name="szText"></param>
            <param name="iTextLen"></param>
            <param name="iDecimalPlace"></param>
            <param name="iScientificNotation"></param>
            <param name="cThousandChar"></param>
            <param name="iNumOfDigitsBetweenSeperators"></param>
            <param name="iRetFirstDigit"></param>
            <returns>true if placement is OK (or no thousand seperators found); false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.ValidatePosNegSignPlacement(System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Determines if the Positive/Negative sign is allowed at the current position.
            </summary>
            <param name="fNegSignChar"></param>
            <param name="fSctfc"></param>
            <param name="iSctfcNota"></param>
            <param name="fOpenParen"></param>
            <param name="fNumericChars"></param>
            <param name="iCurrCharIndex"></param>
            <param name="fNumSign"></param>
            <param name="fNegative"></param>
            <param name="fExpNumSign"></param>
            <param name="fExpNegative"></param>
            <returns>true is sign is in valid place; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.DecodeDateString(System.String,System.Int32,System.Object@,System.String@,System.String@)">
            <summary>
            Parses the date string into a numerical date value.
            </summary>
            <param name="szData"></param>
            <param name="iDataLen"></param>
            <param name="dtRetDate"></param>
            <param name="dateFormat"></param>
            <param name="timeFormat"></param>
            <returns>defines FPSE_DECODE_... (in file: sedt_cls.h)</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.ProcessDateSymbolDigits(FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters,System.String,System.Int32,System.Int32@)">
            <summary>
            Processes the digit(s) symbol for a date/time string.
            </summary>
            <param name="pParams">Parameters</param>
            <param name="szData">Size of data</param>
            <param name="iSymbolLen">Length</param>
            <param name="iRetSymUse">Return symbol use</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.TranslateDateSymbol(FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters,System.String,System.Int32@)">
            <summary>
            Returns a list of possible "date symbols" for the first "token" 
            in the passed string.
            </summary>
            <param name="pvParams">Parameters</param>
            <param name="szData">Size of data</param>
            <param name="iCurrIndex">Current index</param>
            <returns>first symbol put in returned symbol list</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.MatchStringToMonthName(System.String,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Determines if the passed string begins with one of the month names.
            </summary>
            <param name="szText">Text size</param>
            <param name="iRetMonth">Return month name</param>
            <param name="iRetMonthNameLen">Length of return month name</param>
            <param name="longName">Whether month name is long name</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.GetDateTimePartOrdering(FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters)">
            <summary>
            Parses date and time format strings to determine the order of the day-month-year
            and/or hour-min-secs (and which are included). 
            </summary>
            <param name="pParams">Parts parameters</param>
            <returns>false if no date and no time is allowed; true otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.GetDatePartOrdering(FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters,System.String)">
            <summary>
            Parses date format string to determine the order of the day-month-year
            (and which are included).
            </summary>
            <param name="pParams">Parts parameters</param>
            <param name="shortDateFmt">Short date format string</param>
            <returns>false if no date parts were found; otherwise true</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.GetTimePartOrdering(FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters,System.String)">
            <summary>
            Parses time format string to determine the order of the hour-min-secs-am/pm 
            (and which are included).
            </summary>
            <param name="pParams">Parts parameters</param>
            <param name="strTimeFmt">Time format string</param>
            <returns>false if no time parts were found; true otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.ConvertDateTimePartsToValue(FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters,System.Int32,System.Int32,System.Int32,System.Object@)">
             <summary>
             Given the date and time parts, convert to date and time values.
             </summary>
             <param name="pParams"></param>
             <param name="lCurrYear"></param>
             <param name="lCurrCentury"></param>
             <param name="usCentSplitYear"></param>
             <param name="retDateTimeObj"></param>
             <returns>bit flag about the results of the conversion:
               fpseDecodeDateResultsMask   0x03  (bits 0 and 1)
               FPSE_DECODE_NODATE            0x00  // no date specified in string
               fpseDecodeInvalidDate       0x01  // date specified but invalid
               fpseDecodeValidDate         0x02  // specified and valid
            
               fpseDecodeTimeResultsMask   0x0C  (bits 3 and 4)
               FPSE_DECODE_NOTIME            0x00  // no time specified in string
               fpseDecodeInvalidTime       0x04  // time specified but invalid
               fpseDecodeValidTime         0x08  // specified and valid
             </returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.ConvertDatePartsToValue(FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters,System.Int32,System.Int32,System.Int32,System.DateTime@)">
            <summary>
            Given the date parts, convert to a date value.
            </summary>
            <param name="pParams">Decode parameters</param>
            <param name="lCurrYear">Current year</param>
            <param name="lCurrCentury">Current century</param>
            <param name="usCentSplitYear">Century split year</param>
            <param name="dtRetDate">Return date time</param>
            <returns>true if the date parts could be converted to a date value; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.GeneralFormatter.ConvertTimePartsToValue(FarPoint.Win.SuperEdit.GeneralFormatter.FpseDecodeParameters,System.TimeSpan@)">
            <summary>
            Given the time parts, convert to a time value.
            </summary>
            <param name="pParams"></param>
            <param name="retTime"></param>
            <returns>true if the time parts could be converted to a time value; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.MatchAbbrevList(System.String,System.String[],System.Int32@,System.Boolean)">
            <summary>
            Returns the index number starting with "1" (not 0) if the passed string 
            matches (or partially matches) one of the items in the list. 
            Also indicates if the string matches more than one item. 
            To be used for matching 3-letter months and 3-letter days.
            Returns 0 if no match was found.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.CmpStringsIgnoreLen(System.String,System.String)">
            <summary>
            Compares two strings ignoring their lengths. Example:
            "Ab" and "abCD" will compare equal, since the short string is
            a subset of the longer string.  The only case where the lengths
            matter on the compare is when one "" (or null) and the other 
            is not "" (or null), then the "" will be less than the non-"".
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.Match_AMPM_Strings(System.String,System.String,System.String,System.Int32@)">
             <summary>
             Returns index into the list of AM/PM strings (0..uAmPmStrCount-1) of the
             first string which matches the target.
            
             Also indicates if the string matches more than one string.
            
             Returns -1 if no match was found.
             </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_MM_or_HH(System.Boolean)">
            <summary>
            Returns 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_M_or_H(System.Boolean)">
            <summary>
            Returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_DD">
            <summary>
            Returns 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_D">
            <summary>
            Returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_HH24">
            <summary>
            Returns 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_H24">
            <summary>
            Returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_NN_or_SS">
            <summary>
            Returns 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_N_or_S">
            <summary>
            Returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_AllDigits(System.Int32)">
            <summary>
            Returns 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_ListFld(System.String[],System.Int32@)">
            <summary>
            Returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.InputValidation.VerifyCharFor_Ts(System.String,System.String)">
            <summary>
            This method builds a list from strAM and strPM, 
            and calls VerifyCharFor_ListFld().
            It returns 2 if char is for next fld, 1 if ok, 0 if error.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.InputPosType">
            <summary>
            Specifies the types of input positions (not the types of data).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.InputPosType.InsertPos">
            <summary>
            Insert position
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.InputPosType.FixedFldPos">
            <summary>
            Fixed field position
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.InputPosType.LiteralPos">
            <summary>
            Literal position
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:FarPoint.Win.SuperEdit.IManageFmtInput2" -->
        <member name="P:FarPoint.Win.SuperEdit.IManageFmtInput2.OriginalValue">
            <summary>
            Gets or sets the Original value
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.IManageFmtInput">
            <summary>
            Interface that provides a way to determine if 
            the specified user input action is valid for a 
            format and supplies the results of the action.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IManageFmtInput.MinimumValue">
            <summary>
            Gets or sets the minimum value allowed. 
            (Optional. To clear, set to null.)
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IManageFmtInput.MaximumValue">
            <summary>
            Gets or sets the maximum value allowed. 
            (Optional. To clear, set to null.)
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IManageFmtInput.InitialValue">
            <summary>
            Gets or sets the initial value if the string is null. 
            (Optional. To clear, set to null.)
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetInitialText">
            <summary>
            Returns the initial text for a format.  
            </summary>
            <remarks>Used when starting a new value. 
            Note: this gives the same results as calling "ChangeText()"
            with all the text selected and the "insertText" parameter 
            is null or empty.</remarks>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.CharInput(System.Int32,System.Char,System.String,System.Int32,System.Int32,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if the input character is 
            allowed under given conditions. If not allowed, returns false.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.ChangeText(System.String,System.Int32,System.Int32,System.String,System.String@,System.Int32@,System.Boolean)">
            <summary>
            Returns the resulting text and position if the change is 
            allowed for the given conditions. If no changes are made 
            (due to invalid input), returns false.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.ChangeText(System.String,System.String@)">
            <summary>
            Returns the resulting text if the change is allowed 
            for the given conditions. If no changes are made 
            (due to invalid input), false is returned.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetInitialInputPos(System.String)">
            <summary>
            Returns the initial input position for the given text.
            This initial position may not be the first input position.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.IsInputAllowedAtPos(System.String,System.Int32)">
            <summary>
            Returns whether the input is allowed at the specified 
            position (index) for the given text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetLastPosInputIsAllowed(System.String)">
            <summary>
            Returns the last position that can receive input 
            for the given text. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetNextInputPos(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the next input position dependent on the direction,
            the current text, and the current position.
            A value of -1 for direction means the previous direction.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetCaretTypeAtPos(System.String,System.Int32)">
            <summary>
            Returns one of the following values for the position in
            the given text: InputPosType.InsertPos, .FixedFldPos, or .LiteralPos
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.IncrementValue(System.String,System.Int32,System.Object,System.Boolean,System.Object,System.String@,System.Int32@)">
            <summary>
            Increments or decrements (dependent on sign of "incrAmt")
            the value represented by the text.
            </summary>
            <param name="currText">Current text string</param>
            <param name="position">Position index</param>
            <param name="incrAmt">Amount to increment</param>
            <param name="wrapValueFlag">Whether to wrap to multiple lines</param>
            <param name="initValueIfBlank">Initial value if blank</param>
            <param name="resultText">Result text string</param>
            <param name="resultCaretPos">Result input position</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.GetFormatStringAtPos(System.String,System.Int32)">
            <summary>
            Returns the format string for the field at the specified
            position in the given text.  
            </summary>
            <remarks> Example: Format String: "d/mm/yy", currText: "25/12/02"
                     position: 3.  This method will return "mm".
            Returns "" if bad position.  If at a literal position,
            then the char at that position, preceded with a backslash,
            is returned ("\c" where 'c' is the actual char).
            </remarks>
            <param name="currText">Current text string</param>
            <param name="position">Position index</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IManageFmtInput.IsNegative(System.String)">
            <summary>
            Returns whether a string is negative according to the regional settings.
            </summary>
            <param name="text">String of text</param>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.MaskFldValue">
            <summary>
            MaskFldValue
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.RemoveNegPosPattern(System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            NOTE: This method does not check if the text actually
            has the negative pattern, if removes the char positions
            assuming the text has the negative pattern.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.AdjustSelectionForNegPosPattern(System.Int32,System.Int32@,System.Int32@,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Adjusts the selection after the negative pattern has
            been removed from the text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.AdjustForValidValue">
             <summary>
             Check that the values in the fields make a valid date and/or time,
             if not, adjust the values.  
            
             NOTE: Not all fields have to be supplied, for example, if we are 
             given only the month and day for a date field, we can verify that
             the day specified is valid for the given month, but without the 
             year, we cannot give a exact number of days for febraury. However, we
             at least know that there can't ever be more than 29 days in that month.
            
             Returns TRUE if any values were adjusted.
             </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.GetBinaryValue">
            <summary>
            Returns the "binary object" for the value stored in
            "this". Example: for date, DateTime object is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.GetBinaryValue(System.Boolean)">
            <summary>
            Returns the "binary object" for the value stored in
            "this". Example: for date, DateTime object is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.FormatThousSep(System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Used by FormatValue(), adds Neg sign and thousands seperator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.PrivAdjustForLimitVal(System.Object,System.Boolean,System.Boolean,System.Object)">
            <summary>
            </summary>
            <returns>1 if adjustment was needed, 0 if not adjusted, -1
            if there was an error.</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.GetMonthsInYear">
            <summary>
            Given what is currently set (year and possible era), return
            the max number of month (if no year or is leap year, and is
            Hebrew calendar, return 13, otherwise 12).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.GetDaysInMonth">
            <summary>
            Given what is currently set (month, year and possible era), return
            the max number of days in month. If not enough things are set
            (if no year or month), then default to 31, else
            call calendar method.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.ChangeDateForWeekday(System.Int32,System.Object,System.Object)">
            <summary>
            Adjust the date for the "closest" specified dayOfWeek.
            Returns true if everything is ok, otherwise false if
            there's a problem with the change.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFldValue.ChangeDateForEra(System.Int32,System.Object,System.Object)">
            <summary>
            Ensure that the date with the new era is valid.
            Returns true if everything is ok, otherwise false if
            there is a problem with the change.
            Note: minValue and maxValue, if specified, are DateTime
            objects and restrict the entire date, not just the era.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.MaskType">
            <summary>
            Specifies the type of mask (not type of data).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.None">
            <summary>
            Indicates no mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.PicMask">
            <summary>
            Indicates a PIC mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.Integer">
            <summary>
            Indicates an integer mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.Float">
            <summary>
            Indicates a single-precision, floating-point number mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.Double">
            <summary>
            Indicates a double-precision, floating-point number mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.Decimal">
            <summary>
            Indicates a decimal mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.Currency">
            <summary>
            Indicates a currency mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.Date">
            <summary>
            Indicates a date mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.Time">
            <summary>
            Indicates a time mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.DateTime">
            <summary>
            Indicates a date-time mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.Percent">
            <summary>
            Indicates a percent mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.SimpleDate">
            <summary>
            Indicates a date mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.SimpleTime">
            <summary>
            Indicates a time mask type
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.MaskType.SimpleDateTime">
            <summary>
            Indicates a datetime mask type
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.MaskFormatter">
            <summary>
            Represents a mask formatter.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEdit.MaskFormatter.CustomMask">
            <summary>
            Handles custom mask event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.#ctor">
            <summary>
            Creates a new mask formatter with default values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.IgnoreThrowFormatException">
            <summary>
            Sets allow ignore throw format exception or not.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.#ctor(FarPoint.Win.SuperEdit.MaskType)">
            <summary>
            Creates a new mask formatter with the specified type of mask.
            </summary>
            <param name="masktype">Type of mask</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.#ctor(FarPoint.Win.SuperEdit.MaskType,System.String)">
            <summary>
            Creates a new mask formatter with the specified type of mask and format.
            </summary>
            <param name="masktype">Type of mask</param>
            <param name="formatstring">Format string</param>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.RegionSettings">
            <summary>
            Gets or sets the regional settings.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.ManageInput">
            <summary>
            If implemented, it supports methods which allow an editor
            to use for validating and formatting user input.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.MaskType">
            <summary>
            Gets or sets the type of mask (ex: none, PicMask, Float).
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.HasNegativeSign(System.String)">
            <summary>
            Determines whether the specified text has a negative sign.
            </summary>
            <param name="text">Text string</param>
            <returns>Whether text has negative sign</returns>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.IsFmtStrParsed">
            <summary>
            Determines whether the format string has been parsed since
            it was set or changed (or something else changed).
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.MaskChar">
            <summary>
            Gets or sets the mask character.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.MaskFormatter.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.ParseFormatString">
            <summary>
            Parses the format string.
            </summary>
            <returns>Whether parsing successful</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.OnCustomMask(System.Object,FarPoint.Win.SuperEdit.CustomMaskEventArgs)">
            <summary>
            Occurs when the custom mask is used.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.FromFormattedString(System.String)">
            <summary>
            Parses and returns the "value" from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.FromFormattedString(System.String,System.Boolean)">
            <summary>
            Parses and returns the "value" from a formatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the "value" from an unformatted string.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.ToUnformattedString(System.Object)">
            <summary>
            Returns an unformatted string for the value passed.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.MaskFormatter.VerifyParsedObject">
            <summary>
            Verifies the parsed object.
            </summary>
            <returns>Whether verified</returns>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.IRegionalSettings">
            <summary>
            Interface that defines the methods and properties required by objects 
            for defining Regional Settings (Regional Options).
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NumberLeadingZero">
            <summary>
            Gets or sets whether to display a leading zero in float numbers.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NumberDecimalDigits">
            <summary>
            Gets or sets the number of decimal places in float numbers.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NumberGroupSeparator">
            <summary>
            Gets or sets the string that separates a number group.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NumberGroupSize">
            <summary>
            Gets or sets the number of digits in each number group.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NumberNegativePattern">
            <summary>
            Gets or sets the format for negative values.
            </summary>
            <remarks>
            Setting values match the .NET Framework's 
            NumberFormatInfo.NumberNegativePattern values.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PercentSign">
            <summary>
            Gets or sets the string that indicates a percent value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PercentDecimalDigits">
            <summary>
            Gets or sets the number of decimal places in percent values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PercentNegativePattern">
            <summary>
            Gets or sets the format for negative percent values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PercentPositivePattern">
            <summary>
            Gets or sets the format for positive percent values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.NegativeSign">
            <summary>
            Gets or sets the string that indicates a negative value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PositiveSign">
            <summary>
            Gets or sets the string that indicates a positive value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.DecimalSeparator">
            <summary>
            Gets or sets the string that indicates the decimal symbol.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrencyDecimalDigits">
            <summary>
            Gets or sets the number of decimal places in currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrencySymbol">
            <summary>
            Gets or sets the string that indicates the currency symbol.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrencyNegativePattern">
            <summary>
            Gets or sets the format for negative currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrencyPositivePattern">
            <summary>
            Gets or sets the format for positive currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.AbbreviatedDayNames">
            <summary>
            Gets or sets the array of abbreviated names of days.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.AbbreviatedMonthNames">
            <summary>
            Gets or sets the array of abbreviated names of months.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.DayNames">
            <summary>
            Gets or sets the array of day names.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.MonthNames">
            <summary>
            Gets or sets the array of month names.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.DateSeparator">
            <summary>
            Gets or sets the string that separates the portions of a date value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.ShortDateFormat">
            <summary>
            Gets or sets the format of a short date.
            </summary>
            <remarks>
            Use for decoding a generic date value.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.LongDateFormat">
            <summary>
            Gets or sets the format of a long date.
            </summary>
            <remarks>
            Use for decoding a generic date value.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.TimeFormat">
            <summary>
            Gets or sets the format of a time value.
            </summary>
            <remarks>
            Use for decoding a generic time value.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.TimeSeparator">
            <summary>
            Gets or sets the string that separates the portions of a time value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.AMDesignator">
            <summary>
            Gets or sets the string that indicates morning in a 12-hour time.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.PMDesignator">
            <summary>
            Gets or sets the string that indicates afternoon and evening in a 12-hour time.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrentYear">
            <summary>
            Gets or sets the current year if the year is not specified in a date value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.DateTimeFormat">
            <summary>
            Gets the DateTimeFormatInfo object associated with the current culture.
            </summary>
            <remarks>
            If no current culture is set, a new object is returned but not
            stored. (Any changes will not persist).
            </remarks>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.TwoDigitYearMax">
            <summary>
            Gets or sets the last year of a 100-year range that can be 
            represented by a two-digit year.  
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.Calendar">
            <summary>
            Gets or sets the Calendar for formatting date values
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrencyGroupSeparator">
            <summary>
            Gets or sets the string that separates a currency group.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrencyGroupSize">
            <summary>
            Gets or sets the number of digits in each currency group.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IRegionalSettings.CurrencyDecimalSeparator">
            <summary>
            Gets or sets the string that indicates the currency decimal symbol.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.RegionalSettingsProps">
            <summary>
            Specifies the Regional Settings properties.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.NumGrpSep">
            <summary>
            Number group separator
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.NumGrpSize">
            <summary>
            Number group size
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.NumNegPattern">
            <summary>
            Number negative pattern
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.NegSign">
            <summary>
            Negative sign
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.PosSign">
            <summary>
            Positive sign
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.DecSep">
            <summary>
            Decimal separator
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.CurrencySym">
            <summary>
            Currency symbol
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.CurrencyNegativePattern">
            <summary>
            Currency negative pattern
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.CurrencyPositivePattern">
            <summary>
            Currency positive pattern
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.AbbrvDayNames">
            <summary>
            Abbreviated day names
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.AbbrvMonthNames">
            <summary>
            Abbreviated month names
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.DayNames">
            <summary>
            Day names
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.MonthNames">
            <summary>
            Month names
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.DateSep">
            <summary>
            Date separator
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.ShortDateFmt">
            <summary>
            Short date format
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.LongDateFmt">
            <summary>
            Long date format
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.TimeFmt">
            <summary>
            Time format
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.TimeSep">
            <summary>
            Time separator
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.AMStr">
            <summary>
            Morning string
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.PMStr">
            <summary>
            Evening string
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.CurrYear">
            <summary>
            Current year
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.TwoDigitYearMax">
            <summary>
            Two-digit year maximum
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.CurrencyDecimalDigits">
            <summary>
            Currency decimal digits
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.NumberDecimalDigits">
            <summary>
            Number decimal digits
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.NumberLeadingZero">
            <summary>
            Number leading zero
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.PercentSign">
            <summary>
            Percent sign
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.PercentNegativePattern">
            <summary>
            Percent negative pattern
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.PercentPositivePattern">
            <summary>
            Percent positive pattern
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.PercentDecimalDigits">
            <summary>
            Percent decimal digits
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.EraNames">
            <summary>
            Era names
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.AbbrvEraNames">
            <summary>
            Abbreviated era names
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.Calendar">
            <summary>
            Calendar
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.CurrencyGrpSep">
            <summary>
            Currency group separator
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.CurrencyGrpSize">
            <summary>
            Currency group size
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettingsProps.CurrencyDecSep">
            <summary>
            Currency decimal separator
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.RegionalSettings">
            <summary>
            Represents the Regional Settings interface.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.#ctor">
            <summary>
            Creates a new set of regional settings. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.#ctor(FarPoint.Win.SuperEdit.IRegionalSettings)">
            <summary>
            Creates a new set of regional settings based on settings 
            inherited from the specified parent interface.
            </summary>
            <param name="parentRegionSettings">IRegionalSettings interface from which to inherit settings</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Creates a new set of regional settings based on culture-specific information 
            from the specified CultureInfo object.
            </summary>
            <param name="cultureInfo">CultureInfo object that contains the culture-specific information</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.#ctor(FarPoint.Win.SuperEdit.RegionalSettings)">
            <summary>
            Creates a new set of regional settings by copying the specified object.
            </summary>
            <param name="src">Source regional settings to copy</param>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CultureInfoSetting">
            <summary>
            Gets or sets the culture-specific information.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.ParentRegionSettings">
            <summary>
            Gets or sets the parent regional settings.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PropertySet">
            <summary>
            Gets the property set as an array.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettings.defRgnSettings">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.DefaultSettings">
            <summary>
            Gets or sets a copy of the default regional settings.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.Clone">
            <summary>
            Creates and returns a set of regional settings that is a copy of the current instance.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NumberGroupSeparator">
            <summary>
            Gets or sets the character used to separate groups of digits in numeric values. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NumberGroupSize">
            <summary>
            Gets or sets the number of digits by which to group numeric values.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettings.numberNegPattern">
            Setting values match MS .NET NumberFormatInfo.NumberNegativePattern values.
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NumberNegativePattern">
            <summary>
            Gets or sets how to format negative values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NegativeSign">
            <summary>
            Gets or sets the string to use as the negative sign in numeric values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PositiveSign">
            <summary>
            Gets or sets the string to use as the positive sign in numeric values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.DecimalSeparator">
            <summary>
            Gets or sets the string used to separate the integer 
            and decimal portions of a decimal value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NumberLeadingZero">
            <summary>
            Gets or sets whether to display a leading zero in floating-point numbers.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.NumberDecimalDigits">
            <summary>
            Gets or sets the number of decimal places to display in numeric values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PercentSign">
            <summary>
            Gets or sets the character to use as the percent symbol in numeric values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PercentNegativePattern">
            <summary>
            Gets or sets the format for displaying negative percent values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PercentPositivePattern">
            <summary>
            Gets or sets the format for displaying positive percent values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PercentDecimalDigits">
            <summary>
            Gets or sets the number of digits in the decimal portion of a percent value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrencyGroupSeparator">
            <summary>
            Gets or sets the character used to separate groups of digits in currency values. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrencyGroupSize">
            <summary>
            Gets or sets the number of digits by which to group currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrencyDecimalSeparator">
            <summary>
            Gets or sets the string used to separate the integer 
            and decimal portions of a currency value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrencyDecimalDigits">
            <summary>
            Gets or sets the number of digits in the decimal portion of a currency value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrencySymbol">
            <summary>
            Gets or sets the string to use as the currency symbol in currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrencyNegativePattern">
            <summary>
            Gets or sets the format for negative currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrencyPositivePattern">
            <summary>
            Gets or sets the format for positive currency values.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.AbbreviatedDayNames">
            <summary>
            Gets or sets the array of abbreviated names of the days of the week.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.AbbreviatedMonthNames">
            <summary>
            Gets or sets the array of abbreviated names of the months of the year.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.DayNames">
            <summary>
            Gets or sets the array of names of the days of the week.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.MonthNames">
            <summary>
            Gets or sets the array of names of the days of the week.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.DateSeparator">
            <summary>
            Gets or sets the string that separates the portions of a date value. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettings.shortDateFormat">
            Used for decoding a generic date value.
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.ShortDateFormat">
            <summary>
            Gets or sets the string to format the short (abbreviated) date value 
            when the DateTimeFormat property is set to ShortDate or ShortDateWithTime.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettings.longDateFormat">
            Used for decoding a generic date value.
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.LongDateFormat">
            <summary>
            Gets or sets the string to format the long (non-abbreviated) date value 
            when the DateTimeFormat property is set to LongDate or LongDateWithTime.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.RegionalSettings.timeFormat">
            Used for decoding a generic time value.
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.TimeFormat">
            <summary>
            Gets or sets the format used to represent time values 
            when the DateTimeFormat property is set to TimeOnly, LongDateWithTime, or ShortDateWithTime.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.TimeSeparator">
            <summary>
            Gets or sets the string that separates the portions of a time value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.AMDesignator">
            <summary>
            Gets or sets the string that indicates morning for 12-hour time format. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.PMDesignator">
            <summary>
            Gets or sets the string that indicates afternoon for 12-hour time format. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.DateTimeFormat">
             <summary>
             Gets or sets the format for displaying dates and times using a DateTimeFormatInfo object.
            </summary>
             Returns DateTimeFormatInfo associated with current culture.
             If no current culture is set, a new object is returned but not
             stored. (Any changes won't persist).
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.CurrentYear">
            <summary>
            Gets or sets the current year if the year is not specified in a date value.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.TwoDigitYearMax">
            <summary>
            Gets or sets the year value used to calculate the century for two-digit year values. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.RegionalSettings.Calendar">
            <summary>
            Gets or sets the calendar used for formatting DateTime values.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.Set(System.Object,System.Boolean)">
            <summary>
            Updates the bit map to indicate that a property has been set
            </summary>
            <param name="prop">Object containing the property</param>
            <param name="f">Flag indicating whether the property is set</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.IsDefined(System.Object)">
            <summary>
            Queries the bit map to determine if a property has been set.
            </summary>
            <param name="prop">Object containing the property</param>
            <returns>true if set; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.Reset(System.Object)">
            <summary>
            Resets the bit map to false and frees any object that the property has created.
            </summary>
            <param name="prop">Object containing the property</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.ResetAll">
            <summary>
            Resets the entire bit map to false indicating that all properties are at their default state.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.IsAllBlanks(System.String)">
            <summary>
            Determines whether a string is all blanks.
            </summary>
            <param name="value">String containing the value</param>
            <returns>true if string is all blanks; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.RegionalSettings.FirstNonBlankChar(System.String,System.Char@)">
            <summary>
            Returns the first non-blank character in the string, or else null.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.ISEditFormatter">
            <summary>
            Interface that defines the methods and properties required by objects 
            used for converting from value to string and vice versa.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.ISEditFormatter.RegionSettings">
            <summary>
            Gets or sets the Regional Settings (Regional Options).
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.ISEditFormatter.ManageInput">
            <summary>
            If implemented, it supports methods which allow an editor
            to use for validating and formatting user input.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ISEditFormatter.FromFormattedString(System.String)">
            <summary>
            Parses and returns the value from a formatted string.
            </summary>
            <param name="value">Formatted string</param>
            <returns>Parsed value</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ISEditFormatter.ToFormattedString(System.Object)">
            <summary>
            Returns a formatted string (plus attributes) for the value passed.
            </summary>
            <param name="value">Object containing value</param>
            <returns>Formatted string (plus attributes)</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ISEditFormatter.FromUnformattedString(System.String)">
            <summary>
            Parses and returns the value from an unformatted string.
            </summary>
            <param name="value">Unformatted string</param>
            <returns>Parsed value</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ISEditFormatter.ToUnformattedString(System.Object)">
            <summary>
            Returns an unformatted string for the value passed.
            </summary>
            <param name="value">Object containing value</param>
            <returns>Unformatted string</returns>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.UserErrorCode">
            <summary>
            Specifies error codes for the UserError event.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.InvalidCharacter">
            <summary>
            [1] Occurs when the user provides an invalid character; 
            only when the UserEntry property is set to UserEntry.Formatted
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.InvalidMovement">
            <summary>
            [2] Occurs when the user attempts to move the cursor left from before the 
            first character or right from after the last character; 
            only occurs when the AutoAdvance property is set to False
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.InvalidAction">
            <summary>
            [3] Occurs for all other invalid actions 
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.ExceedLimit">
            <summary>
            [4] Occurs when the user adds text that causes the length of the data to exceed the maximum limit 
            set by the MaxLength property
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.ButtonMin">
            <summary>
            [5] Occurs when the user clicks a button that causes the value of the ButtonIndex property
            to be less than the value set by the ButtonMin property; 
            only occurs when the ButtonWrap property is set to False 
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.ButtonMax">
            <summary>
            [6] Occurs when the user clicks a button that causes the value of the ButtonIndex property
            to be more than the value set by the ButtonMax property;
            only occurs when the ButtonWrap property is set to False     
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.OutOfRange">
            <summary>
            [7] Occurs when the user enters a value that exceeds the minimum or maximum value 
            set by the maximum and minimum value properties
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.PopupOrDropdownVisible">
            <summary>
            [8] Occurs when the user interacts with the control while a 
            pop-up or drop-down is displayed 
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.DataNotAllowed">
            <summary>
            [9] Occurs when the user provides data that is not allowed, 
            such as a value greater than the maximum value allowed in the control 
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.UserErrorCode.GenericError">
            <summary>
            [999] Occurs when some other type of error occurs (not corresponding to any other error code)
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.IEditorValidator">
            <summary>
            Represents the actions in the component for which the user can perform an validate pate editor value.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEdit.IEditorValidator.PasteEditorValidator">
            <summary>
            Paste validator event
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.PasteValidatorEventHandler">
            <summary>
            Represents the method that handles the pate to editor validator event.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.IsValidEventArgs">
            <summary>
            Represents the event data for an editor validate event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.IsValidEventArgs.#ctor(System.Object)">
            <summary>
            Creates a new instance of <see cref="T:FarPoint.Win.SuperEdit.IsValidEventArgs"/>.
            </summary>
            <param name="value">Value of the argument</param>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IsValidEventArgs.IsValid">
            <summary>
            Gets and set isvalid
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.IsValidEventArgs.Value">
            <summary>
            Gets and Set value
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.ErrorEventArgs">
            <summary>
            Represents the event data for an Error event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ErrorEventArgs.#ctor(System.Int32)">
            <summary>
            Occurs when an error state is created by the control.
            </summary>
            <param name="errorCode">Error code that is being raised</param>
            <example>
            <code lang="csharp">
            private void control_UserError(object sender, FarPoint.Win.Input.ErrorEventArgs e)
            {
            Messagebox.Show(Convert.ToString(e.ErrorCode));
            }
            </code>
            <code lang="vb">
            Private Sub control_UserError(ByVal sender As Object, ByVal e As FarPoint.Win.Input.ErrorEventArgs) Handles control.UserError
              Messagebox.Show(e.ErrorCode);
            End Sub
            </code>
            </example>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.ErrorEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            Occurs when an error state is created by the control
            </summary>
            <param name="errorCode">The error code for the error that is being raised</param>
            <param name="errorText">Additional error information for the error that is being raised</param>
            <example>
            <code lang="csharp">
            private void control_UserError(object sender, FarPoint.Win.Input.ErrorEventArgs e)
            {
            Messagebox.Show(Convert.ToString(e.ErrorCode) + e.ErrorInfo);
            }
            </code>
            <code lang="vb">
            Private Sub control_UserError(ByVal sender As Object, ByVal e As FarPoint.Win.Input.ErrorEventArgs) Handles control.UserError
              Messagebox.Show(e.ErrorCode + e.ErrorInfo);
            End Sub
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.ErrorEventArgs.ErrorCode">
            <summary>
            Gets the error code associated with an error event.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.ErrorEventArgs.ErrorCodePriv">
            <summary>
            Internal use only. Gets or sets the error code.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.ErrorEventArgs.ErrorInfo">
            <summary>
            Gets the additional error information associated with an error event.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.ErrorEventArgs.ErrorInfoPriv">
            <summary>
            Internal use only. Gets or sets the error information.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.UserErrorEventHandler">
            <summary>
            Represents the method that handles the UserError event.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.UserErrorEventArgs">
            <summary>
            Represents the data for a user error event. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.UserErrorEventArgs.#ctor(FarPoint.Win.SuperEdit.UserErrorCode)">
            <summary>
            Occurs when an user error state is created by the control
            </summary>
            <param name="errorCode">The user error code that is being raised</param>
            <example>
            <code lang="csharp">
            private void control_UserError(object sender, FarPoint.Win.Input.UserErrorEventArgs e)
            {
            Messagebox.Show(Convert.ToString(e.ErrorCode));
            }
            </code>
            <code lang="vb">
            Private Sub control_UserError(ByVal sender As Object, ByVal e As FarPoint.Win.Input.UserErrorEventArgs) Handles control.UserError
              Messagebox.Show(e.ErrorCode);
            End Sub
            </code>
            </example>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.UserErrorEventArgs.#ctor(FarPoint.Win.SuperEdit.UserErrorCode,System.String)">
            <summary>
            Occurs when a user error state is created by the control
            </summary>
            <param name="errorCode">The user error code for the error that is being raised</param>
            <param name="errorText">Additional error information for the error that is being raised</param>
            <example>
            <code lang="csharp">
            private void control_UserError(object sender, FarPoint.Win.Input.UserErrorEventArgs e)
            {
            Messagebox.Show(Convert.ToString(e.ErrorCode) + e.ErrorInfo);
            }
            </code>
            <code lang="vb">
            Private Sub control_UserError(ByVal sender As Object, ByVal e As FarPoint.Win.Input.UserErrorEventArgs) Handles control.UserError
              Messagebox.Show(e.ErrorCode + e.ErrorInfo);
            End Sub
            </code>
            </example>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.UserErrorEventArgs.UserErrorCode">
            <summary>
            Gets the error code associated with a user error event.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.TextPastingEventHandler">
            <summary>
            Represents the method that handles the TextPasting event.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.TextPastedEventHandler">
            <summary>
            Represents the method that handles the TextPasted event.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.AdvanceEventHandler">
            <summary>
            Represents the method that handles the Advance event.
            </summary>
            <param name="sender">Source of event</param>
            <param name="e">Event data</param>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.AcceptsArrowKeys">
            <summary>
            Specifies how the control processes the keyboard arrow keys in the text box.  
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AcceptsArrowKeys.None">
            <summary>
            Does not process any of the arrow keys.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AcceptsArrowKeys.Arrows">
            <summary>
            Processes the keyboard arrow keys but not with the Ctrl key.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AcceptsArrowKeys.CtrlArrows">
            <summary>
            Processes the keyboard arrow keys only when the Ctrl key is also pressed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AcceptsArrowKeys.AllArrows">
            <summary>
            Processes all the keyboard arrow keys (like Arrows and CtrlArrows combined).
            </summary>
        </member>
        <member name="F:FarPoint.Win.SuperEdit.AcceptsArrowKeys.AllArrowsIgnoringMultiline">
            <summary>
            Processes all the keyboard arrow keys regardless of the Multiline property setting.
            </summary>
        </member>
        <member name="T:FarPoint.Win.SuperEdit.SEditTextBox">
            <summary>
            Represents a text editor in the control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEdit.SEditTextBox.TextPasting">
            <summary>
            Occurs before text is pasted into the control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEdit.SEditTextBox.PasteEditorValidator">
            <summary>
            Occurs when the text is pate to the control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEdit.SEditTextBox.TextPasted">
            <summary>
            Occurs when text is pasted into the control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEdit.SEditTextBox.TextCut">
            <summary>
            Occurs when text is cut from the control.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEdit.SEditTextBox.UserError">
            <summary>
            Occurs when content is provided that cannot be processed or is invalid.
            </summary>
        </member>
        <member name="E:FarPoint.Win.SuperEdit.SEditTextBox.Advance">
            <summary>
            Occurs when the AutoAdvance property is set to True and the focus moves 
            to the next or previous control in response to an arrow key being pressed. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.RedrawFlag">
            <summary>
            Gets or sets whether the redraw flag has been set. 
            If the value in the control has changed, it's time to redraw.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.LastKeyDown">
            <summary>
            Gets or sets the key code of the last key down.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.Formatter">
            <summary>
            Gets or sets the formatter for the editing control.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.AutoAdvance">
            <summary>
            Gets or sets whether to advance the value based on the arrow key pressed.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.Value">
            <summary>
            Gets or sets the value of the string or object in the text editor.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.ProcessSendMessage(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.GetCurrentLine">
            <summary>
            Gets the current line.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.GetLineCount">
            <summary>
            Returns the line count for a text editor with multiple lines.
            </summary>
            <returns>Number of lines</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.GetLineLength(System.Int32)">
            <summary>
            Returns the length of the line.
            </summary>
            <param name="lineIndex">Index of the line</param>
            <returns>Length of the line</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnSEditKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key the user pressed.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.ProcessKeyMessage(System.Windows.Forms.Message@)">
            <summary>
            Processes the key message.
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.ProcessWMCharMsg(System.Windows.Forms.Message@)">
            <summary>
            Processes the WM_CHAR message.
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.ProcessWMKeyUpMsg(System.Windows.Forms.Message@)">
            <summary>
            Processes the WmKeyUp message.
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.ProcessWMKeyDownMsg(System.Windows.Forms.Message@)">
            <summary>
            Processes the WmKeyDown message.
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnKeyDownMoveCaret(System.Windows.Forms.Message@)">
            <summary>
            Occurs when the move caret key is down.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnKeyDownBackOrDelete(System.Windows.Forms.Message@)">
            <summary>
            Occurs when the Back or Delete key are down.
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnTextPasted(System.ComponentModel.CancelEventArgs)">
            <summary>
            Occurs when text is pasted.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnTextPasting(System.ComponentModel.CancelEventArgs)">
            <summary>
            Occurs when text is pasting.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnTextCut(System.EventArgs)">
            <summary>
            Occurs when text is cut.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnUserError(FarPoint.Win.SuperEdit.UserErrorEventArgs)">
            <summary>
            Occurs when user error.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnAdvance(System.EventArgs)">
            <summary>
            Occurs when advance.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnKeyDownInsert">
            <summary>
            Occurs when Insert key is down.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.CopyToClipboard">
            <summary>
            Copies to Clipboard.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.CutToClipboard">
            <summary>
            Cuts to Clipboard.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.PasteFromClipboard">
            <summary>
            Pastes the data from the Clipboard.
            </summary>
            <returns>True if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.ProcessAlphaNumericSysKey(System.Windows.Forms.Message@)">
            <summary>
            Internal use only. Processes the alphanumeric system key.
            </summary>
            <param name="msg">Message</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnLostFocus(System.EventArgs)">
            <summary>
            Occurs when focus is lost.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnGotFocus(System.EventArgs)">
            <summary>
            Occurs when focus is gotten.
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.IncrementDecrementValue(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Increments or decrements the value.
            </summary>
            <param name="incdec">Object to increment or decrement</param>
            <param name="decrement">Whether to decrement</param>
            <param name="wrap">Whether to wrap</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.Increment(System.Object,System.Boolean)">
            <summary>
            Return the increment value.
            </summary>
            <param name="incValue">Increment value</param>
            <param name="wrap">Whether there are multiple lines and the value wraps</param>
            <returns>Increment value</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.Decrement(System.Object,System.Boolean)">
            <summary>
            Returns the decrement value.
            </summary>
            <param name="decValue">Decrement value</param>
            <param name="wrap">Whether there are multiple lines and the value wraps</param>
            <returns>Decrement value</returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines which keys are processed by this control.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.IsInputKeyBase(System.Windows.Forms.Keys)">
            <summary>
            internal only
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.IsInputCharBase(System.Char)">
            <summary>
            Internal only
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.AcceptsArrowKeys">
            <summary>
            Gets or sets the property which determines if this control
            processes the Up arrow and Down arrow keys.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.Text">
            <summary>
            Gets or sets the string. Overrides the Text property for control of the 
            Undo and Redo buffer.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.UndoText">
            <summary>
            Get or set the contents of the Undo buffer. The buffer is used
            when the user presses Ctrl-Z or the owner calls "UndoChanges()".
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.UndoSelStart">
            <summary>
            Get or set the Undo selection start position.
            </summary>
        </member>
        <member name="P:FarPoint.Win.SuperEdit.SEditTextBox.UndoSelLength">
            <summary>
            Get or set the Undo selection length position.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.ResetRedoText">
            <summary>
            Resets the Redo Text buffer, which is set when a
            call to UndoChanges() is made.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.UndoChanges">
            <summary>
            Allows the user to set the text to the text saved in the
            "Undo buffer".  Also sets the SelectionStart and SelectionLength
            properties.
            </summary>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.OnSetText(System.String)">
            <summary>
            This is called when the public Text property is called.
            </summary>
            <param name="newText">New text string</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.SetBaseText(System.String)">
            <summary>
            Sets the Text property in the base class (Textbox) but preserves the "undo" buffer.
            </summary>
            <param name="newText">New text string</param>
        </member>
        <member name="M:FarPoint.Win.SuperEdit.SEditTextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal use only.
            </summary>
            <param name="m">Message</param>
        </member>
        <member name="T:FarPoint.Win.ISerializeSupport3">
            <summary>
            Interface that supports serialization to XML of objects from the models.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeSupport3.Serialize3(System.Xml.XmlTextWriter)">
            <summary>
            Save the object to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializeSupport2">
            <summary>
            Interface that supports serialization to XML of objects from the models.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeSupport2.Serialize2(System.Xml.XmlTextWriter,System.Collections.Hashtable,System.Object)">
            <summary>
            Save the object to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the object</param>
            <param name="restrictedStyles">A set of restricted style info objects.</param>
            <param name="addedStyles">List of added style info objects.</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializeStyles2">
            <summary>
            Interface that supports serialization to XML of styles from the models. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeStyles2.Serialize2(System.Xml.XmlTextWriter,System.Object)">
            <summary>
            Save the object to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the object</param>
            <param name="nameStyleCollection">A collection of <see cref="!:NamedStyle"/> objects</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializePresentation2">
            <summary>
            Interface that supports serialization to XML of presentations from the models. 
            </summary>  
        </member>
        <member name="M:FarPoint.Win.ISerializePresentation2.Serialize2(System.Xml.XmlTextWriter,System.Collections.Hashtable,System.Object)">
            <summary>
            Save the object to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the object</param>
            <param name="restrictedNameStyles">A set of restricted named styles.</param>
            <param name="nameStyles">A list of <see cref="!:NamedStyle"/> objects</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializeSupport">
            <summary>
            Interface that supports serialization to XML of objects from the models.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeSupport.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the object to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeSupport.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ICanSerializeXml">
            Interface supplied by objects that support serialization to XML,
            but might not be able to save the entire object to XML.
            <summary>
            Interface that supports serialization to XML of objects that might not 
            be able to save the entire object from the models.
            </summary>
        </member>
        <member name="P:FarPoint.Win.ICanSerializeXml.CanSerializeXml">
            <summary>
            Gets whether the entire object can
            be saved to XML and successfully loaded again.
            </summary>
        </member>
        <member name="T:FarPoint.Win.ISerializeSettings">
            <summary>
            Interface that supports serialization to XML of settings from the models.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeSettings.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the settings to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeSettings.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the settings from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the settings</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializeStyles">
            <summary>
            Interface that supports serialization to XML of styles from the models. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeStyles.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the styles to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the styles</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeStyles.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the styles from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the styles</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializeData">
            <summary>
            Interface that supports serialization to XML of data from the models.
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeData.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the data to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the data</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeData.Serialize(System.Xml.XmlTextWriter,System.Boolean)">
            <summary>
            Saves the data to XML and optionally the data source and bound data.
            </summary>
            <param name="w">XmlTextWriter object used to save the data</param>
            <param name="saveDataSource">Whether to save the data source and bound data</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeData.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the data from XML.
            </summary> 
            <param name="r">XmlNodeReader from which to read the data</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializePresentation">
            <summary>
            Interface that supports serialization to XML of presentations from the models. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializePresentation.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the presentation to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the presentation</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializePresentation.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the presentation from XML.
            </summary> 
            <param name="r">XmlNodeReader from which to read the presentation</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.ISerializeDrawing">
            Interface supplied by objects that support Drawing objects serialization.
            <summary>
            Interface that supports serialization to XML of drawing objects (shapes) from the models. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.ISerializeDrawing.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Saves the drawing objects to XML.
            </summary>
            <param name="w">XmlTextWriter object used to save the drawing objects</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.ISerializeDrawing.Deserialize(System.Xml.XmlNodeReader)">
            <summary>
            Loads the drawing objects from XML.
            </summary> 
            <param name="r">XmlNodeReader from which to read the drawing objects</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="T:FarPoint.Win.IDeserializeInjector">
            <summary>
            Interface that support inject setting for deserializing object right after create instance and before deserializing
            </summary>
        </member>
        <member name="M:FarPoint.Win.IDeserializeInjector.Preprocess(System.Object)">
            <summary>
            Preprocess the deserializing instance before deserializing
            </summary>
            <param name="deserializingInstance">The deserializing instance</param>
            <returns>The deserializing instance after preprocess</returns>
        </member>
        <member name="T:FarPoint.Win.Serializer">
            <summary>
            Represents the serializer object for opening from and saving to a file.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Serializer.GetCalendarID(System.Globalization.Calendar,System.Reflection.PropertyInfo@)">
            <summary>
            Internal use.
            </summary>
            <param name="calendar"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.ExtractNode(System.Xml.XmlNodeReader)">
            <summary>
            Extracts the current node in the specified node reader into
            a new node reader and advances that reader to the next node. 
            </summary>
            <param name="r">XmlNodeReader with which to access data</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.CloneNodeReader(System.Xml.XmlNodeReader)">
            <summary>
            Creates a copy of an XmlNodeReader without advancing the original.
            </summary>
            <param name="r">XmlNodeReader</param>
            <returns>XmlNodeReader</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.IsDefaultValue(System.Object,System.String,System.Object)">
            <summary>
            Determines if the value of a specified property of an object is the default value.
            </summary>
            <param name="o">Object</param>
            <param name="propName">Name of property</param>
            <param name="propVal">Object containing value to compare</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.CreateObjectInstanceAndDeserialize(System.Xml.XmlNodeReader,System.Type)">
            <summary>
            Creates an object serialized into a specified XML node reader of a specified type.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
            <param name="type">Type of serialization support</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.CreateObjectInstanceAndDeserialize(System.Xml.XmlNodeReader,System.Type,System.Boolean)">
            <summary>
            Creates an object serialized into a specified XML node reader of a specified type.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
            <param name="type">Type of serialization support</param>
            <param name="readClosingTag">Whether read the closing tag</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.CreateObjectInstanceAndDeserialize(System.Xml.XmlNodeReader,System.Type,System.Type)">
            <summary>
            Creates an object serialized into a specified XML node reader of a specified type and interface.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
            <param name="type">Type of serialization support</param>
            <param name="saveInterface">Serialization interface to use</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.CreateObjectInstanceAndDeserialize(System.Xml.XmlNodeReader,System.Type,System.Type,System.Reflection.Assembly)">
            <summary>
            Creates an object serialized into a specified XML node reader of a specified type, 
            interface, and calling assembly.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
            <param name="type">Type</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="callingAssembly">Calling assembly object</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.CreateObjectInstanceAndDeserialize(System.Xml.XmlNodeReader,System.Type,System.Type,System.Reflection.Assembly,System.Object)">
            <summary>
            Creates an object serialized into a specified XML node reader of a specified type,
            interface, and calling assembly.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
            <param name="type">Type</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="callingAssembly">Calling assembly object</param>
            <param name="instantiatedObject">The instantiated object which will receive deserialized data.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.CreateObjectInstanceAndDeserialize(System.Xml.XmlNodeReader,System.Type,System.Type,System.Object)">
            <summary>
            Creates an object serialized into a specified XML node reader of a specified type and interface.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
            <param name="type">Type of serialization support</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="instantiatedObject">The instantiated object which will receive deserialized data.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.CreateObjectInstanceAndDeserialize(System.Xml.XmlNodeReader,System.Type,System.Type,System.Reflection.Assembly,System.Object,FarPoint.Win.IDeserializeInjector)">
            <summary>
            Creates an object serialized into a specified XML node reader of a specified type and interface.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
            <param name="type">Type of serialization support</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="callingAssembly">Calling assembly object</param>
            <param name="instantiatedObject">The instantiated object which will receive deserialized data.</param>
            <param name="injector">The injector that support inject setting for deserializing object right after create instance and before deserializing</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeImage(System.Drawing.Image,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an image to XML as a base-64 encoded string to a specified element
            with the specified writer.
            </summary>
            <param name="image">Image object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeImage(System.String)">
            <summary>
            Creates an image from the specified serialized base-64 encoded string.
            </summary>
            <param name="base64">base-64 string</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeIcon(System.Drawing.Icon,System.String,System.Xml.XmlWriter)">
            <summary>
            Serializes an icon to XML as a base-64 encoded string to a specified element
            with the specified writer.
            </summary>
            <param name="icon">Icon object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeIcon(System.String)">
            <summary>
            Creates an image from the specified serialized base-64 encoded string.
            </summary>
            <param name="base64">base-64 string</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeEnum(System.Enum,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an enumeration value to XML with the specified writer.
            </summary>
            <param name="value">Enumeration setting to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeEnumValue(System.String,System.Type)">
            <summary>
            Deserializes an enumeration value of the specified type.
            </summary>
            <param name="value">String enumeration value</param>
            <param name="enumType">Enumeration type</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeColor(System.Drawing.Color,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes a color to XML with the specified writer.
            </summary>
            <param name="c">Color object containing the color</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeColorValue(System.Drawing.Color)">
            <summary>
            Converts a color object into a color name (for example, Blue) 
            or a six-digit hexadecimal color value (for example, #FFFFFF).
            </summary>
            <param name="c">Color object containing the color</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeColorValue(System.String)">
            <summary>
            Converts a six-digit hexadecimal color value into a color object.
            </summary>
            <param name="s">String containing color value</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeFont(System.Drawing.Font,System.String,System.Xml.XmlWriter)">
            <summary>
            Serializes a font into XML with the specified writer.
            </summary>
            <param name="font">Font object containing the font</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeFontValue(System.Object,System.Xml.XmlWriter)">
            <summary>
            Serializes a font to XML with the specified writer
            without writing element tags.
            </summary>
            <param name="o">Font object containing the font</param>
            <param name="w">XmlTextWriter</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeFontValue(System.Object,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Serializes font information to XML with the specified writer 
            and short XML name option without writing element tags.
            </summary>
            <param name="o">FontInfo object containing the font information</param>
            <param name="w">XmlTextWriter</param>
            <param name="shortXmlName">Whether to use the short XML name</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeFont(System.Xml.XmlNodeReader)">
            <summary>
            Creates and deserializes a font serialized with SerializeFont or SerializeFontValue.
            </summary>
            <param name="r">XmlNodeReader object</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeDateValue(System.DateTime)">
            <summary>
            Converts a DataTime object to a date format string.
            </summary>
            <param name="d">DateTime object to convert</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeDateValue(System.String)">
            <summary>
            Converts a date format string to a DateTime value.
            </summary>
            <param name="s">Date format string to convert</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DefaultSerializeProp(System.Object)">
            <summary>
            Serializes the specified basic object and returns the string representation
            </summary>
            <param name="o">Object to serialize</param>
            <returns>String representation of the object</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.DefaultDeserializeProp(System.Object,System.Object)">
            <summary>
            Deserializes the specified basic object saved with DefaultSerializeProp and returns the value.
            </summary>
            <param name="prop">Current value of property</param>
            <param name="o">String name of the object to deserialize</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.GetObjectXml(FarPoint.Win.ISerializeSupport,System.String)">
            <summary>
            Serializes an object to an XML string.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.GetObjectXml(FarPoint.Win.ISerializeSupport,System.String,System.Reflection.Assembly)">
            <summary>
            Serializes an object to an XML string.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SetObjectXml(FarPoint.Win.ISerializeSupport,System.String,System.String)">
            <summary>
            Deserializes an object saved with GetObjectXml using the specified XML string.
            </summary>
            <param name="o">Object to deserialize</param>
            <param name="xml">XML string returned by GetObjectXml</param>
            <param name="elementName">Name of XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObject(System.Type,System.String,System.String)">
            <summary>
            Loads an object from a file previously saved with Serializer.SaveObject.
            </summary>
            <param name="type">Type of object</param>
            <param name="fileName">Path and name of file from which to load the object</param>
            <param name="elementName">Name of root element node for object</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObject(System.Type,System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Loads an object from a file previously saved with Serializer.SaveObject.
            </summary>
            <param name="type">Type of object</param>
            <param name="fileName">Path and name of file from which to load the object</param>
            <param name="elementName">Name of root element node for object</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObject(System.Type,System.IO.Stream,System.String)">
            <summary>
            Loads an object from a stream previously saved with Serializer.SaveObject.
            </summary>
            <param name="type">Type of object</param>
            <param name="stream">Stream from which to load the object</param>
            <param name="elementName">Name of root element node for object</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObject(System.Type,System.IO.Stream,System.String,System.Reflection.Assembly)">
            <summary>
            Loads an object from a stream previously saved with Serializer.SaveObject.
            </summary>
            <param name="type">Type</param>
            <param name="stream">Stream from which to load the object</param>
            <param name="elementName">Name of root element node for object</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObjectXml(System.Type,System.String,System.String)">
            <summary>
            Creates and deserializes a new instance of an object saved with GetObjectXml.
            </summary>
            <param name="type">Type of object</param>
            <param name="xml">XML string</param>
            <param name="elementName">Name of XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.LoadObjectXml(System.Type,System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Creates and deserializes a new instance of an object saved with GetObjectXml.
            </summary>
            <param name="type">Type of object</param>
            <param name="xml">XML string</param>
            <param name="elementName">Name of XML element</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.String,System.String)">
            <summary>
            Saves an object as XML to a file.
            </summary>
            <param name="o">Object to save (must implement ISerializeSupport)</param>
            <param name="fileName">File name to save object to</param>
            <param name="rootElement">Name of root XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.IO.Stream,System.String)">
            <summary>
            Saves an object as XML to a stream.
            </summary>
            <param name="o">Object to save (must implement ISerializeSupport)</param>
            <param name="stream">Stream to save object to</param>
            <param name="rootElement">Name of root XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.Type,System.String,System.String)">
            <summary>
            Saves an object as XML to a file using the specified serialization interface.
            </summary>
            <param name="o">Object to save (must implement the specifies serialization interface)</param>
            <param name="saveInterface">Serialization interface to use (must be ISerializeSupport, ISerializeSettings, ISerializeData, ISerializeStyles, ISerializeDrawing, or ISerializePresentation)</param>
            <param name="fileName">File name to save object to</param>
            <param name="rootElement">Name of root XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.Type,System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Saves an object as XML to a file using the specified serialization interface.
            </summary>
            <param name="o">Object to save (must implement the specifies serialization interface)</param>
            <param name="saveInterface">Serialization interface to use (must be ISerializeSupport, ISerializeSettings, ISerializeData, ISerializeStyles, ISerializeDrawing, or ISerializePresentation)</param>
            <param name="fileName">File name to save object to</param>
            <param name="rootElement">Name of root XML element</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.Type,System.IO.Stream,System.String)">
            <summary>
            Saves an object as XML to a stream using the specified serialization interface.
            </summary>
            <param name="o">Object to save (must implement the specifies serialization interface)</param>
            <param name="saveInterface">Serialization interface to use (must be ISerializeSupport, ISerializeSettings, ISerializeData, ISerializeStyles, ISerializeDrawing, or ISerializePresentation)</param>
            <param name="stream">Stream to save object to</param>
            <param name="rootElement">Name of root XML element</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SaveObject(System.Object,System.Type,System.IO.Stream,System.String,System.Reflection.Assembly)">
            <summary>
            Saves an object as XML to a stream using the specified serialization interface.
            </summary>
            <param name="o">Object to save (must implement the specifies serialization interface)</param>
            <param name="saveInterface">Serialization interface to use (must be ISerializeSupport, ISerializeSettings, ISerializeData, ISerializeStyles, ISerializeDrawing, or ISerializePresentation)</param>
            <param name="stream">Stream to save object to</param>
            <param name="rootElement">Name of root XML element</param>
            <param name="callingAssembly">Calling assembly</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.CanSerializeObject(System.Object)">
            <summary>
            Determines whether the specified object can be serialized to XML.
            </summary>
            <param name="o">Object</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeSettings(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object using the ISerializeSettings interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeStyles2(System.Object,System.String,System.Xml.XmlTextWriter,System.Object)">
            <summary>
            Serializes an object using the ISerializeStyles2 interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            /// <param name="nameStyleCollection">object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeStyles(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object using the ISerializeStyles interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeData(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object using the ISerializeData interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeData(System.Object,System.String,System.Xml.XmlTextWriter,System.Boolean)">
            <summary>
            Serializes an object using the ISerializeData interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="saveDataSource">True to save the data source, false otherwise</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializePresentation(System.Object,System.String,System.Xml.XmlTextWriter,System.Collections.Hashtable,System.Object)">
            <summary>
            Serializes an object using the ISerializePresentation2 interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="nameStyles">object to which to save</param>
            <param name="restrictedNamedStyles">Hashtable object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializePresentation(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object using the ISerializePresentation interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeDrawing(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object using the ISerializeDrawing interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object to XML using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObjectInternal(System.Object,System.String,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Serializes an object to XML using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="saveVersion">Whether to save version, culture and public key of assembly.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObjectInternal(System.Object,System.String,System.Xml.XmlWriter)">
            <summary>
            Serializes an object to XML using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="saveVersion">Whether to save version, culture and public key of assembly.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject2(System.Object,System.String,System.Xml.XmlTextWriter,System.Reflection.Assembly,System.Collections.Hashtable,System.Object)">
            <summary>
            Serializes an object to XML using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="callingAssembly">Specifies the assembly containing the implementation of the object</param>
            <param name="restrictedNamedStyled">object to which to save</param>
            <param name="addedNamedStyles">Hashtable object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.String,System.Xml.XmlTextWriter,System.Reflection.Assembly)">
            <summary>
            Serializes an object to XML using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="callingAssembly">Specifies the assembly containing the implementation of the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject3(System.Object,System.String,System.Xml.XmlTextWriter,System.Reflection.Assembly)">
            <summary>
            Serializes an object to XML using the ISerializeSupport3 interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.Type,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an object to XML using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.Type,System.String,System.Xml.XmlTextWriter,System.Reflection.Assembly)">
            <summary>
            Serializes an object to XML using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="callingAssembly">Specifies the assembly containing the implementation of the object</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.Type,System.String,System.Xml.XmlTextWriter,System.Reflection.Assembly,System.Object[])">
            <summary>
            Serializes an object to XML using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="callingAssembly">Specifies the assembly containing the implementation of the object</param>
            <param name="args">Arguments to pass to saveInterface.Serialize method (including w as first argument)</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.Type,System.String,System.Xml.XmlTextWriter,System.Reflection.Assembly,System.Object[],System.Collections.Hashtable,System.Object)">
            <summary>
            Serializes an object to XML using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="callingAssembly">Specifies the assembly containing the implementation of the object</param>
            <param name="args">Arguments to pass to saveInterface.Serialize method (including w as first argument)</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.Type,System.String,System.Xml.XmlTextWriter,System.Reflection.Assembly,System.Object[],System.Boolean)">
            <summary>
            Serializes an object to XML using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="callingAssembly">Specifies the assembly containing the implementation of the object</param>
            <param name="args">Arguments to pass to saveInterface.Serialize method (including w as first argument)</param>
            <param name="saveType">Whether to save</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeObject(System.Object,System.Type,System.String,System.Xml.XmlTextWriter,System.Reflection.Assembly,System.Object[],System.Boolean,System.Collections.Hashtable,System.Object)">
            <summary>
            Serializes an object to XML using the ISerializeSupport interface.
            </summary>
            <param name="o">Object to serialize</param>
            <param name="saveInterface">Serialization interface to use</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
            <param name="callingAssembly">Specifies the assembly containing the implementation of the object</param>
            <param name="args">Arguments to pass to saveInterface.Serialize method (including w as first argument)</param>
            <param name="saveType">Whether to save</param>
            /// <param name="restrictedNamedStyles">Arguments to pass to method interface.Serialize method</param>
            /// <param name="addedNamedStyles">Arguments to pass to method interface.Serialize method</param>
            <returns>true if successful; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Serializer.EncodeObject(System.Object)">
            <summary>
            Encodes an object to a base64 string, if it is serializable. 
            </summary>
            <param name="o">Object to encode</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DecodeObject(System.String)">
            <summary>
            Decodes an object from a base64 string (inverse of EncodeObject).
            </summary>
            <param name="s">base64 encoded string</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeString(System.String,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes a string to XML.
            </summary>
            <param name="value">String</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeStringArray(System.String[],System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an array of strings to XML.
            </summary>
            <param name="array">Array of strings</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeString(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes a string from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeStringArray(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes an array of strings from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeDateTimeFormatInfo(System.Globalization.DateTimeFormatInfo,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes a DateTimeFormatInfo object to XML.
            </summary>
            <param name="info">DateTimeFormatInfo</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeDateTimeFormatInfo(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes a DateTimeFormatInfo object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeIntArray(System.Int32[],System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an array of integers to XML.
            </summary>
            <param name="array">Array of integers</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeByteArray(System.Byte[],System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an array of bytes to XML.
            </summary>
            <param name="array">Array of bytes</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializePointFArray(System.Drawing.PointF[],System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes an array of PointF points to XML.
            </summary>
            <param name="array">Array of floating-point coordinates (PointF points)</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeIntArray(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes an array of integers from XML
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeByteArray(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes an array of bytes from XML
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializePointFArray(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes an array of PointF objects from XML
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.SerializeNumberFormatInfo(System.Globalization.NumberFormatInfo,System.String,System.Xml.XmlTextWriter)">
            <summary>
            Serializes a NumberFormatInfo object to XML.
            </summary>
            <param name="info">NumberFormatInfo</param>
            <param name="elementName">Name of XML element</param>
            <param name="w">XmlTextWriter object to which to save</param>
        </member>
        <member name="M:FarPoint.Win.Serializer.DeserializeNumberFormatInfo(System.Xml.XmlNodeReader)">
            <summary>
            Deserializes a NumberFormatInfo object from XML.
            </summary>
            <param name="r">XmlNodeReader from which to read the XML</param>
        </member>
        <member name="T:FarPoint.Win.Text.PreferredSizeDirection">
            <summary>
            Direction when get preferred size
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.PreferredSizeDirection.NotSet">
            <summary>
            The direction is unknown
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.PreferredSizeDirection.Row">
            <summary>
            Get preferred height for row
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.PreferredSizeDirection.Column">
            <summary>
            Get preferred width for column
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.GlobalizedString.#ctor(System.String)">
            <summary>
            Creates a new globalized string.
            </summary>
            <param name="text">Text string</param>
        </member>
        <member name="P:FarPoint.Win.Text.GlobalizedString.Empty">
            <summary>
            Empties the string.
            </summary>
            <value>Empty</value>
        </member>
        <member name="P:FarPoint.Win.Text.GlobalizedString.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:String"/> at the specified index.
            </summary>
            <param name="index">Index</param>
            <returns>String</returns>
        </member>
        <member name="P:FarPoint.Win.Text.GlobalizedString.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.GlobalizedString.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>New object that is a copy of this instance</returns>
        </member>
        <member name="M:FarPoint.Win.Text.GlobalizedString.Substring(System.Int32,System.Int32)">
            <summary>
            Returns the substring starting with the specified start index.
            </summary>
            <param name="startIndex">Start index</param>
            <param name="length">Length</param>
        </member>
        <member name="M:FarPoint.Win.Text.GlobalizedString.IndexOfAny(System.Char[],System.Int32)">
            <summary>
            Returns the index of any character in a string.
            </summary>
            <param name="anyOf">Character array</param>
            <param name="startIndex">Start index</param>
            <returns>Index</returns>
        </member>
        <member name="M:FarPoint.Win.Text.GlobalizedString.LastIndexOfAny(System.Char[],System.Int32)">
            <summary>
            Returns the index of the last character in a string.
            </summary>
            <param name="anyOf">Character array</param>
            <param name="startIndex">Start index</param>
            <returns>Last index</returns>
        </member>
        <member name="M:FarPoint.Win.Text.GlobalizedString.Reverse">
            <summary>
            Reverses the text.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender">
             <summary>
             Defines a class that used to render rich text.
             </summary>
             <remarks>
               I spent much time digging up the core concepts of rendering a rich text. I use interfaces to define those concepts. 
               Other parts of interfaces are used to link sub-processing. They are inputs to some sub-processing and outputs of 
               other sub-processing.
               
               The whole rendering process:
                 
                 -------------------------------------------------------------------------------------------------------------------------------------------
                 + : Data                          ---------->
                 # : Tools                         -->>>> >>-- : Date flowing
                 * : Sub-Processing                ==========>
                 @ : User                          ==>======== : Relation
                 -------------------------------------------------------------------------------------------------------------------------------------------
            
                                                                    ++++++++++++++++++++++                                                          
                                                            |-----> +  Pure Text Segment + -------|                                               
                                                            |       ++++++++++++++++++++++        |                                               
                                                            |       ++++++++++++++++++++++        |                                               
                 +++++++++++++++       ***************      |-----> +      Glyph         + -------|                                               
                 +  Rich Text  + ----> * Text Parser * -----|       ++++++++++++++++++++++        |        **************       +++++++++++     
                 +++++++++++++++       ***************      |       ++++++++++++++++++++++        |----> *   Builder  * ------> +   DOM   + -----
                                                            |-----> +  Style and Effect  + -------|        **************       +++++++++++     |
                                                                    ++++++++++++++++++++++        |                                    |        |  
                                                                                                  |                                    |        |  
                 @@@@@@@@@@@@@                                     +++++++++++++++++++++++++++    |                                    |        |  
                 @   User    @ ----------------------------------> +  Insert and attachment  + ---|                                    |        |  
                 @@@@@@@@@@@@@                                     +++++++++++++++++++++++++++                                         |        |  
                      |------------------->>>> >>---------------------------------------------------------------------------------------        | 
                                                                                                                                                |       
                  ------------------------------------------------------------------------------------------------------------------------------|       
                  |                                                                                                                                     
                  |----------------------->>>> >>------------------------------------------------------|
                  |                                                                                    |
                  |      +++++++++++++++                              ******************               |                                                                                           
            	   |      +  Templates  + -->>>> >>-------    ====>=== *  Text Breaker  *               |        
            	   |      +++++++++++++++                |    =        ******************               |------->>>>> >>-------| 
            	   |                                     |    =                                         |                      |
            	   |                                     |    =                                         |                      |
            	   |                                 **************         ++++++++++++++++++          |                      |
            	   |-------------------------------> * Compositor * ------> +  Layout Infos  + ---------|                      |
            		                                   **************         ++++++++++++++++++                                 |
            		                                         =                   |         |                                     |
            		                                         =                   |         |                                     |
            		                                         =       ***************       |                                     |
            		                                         =       * Alignmentor *-->>----                                     |
            		                                         =       ***************                                             |
            		                                         =              =                                                    |
            		                                         =              =                                                    |
            		                                         =              =                                                    |
            		                                         =              =                      ###############               |
            		                                         =              =                ==>== #   Measurer  #               |
            		                                         =          #################    =	   ###############               |
            		                          ===================>===== # Tools Manager # ====                                   |
            		 					      =                         #################    =     ###############               |
            		                    #############                          =             ==>== #   Painter   #               |
            		                    #  Context  # ==========================                   ###############               |
            		                    #############                          ================                                  |
            	                              =                                               =                                  |
            		                          =                               ---------------------------------------------------|
            		  	                      =                               |               =
            		                          =                               |               =
            		                          =                               |           ************            ++++++++++++++++
            		                          =                               |---------> *  Render  * ---------> +    Output    +
                                             =                                           ************            ++++++++++++++++                                                                                                                                                         
                                  		      =               		                          |																															
                                  		      =                                               |																											
            	                              =                           +++++++++++++++++   |
            	                              =                           +  Decorations  + --|
            	                              =                           +++++++++++++++++   |
            	                              =                                               |
            				                  =                   +++++++++++++++++++++++++   |																													
            				                  =                   + Layout Adjusting Info + --|																												
            				                  =                   +++++++++++++++++++++++++   																												
            				                  =                              |               
            				                  ===========                    |               	                                                                                                            
                      ++++++++++++++++++               =                    |                                                                                                             
                      + Alignment and  +          *************             |
                      + Rotation Infos + -------> * Rotation  * ---->>> >>---       
                      ++++++++++++++++++          ************* 
                 
                 -------------------------------------------------------------------------------------------------------------------------------------------
                 
             </remarks>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.ChainOrder">
            <summary>
            Specifies the order of an object in the chain.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.ChainOrder.High">
            <summary>
            Indicates the high order
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.ChainOrder.Normal">
            <summary>
            Indicates the normal order
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.ChainOrder.Low">
            <summary>
            Indicates the low order
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.WordAttribute">
            <summary>
            Specifies the word attribute of common language.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.WordAttribute.Suspensive">
            <summary>
            Not parsed, maybe have more words.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.WordAttribute.WhiteSpace">
            <summary>
            White space.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.WordAttribute.Tab">
            <summary>
            Tab
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.WordAttribute.SoftNewLine">
            <summary>
            Inserted soft new line
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.WordAttribute.NewLine">
            <summary>
            Hard new line
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.WordAttribute.ReferencedObject">
            <summary>
            Referenced object
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.WordAttribute.Invalid">
            <summary>
            Invalid word
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.WordAttribute.HalfWidth">
            <summary>
            Half-width character
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.WordAttribute.FullWidth">
            <summary>
            Full-width character
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.TextRange">
            <summary>
            Indicates the range of text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.TextRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new text range.
            </summary>
            <param name="start">Start position of the range</param>
            <param name="length">Length of the range</param>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.TextRange.Start">
            <summary>
            Determines the start position of the range.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.TextRange.Length">
            <summary>
            Determines the length of the range.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.TextRange.Contains(System.Int32)">
            <summary>
            Determines whether the specified position is in the range.
            </summary>
            <param name="position">Position</param>
            <returns>true if position is in the range; otherwise, false</returns>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.TextRange.Empty">
            <summary>
            Defines an empty range.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.IMeasurer">
            <summary>
            Defines a tool that can be used to measure a specified object in the given context.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.IMeasurer.Measure(System.Object,System.Object)">
            <summary>
            Measures the size of a specified object in the given context.
            </summary>
            <param name="context">Context</param>
            <param name="obj">Object to be measured</param>
            <returns><see cref="T:System.Drawing.Size"/> of the object</returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.IPainter">
            <summary>
            Defines a tool that can be used to draw a specified object in the given context.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.IPainter.Draw(System.Object,System.Drawing.Rectangle,System.Object,System.Int32)">
            <summary>
            Draws the object in the given context or based on the bounds. 
            </summary>
            <param name="context">Context</param>
            <param name="bounds">Rectangular bounds</param>
            <param name="obj">Object to be drawn</param>
            <param name="embeddingLevel">Number of levels of embedding</param>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.IRestorable">
            <summary>
            Defines a interface that holds the values of some status of a particular object, 
            and can restore the status to the values. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.IRestorable.Restore">
            <summary>
            Restores the value of the status.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.IMeasurerChain">
            <summary>
            Defines a chain that can change a serial measurers.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.IMeasurerChain.PreviousMeasurer(System.Int32)">
            <summary>
            Gets the previous measurer in the chain, by a unique location identifier.
            </summary>
            <param name="id">Unique location identifier</param>
            <value>
            Returns the measurer. If have not, return null.
            </value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.IMeasurerChain.Add(FarPoint.Win.Text.TextRender.ChainOrder,FarPoint.Win.Text.TextRender.IMeasurer)">
            <summary>
            Adds a measurer into the chain.
            </summary>
            <param name="order">A <see cref="T:FarPoint.Win.Text.TextRender.ChainOrder"/> indicates the order</param>
            <param name="measurer"> An ITextMeasurer indicates the measurer</param>
            <returns>Unique location identifier to this chain</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.IMeasurerChain.Remove(System.Int32)">
            <summary>
            Removes a measurer from the chain.
            </summary>
            <param name="id">Unique location identifier</param>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.IMeasurerChain.Count">
            <summary>
            Gets the number of measurers in the chain.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.IPainterChain">
            <summary>
            Defines a chain used to change the painters.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.IPainterChain.PreviousPainter(System.Int32)">
            <summary>
            Gets the previous painter in the chain, by a unique location identifier.
            </summary>
            <param name="id">Unique location identifier</param>
            <value>Returns the painter. If have not, return null.</value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.IPainterChain.Add(FarPoint.Win.Text.TextRender.ChainOrder,FarPoint.Win.Text.TextRender.IPainter)">
            <summary>
            Adds a painter to the chain on a separate layer.
            </summary>
            <param name="order">Chain order</param>
            <param name="painter">Painter</param>
            <returns>Unique location identifier to this chain</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.IPainterChain.Remove(System.Int32)">
            <summary>
            Removes a painter from the chain.
            </summary>
            <param name="id">Unique location identifier</param>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.IPainterChain.Count">
            <summary>
            Gets the number of painters this chain.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.IExtendedTreeEnumerator">
            <summary>
            Defines an extended tree enumerator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.IExtendedTreeEnumerator.CurrentIndex">
            <summary>
            Gets the index of the current object.
            </summary>
            <value>Index of the current object</value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.IExtendedTreeEnumerator.MoveTo(System.Int32)">
            <summary>
            Moves the enumerator to browse the object at the specified index.
            </summary>
            <param name="index">Index</param>
            <returns>true if can move to the specified index; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.IExtendedTreeEnumerator.Expand">
            <summary>
            Gets the sub tree enumerator.
            </summary>
            <value>
            Returns an <see cref="T:FarPoint.Win.Text.TextRender.IExtendedTreeEnumerator"/> used to browse the sub tree.
            </value>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.IDeviceContext">
            <summary>
            Interface that provides the device context.
            </summary>
            <remarks>
              The handle is not equal the unmanaged handle, also the concept and value are same as it.
              Please consider using <see cref="T:FarPoint.Win.Text.Graphics32"/> class to void the direct calling of the unmanged APIs.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.IDeviceContext.Handle">
            <summary>
            Gets the handle of the device context.
            </summary>
            <value>Device context</value>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.IDeviceContext.Font">
            <summary>
            Gets or sets the handle of the selected font.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.IDeviceContext.TextColor">
            <summary>
            Gets or sets the text color.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.TextSegment">
            <summary>
            Defines a class that indicates a pure text segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.TextSegment._range">
            <summary>
            Indicates the range of the text segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.TextSegment._attribute">
            <summary>
            Indicates the attribute of the text segment.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.TextSegment.#ctor(FarPoint.Win.Text.TextRender.TextRange,FarPoint.Win.Text.TextRender.WordAttribute)">
            <summary>
            Creates a text segment.
            </summary>
            <param name="range">
            Indicates the range of the word in the script.
            </param>
            <param name="attribute">
            Indicates the attribute of the text segment.
            </param>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.TextSegment.Range">
            <summary>
            Gets the range of the text segment.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.TextSegment.Attribute">
            <summary>
            Gets the attribute of the segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.TextSegment.BidirectionalCharacteristic">
            <summary>
            Left to right chars : 0.
            Neutral chars (space, symbols, punctuation..) : -1.
            Weak left to right char (European digits) :2.
            European digits but need substitution :3
            Right to left chars : 1.
            Control char, RightToLeft override, RLO : 11.
            Control char, LeftToRight override, LRO : 10.
            Control char, Pop Directional Format, PDF : 20.
            Control char, RightToLeft embedding, RLE : 13.
            Control char, LeftToRight embedding, LRE : 12.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.MeasurerChain">
            <summary>
            Represents an implementation of the IMeasurerChain interface.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.MeasurerChain.ChainNode">
            <summary>
            Defines a node used to save the measurers.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerChain.ChainNode.#ctor(System.Int32,FarPoint.Win.Text.TextRender.ChainOrder,FarPoint.Win.Text.TextRender.IMeasurer)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TextRender.MeasurerChain.ChainNode"/> class.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerChain.ChainNode.Id">
            <summary>
            Saves the location identifier.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerChain.ChainNode.Order">
            <summary>
            Saves the chain order.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerChain.ChainNode.Measurer">
            <summary>
            Saves the measurer.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerChain.ChainNode.Next">
            <summary>
            Points to next node.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerChain._idCount">
            <summary>
            Saves the identifier count.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerChain._rootNode">
            <summary>
            Points to the root node.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerChain._count">
            <summary>
            Counts the number of measurers.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerChain.GetId">
            <summary>
            Get a new location identifier.
            </summary>
            <returns>New location identifier</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerChain.PreviousMeasurer(System.Int32)">
            <summary>
            Gets the previous measurer in the chain, by a unique location identifier.
            </summary>
            <param name="id">Unique location identifier</param>
            <value>
            Returns the measurer. If not found, returns null.
            </value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerChain.Add(FarPoint.Win.Text.TextRender.ChainOrder,FarPoint.Win.Text.TextRender.IMeasurer)">
            <summary>
            Adds a measurer into the chain.
            </summary>
            <param name="order">Chain order</param>
            <param name="measurer">Measurer</param>
            <returns>Unique location identifier to this chain</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerChain.Remove(System.Int32)">
            <summary>
              Removes a measurer from the chain.
            </summary>
            <param name="id">Unique location identifier</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerChain.Measure(System.Object,System.Object)">
            <summary>
            Measures the size of a specified object in the given context.
            </summary>
            <param name="context">Context</param>
            <param name="obj">Object to be measured</param>
            <returns><see cref="T:System.Drawing.Size"/> of the object</returns>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.MeasurerChain.Count">
            <summary>
            Gets the number of measurers in the chain.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerChain.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>New object that is a copy of this instance</returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.PainterChain">
            <summary>
            Represents a chain of painters.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.PainterChain.ChainNode">
            <summary>
            Defines a node used to save the painters.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterChain.ChainNode.#ctor(System.Int32,FarPoint.Win.Text.TextRender.ChainOrder,FarPoint.Win.Text.TextRender.IPainter)">
            <summary>
            Creates a new chain node.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterChain.ChainNode.Id">
            <summary>
            Saves the location identifier.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterChain.ChainNode.Order">
            <summary>
            Saves the chain order.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterChain.ChainNode.Painter">
            <summary>
            Saves the painter.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterChain.ChainNode.Next">
            <summary>
            Points to next node.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterChain._idCount">
            <summary>
            Saves the identifier count.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterChain._chainNode">
            <summary>
            Save the paint node.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterChain._count">
            <summary>
            Counts the number of painters.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterChain.GetId">
            <summary>
            Gets a new location identifier.
            </summary>
            <returns>New location identifier</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterChain.SaveLayerIndex(System.Int32,System.Int32)">
            <summary>
            Saves the layer index to the location identifier.
            </summary>
            <param name="id">Unique location identifier</param>
            <param name="index">Layer index in the _layer array</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterChain.RetrieveLayerIndex(System.Int32)">
            <summary>
            Retrieves the layer index from the location identifier.
            </summary>
            <param name="id">Unique location identifier</param>
            <returns>Index of the _layer array</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterChain.PreviousPainter(System.Int32)">
            <summary>
            Gets the previous painter in the chain, by the specified location identifier.
            </summary>
            <param name="id">Unique location identifier</param>
            <value>Painter; if not found, returns null</value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterChain.Add(FarPoint.Win.Text.TextRender.ChainOrder,FarPoint.Win.Text.TextRender.IPainter)">
            <summary>
            Adds a painter to the chain on a separate layer.
            </summary>
            <param name="order">Chain order</param>
            <param name="painter">Painter</param>
            <returns>Unique location identifier of this chain</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterChain.Remove(System.Int32)">
            <summary>
            Removes a painter from the chain.
            </summary>
            <param name="id">Unique location identifier</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterChain.Draw(System.Object,System.Drawing.Rectangle,System.Object,System.Int32)">
            <summary>
            Draws the object in the given context or based on the bounds. 
            </summary>
            <param name="context">Context</param>
            <param name="bounds">Rectangular bounds</param>
            <param name="obj">Object to be drawn</param>
            <param name="embeddingLevel">Number of levels of embedding</param>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.PainterChain.Count">
            <summary>
            Gets the number of painters in this chain.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterChain.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>New object that is a copy of this instance</returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.MeasurerSit">
            <summary>
            Provides a sit for add a measurer to a measurer chain. 
            </summary>
            <remarks>
            Adds a measuer to the measurer chain and give you a chance to remove the measurer from the measurer chain.
            </remarks>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.MeasurerSit.InnerPreviousMeasurer">
            <summary>
            Defines a class that used to visit the previous measurer in the measurer chain.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerSit.InnerPreviousMeasurer._sit">
            <summary>
            Holds the owner sit.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerSit.InnerPreviousMeasurer.#ctor(FarPoint.Win.Text.TextRender.MeasurerSit)">
            <summary>
            Creates a new inner previous measurer.
            </summary>
            <param name="sit"><see cref="T:FarPoint.Win.Text.TextRender.MeasurerSit"/> indicates the owner sit</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerSit.InnerPreviousMeasurer.Measure(System.Object,System.Object)">
            <summary>
            Measures the size of a specified object in the given context.
            </summary>
            <param name="context">Context</param>
            <param name="obj">Object</param>
            <returns><see cref="T:System.Drawing.Size"/> of the object</returns>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerSit._attachedContext">
            <summary>
            Indicates whether this text measurer has attached to the context.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerSit._attachedId">
            <summary>
            Indicates the attached identifier.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerSit._measurer">
            <summary>
            Indicates the measurer.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.MeasurerSit._defaultMeasurer">
            <summary>
            Indicates the default measurer.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerSit.#ctor(System.Object,FarPoint.Win.Text.TextRender.ChainOrder)">
            <summary>
            Adds this measurer sit to context.
            </summary>
            <param name="context">Context</param>
            <param name="order">Chain order</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerSit.IsAttachedContext(System.Object)">
            <summary>
            Returns whether the context is attached.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerSit.Dispose">
            <summary>
            Removes the sit from attached context.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerSit.DefaultMeasure(System.Object,System.Object)">
            <summary>
            Uses the previous measureser to measure the size of a specified object in the given context.
            </summary>
            <param name="context">Context</param>
            <param name="obj">Object to be measured</param>
            <returns><see cref="T:System.Drawing.Size"/> of the object</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.MeasurerSit.Measure(System.Object,System.Object)">
            <summary>
            Measures the size of a specified object in the given context.
            </summary>
            <param name="context">Context</param>
            <param name="obj">Object to be measured</param>
            <returns><see cref="T:System.Drawing.Size"/> of the object</returns>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.MeasurerSit.Measurer">
            <summary>
            Gets or sets the measurer plugged in this sit.
            </summary>
            <value>Plugged measurer</value>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.MeasurerSit.DefaultMeasurer">
            <summary>
            Gets the previous measurer.
            </summary>
            <value>Previous measurer</value>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.PainterSit">
            <summary>
            Provides a sit for add a painter to a painter chain. 
            </summary>
            <remarks>
            Adds a painter to the painter chain and give you a chance to remove the painter from the painter chain.
            </remarks>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.PainterSit.InnerPreviousPainter">
            <summary>
            Defines a class used to visit the previous painter in the painter chain.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterSit.InnerPreviousPainter._sit">
            <summary>
            Holds the owner sit.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterSit.InnerPreviousPainter.#ctor(FarPoint.Win.Text.TextRender.PainterSit)">
            <summary>
            Creates a new inner previous painter.
            </summary>
            <param name="sit"><see cref="T:FarPoint.Win.Text.TextRender.PainterSit"/> indicates the owner sit</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterSit.InnerPreviousPainter.Draw(System.Object,System.Drawing.Rectangle,System.Object,System.Int32)">
            <summary>
            Draws the object in the given context or based on the bounds. 
            </summary>
            <param name="context">Context</param>
            <param name="bounds">Rectangular bounds</param>
            <param name="obj">Object to be drawn</param>
            <param name="embeddingLevel">Number of levels of embedding</param>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterSit._attachedContext">
            <summary>
            Indicates whether this text measurer has attached to the context.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterSit._attachedId">
            <summary>
            Indicates the attached identifier.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterSit._painter">
            <summary>
            Indicates the painter.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.PainterSit._defaultPainter">
            <summary>
            Indicates the default painter.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterSit.#ctor(System.Object,FarPoint.Win.Text.TextRender.ChainOrder)">
            <summary>
            Adds this painter sit to context.
            </summary>
            <param name="context">Context</param>
            <param name="order">Chain order</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterSit.IsAttachedContext(System.Object)">
            <summary>
            Returns whether the context is attached.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterSit.Dispose">
            <summary>
            Removes this sit from the attached context.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterSit.DefaultDraw(System.Object,System.Drawing.Rectangle,System.Object,System.Int32)">
            <summary>
            Draws the object used for the previous painter int the painter chain.
            </summary>
            <param name="context">Context</param>
            <param name="bounds">Rectangular bounds</param>
            <param name="obj">Object to be drawn</param>
            <param name="embeddingLevel">Number of levels of embedding</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.PainterSit.Draw(System.Object,System.Drawing.Rectangle,System.Object,System.Int32)">
            <summary>
            Draws the object in the given context or based on the bounds. 
            </summary>
            <param name="context">Context</param>
            <param name="bounds">Rectangular bounds</param>
            <param name="obj">Object to be drawn</param>
            <param name="embeddingLevel">Number of levels of embedding</param>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.PainterSit.Painter">
            <summary>
            Gets or sets the text painter plugged in this sit.
            </summary>
            <value>Plugged painter</value>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.PainterSit.DefaultPainter">
            <summary>
            Gets the previous painter.
            </summary>
            <value>
              An <see cref="T:FarPoint.Win.Text.TextRender.IMeasurer"/> indicates the previous painter.
            </value>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.NormalTextMeasurer">
            <summary>
            Represents a measurer used to measure the normal text (Does not include the tab, newline and unvalid characters).
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.NormalTextMeasurer.Measure(System.Object,System.Object)">
            <summary>
              Measures the size of a specified object in the given context.
            </summary>
            <param name="context">Context</param>
            <param name="obj">
              An <b>object</b> that indicates the object to be measured. 
            </param>
            <returns>
              Return the <see cref="T:System.Drawing.Size"/> of the object.
            </returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.NormalTextPainter">
            <summary>
            Represents a painter used to draw the normal text (Does not include the tab, newline and unvalid characters).
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.NormalTextPainter.Draw(System.Object,System.Drawing.Rectangle,System.Object,System.Int32)">
            <summary>
            Draws the object in the given context or based on the bounds. 
            </summary>
            <param name="context">Context</param>
            <param name="bounds">Rectangular bounds</param>
            <param name="obj">Object to be drawn</param>
            <param name="embeddingLevel">Number of levels of embedding</param>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.EmptyPainter">
            <summary>
            Represents a painter that draws nothing.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.EmptyPainter.Draw(System.Object,System.Drawing.Rectangle,System.Object,System.Int32)">
            <summary>
            Draws the object in the given context or based on the bounds. 
            </summary>
            <param name="context">Context</param>
            <param name="bounds">Rectangular bounds</param>
            <param name="obj">Object to be drawn</param>
            <param name="embeddingLevel">Number of levels of embedding</param>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.TabMeasurer">
            <summary>
            A measurer used to measure the tab characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.TabMeasurer._currentWidth">
            <summary>
            Saves the current text width.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.TabMeasurer._tabSize">
            <summary>
            Saves the tab size;
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.TabMeasurer.#ctor(System.Int32,System.Int32[])">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TextRender.TabMeasurer"/> class.
            </summary>
            <param name="currentWidth">Current text width</param>
            <param name="tabSize">Tab size array</param>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.TabMeasurer.CurrentWidth">
            <summary>
            Gets or sets the current text width.
            </summary>
            <value>Current text width</value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.TabMeasurer.Measure(System.Object,System.Object)">
            <summary>
            Measures the size of a specified object in the given context.
            </summary>
            <param name="context">Context</param>
            <param name="obj">Object to be measured</param>
            <returns><see cref="T:System.Drawing.Size"/> of the object</returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.HotkeyEffect">
            <summary>
            Defines a hotkey effect.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.HotkeyEffect.HotkeyEffectPainter">
            <summary>
            Represents a painter used to draw the hotkey effect.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.HotkeyEffect.HotkeyEffectPainter._sit">
            <summary>
            Saves the painter sit of painter chain.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.HotkeyEffect.HotkeyEffectPainter._effect">
            <summary>
            Holds the pointer of the owner.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.HotkeyEffect.HotkeyEffectPainter.#ctor(FarPoint.Win.Text.TextRender.HotkeyEffect,System.Object)">
            <summary>
            Creates a new hot key effect painter.
            </summary>
            <param name="effect">Owner hot key effect</param>
            <param name="context">Context</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.HotkeyEffect.HotkeyEffectPainter.Draw(System.Object,System.Drawing.Rectangle,System.Object,System.Int32)">
            <summary>
            Draws the object in the given context or based on the bounds. 
            </summary>
            <param name="context">Context</param>
            <param name="bounds">Rectangular bounds</param>
            <param name="obj">Object to be drawn</param>
            <param name="embeddingLevel">Number of levels of embedding</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.HotkeyEffect.HotkeyEffectPainter.Restore">
            <summary>
            Restores the value of a particular status.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.HotkeyEffect.Apply(System.Object)">
            <summary>
            Applies the effect to the given context.
            </summary>
            <param name="context">Context</param>
            <returns><see cref="T:FarPoint.Win.Text.TextRender.IRestorable"/> to cancel this applying action</returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.TextBindingCollection">
            <summary>
            Defines a collection used to save the binding object to text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.TextBindingCollection._bindings">
            <summary>
            Saves the binding objects.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.TextBindingCollection.GetEnumerator">
            <summary>
            Gets a enumerator to browse the items.
            </summary>
            <returns><see cref="T:System.Collections.IEnumerator"/> to browse the items of the collection</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.TextBindingCollection.PositionOf(System.Object)">
            <summary>
            Gets the inserted or attached position from the binding object.
            </summary>
            <param name="value">Binding object</param>
            <returns>Position</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.TextBindingCollection.InternalAdd(System.Object)">
            <summary>
            Adds a binding object to the collection.
            </summary>
            <param name="value">Binding object</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.TextBindingCollection.Add(FarPoint.Win.Text.TextRender.HotkeyEffectStyle)">
            <summary>
            Adds an attached object to the collection and processes the access key.
            </summary>
            <param name="value">Attached text</param>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.HotkeyEffectStyle">
            <summary>
            Attaches some object for a text range.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.HotkeyEffectStyle._range">
            <summary>
            Saves the attached range.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.HotkeyEffectStyle._hotkeyEffect">
            <summary>
            Saves the attached object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.HotkeyEffectStyle.#ctor(FarPoint.Win.Text.TextRender.TextRange)">
            <summary>
            Creates a new text attachment.
            </summary>
            <param name="range">Attached range</param>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.HotkeyEffectStyle.Range">
            <summary>
            Gets the attached range of the object.
            </summary>
            <value><see cref="T:FarPoint.Win.Text.TextRender.TextRange"/>, attached range</value>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.HotkeyEffectStyle.HotkeyEffect">
            <summary>
            Gets the attached object.
            </summary>
            <value>Attached object</value>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools">
            <summary>
            Defines a collection of tools that the user can implement for rendering simple rich text.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext">
            <summary>
            Defines a simple context for the tools.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext._graphics">
            <summary>
            Saves the graphics 32.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext._measurerChain">
            <summary>
            Saves the measurer chain.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext._painterChain">
            <summary>
            Saves the painter chain.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext._font">
            <summary>
            Font handle 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext._textColor">
            <summary>
            Text Color
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.IsRightToLeft">
            <summary>
            IsRightToLeft
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.HotkeyPrefix">
            <summary>
            HotkeyPrefix
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.#ctor(FarPoint.Win.Text.Graphics32)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext"/> class.
            </summary>
            <param name="graphics"><see cref="T:FarPoint.Win.Text.Graphics32"/></param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.#ctor(FarPoint.Win.Text.Graphics32,FarPoint.Win.Text.TextRender.IMeasurer,FarPoint.Win.Text.TextRender.IPainter)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext"/> class.
            </summary>
            <param name="graphics">Graphics device</param>
            <param name="defaultMeasurer">Default measurser</param>
            <param name="defaultPainter">Default painter</param>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.Graphics">
            <summary>
            Gets the <see cref="T:FarPoint.Win.Text.Graphics32"/> object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.FarPoint#Win#Text#TextRender#IPainterChain#PreviousPainter(System.Int32)">
            <summary>
            Gets the previous painter in the chain, by the specified location identifier.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.FarPoint#Win#Text#TextRender#IPainterChain#Add(FarPoint.Win.Text.TextRender.ChainOrder,FarPoint.Win.Text.TextRender.IPainter)">
            <summary>
            Adds a painter to the chain on a separate layer.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.FarPoint#Win#Text#TextRender#IPainterChain#Remove(System.Int32)">
            <summary>
            Removes a painter from the chain.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.FarPoint#Win#Text#TextRender#IPainterChain#Count">
            <summary>
            Gets the painter number contained in this chain.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.FarPoint#Win#Text#TextRender#IMeasurerChain#PreviousMeasurer(System.Int32)">
            <summary>
            Gets the previous measurer in the chain, by a unique location identifier.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.FarPoint#Win#Text#TextRender#IMeasurerChain#Add(FarPoint.Win.Text.TextRender.ChainOrder,FarPoint.Win.Text.TextRender.IMeasurer)">
            <summary>
            Adds a measurer into the chain.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.FarPoint#Win#Text#TextRender#IMeasurerChain#Remove(System.Int32)">
            <summary>
            Removes a measurer from the chain.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.FarPoint#Win#Text#TextRender#IMeasurerChain#Count">
            <summary>
            Gets the number of measurers in the chain.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.FarPoint#Win#Text#TextRender#IPainter#Draw(System.Object,System.Drawing.Rectangle,System.Object,System.Int32)">
            <summary>
            Draws the object in the given context or based on the bounds. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.FarPoint#Win#Text#TextRender#IMeasurer#Measure(System.Object,System.Object)">
            <summary>
            Measures the size of a specified object in the given context.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.FarPoint#Win#Text#TextRender#IDeviceContext#Handle">
            <summary>
            Gets the handle of the device context.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.Font">
            <summary>
            Gets the handle of the selected font.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.SimpleContext.TextColor">
            <summary>
            Gets or sets the text color.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser">
            <summary>
            Defines a text parser used to parse pure text to words.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator">
            <summary>
            Defines an enumerator that is used to browse an parsed result collection.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator._parser">
            <summary>
              Holds the parser.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator._text">
            <summary>
            Saves the text to be parsed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator._current">
            <summary>
            Saves the current result.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator._parsedPosition">
            <summary>
            Saves the current parsed position.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator._parsedIndex">
            <summary>
            Saves the current index.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator._resultCache">
            <summary>
            Saves the parsed result. If this field is null, enumerator does not cache the results.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator._parsedTextLength">
            <summary>
            Indicates the parsed text length.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator.#ctor(FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser,FarPoint.Win.Text.GlobalizedString,System.Boolean)">
            <summary>
            Creates a new <seealso cref="T:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator"/> class.
            </summary>
            <param name="parser">
            A TextParserBase that indicates the parser.
            </param>
            <param name="text">
            Text to be enumerated.
            </param>
            <param name="cacheParsedResult">
            Indicates if caches the parsed result.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator.Current">
            <summary>
            Gets the current parsed result.
            </summary>
            <value>Parsed result</value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator.MoveNext">
            <summary>
            Moves the enumerator to browse the next parsed result.
            </summary>
            <returns>true if have next parsed result; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.ParsedResultEnumerator.Dispose">
            <summary>
            Disposes the cached result.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.Parse(FarPoint.Win.Text.GlobalizedString)">
            <summary>
            Parses the specified text and gets the text segment collection.
            </summary>
            <param name="text">Text string</param>
            <returns>Parsed text segement collection</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.Parse(FarPoint.Win.Text.GlobalizedString,System.Int32)">
            <summary>
            Overridden. Finds the nearest parsed result at the specified position.
            </summary>
            <param name="text">Text string</param>
            <param name="position">Position</param>
            <returns>Parsed results</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.PureTextWordParser.Parse(FarPoint.Win.Text.GlobalizedString,System.Int32,System.Int32@)">
            <summary>
            Overridden. Parses a given text and return the parse result.
            </summary>
            <param name="text">Text string</param>
            <param name="start">Start position</param>
            <param name="convertedLength">Length of text converted</param>
            <returns>Parsed result</returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.Breaker">
            <summary>
            Defines a default text breaker or segmenter (that can break text into segements).
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.Breaker.CanBreak(FarPoint.Win.Text.TextRender.TextSegment,System.Boolean)">
            <summary>
            Returns whether the specified text segment can be broken into segments.
            </summary>
            <param name="segment">Text segment to be broken</param>
            <param name="forced">Whether the breaking action is forced</param>
            <returns>true if text can be segmented; otherwise, false</returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.TextReader">
            <summary>
            Represents a way to process the style of the text;
            provides the fitted context and segments for text compositor.
            </summary>
            <remarks>
              1. The deep of this tree is two.
              2. Just suports the sequence reading.
                 Supports:
                   [0,2][3,4][5,6][7,8][9,10]
                   [0,2][5,6][9,10]
                 Not Supports:
                   [3,4][0,2][7,8][5,6]
            </remarks>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements">
            <summary>
            Defines a class used to browse the sub segements.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements._owner">
            <summary>
            Saves the owner TextReader.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements._version">
            <summary>
            Saves the current version of TextRender, when version is changed this enumerator is invalid.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements._offset">
            <summary>
            Saves the curent sub segment's offset from the start of current segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements._length">
            <summary>
            Saves the length of current sub segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements._insertedObject">
            <summary>
            Saves the inserted object that inserted in the current position. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements._currentIndex">
            <summary>
            Saves the current index of the segment.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements.#ctor(FarPoint.Win.Text.TextRender.SimpleTools.TextReader)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements"/> class.
            </summary>
            <param name="owner">
            A <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.TextReader"/> indicates the owner.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements.CheckVersion">
            <summary>
              Checks if the current version is right.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements.Expand">
            <summary>
              User can create other reader out of this class freely; next level is not needed.
            </summary>
            <returns>
              Always, return <b>null</b>.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements.Reset">
            <summary>
              No way to implement this method.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements.Current">
            <summary>
            Gets the current sub-segment.
            </summary>
            <value>
            An <b>object</b> that indicates the current sub-segment.
            </value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements.MoveNext">
            <summary>
              Moves to the next sub-segment.
            </summary>
            <returns>
              If can move to the next sub-segment, returns true; otherwise, returns false.
            </returns>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements.CurrentIndex">
            <summary>
            Gets the current index.
            </summary>
            <value>Current index</value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.SubSegements.MoveTo(System.Int32)">
            <summary>
              Moves the enumerator to browse the object at the specified index.
            </summary>
            <param name="index">Index specified</param>
            <returns>true if can move to the specified index; otherwise, false</returns>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader._context">
            <summary>
            Indicates the context that express the output device.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader._segments">
            <summary>
            Indicates the segments parsed from the pure text or script.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader._attachments">
            <summary>
            Indicates the attachments binded to the segments.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader._version">
            <summary>
            Indicates the browser version.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader._hasAttachments">
            <summary>
            Indicates if there is an attachment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader._segment">
            <summary>
            Indicates the current browsing segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader._subSegments">
            <summary>
            Indicates the sub segments.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader._repealingActions">
            <summary>
            Represents a list used to save the repealing actions.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader._processedSegmentLength">
            <summary>
            Indicates the length of the processed segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader._currentIndex">
            <summary>
            Saves the current index of the segment.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.#ctor(System.Object,System.Collections.IEnumerator,System.Collections.IEnumerator)">
            <summary>
             Creates a new text reader.
            </summary>
            <param name="context">Context that express the output device</param>
            <param name="segments">Segments parsed from the pure text or script</param>
            <param name="attachments">Attachments bound to the segments</param>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.Context">
            <summary>
            Gets the context.
            </summary>
            <value>Context</value>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.Current">
            <summary>
            Gets the current segment.
            </summary>
            <value>Current segment</value>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <value>Segments</value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.Reset">
            <summary>
            Resetes the enumerator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.Expand">
            <summary>
            Gets the sub-segments.
            </summary>
            <returns><b>IExtendedTreeEnumerator</b>, the sub-segments</returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.RepealingAction">
            <summary>
            Represents a way to save the repealing action.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.RepealingAction.#ctor(System.Int32,FarPoint.Win.Text.TextRender.IRestorable)">
            <summary>
             Creates a new repealing action.
            </summary>
            <param name="position">Repealing position</param>
            <param name="doing"><see cref="T:FarPoint.Win.Text.TextRender.IRestorable"/> to do repealing action</param>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.RepealingAction.Position">
            <summary>
            Determines the repealing position.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.RepealingAction.Doing">
            <summary>
            Determines the <see cref="T:FarPoint.Win.Text.TextRender.IRestorable"/> to do repealing action.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.AddRepealingAction(System.Int32,FarPoint.Win.Text.TextRender.IRestorable)">
            <summary>
            Adds the repealing action to the action list.
            </summary>
            <param name="position">Performing position</param>
            <param name="doing"><b>IRestorable</b>, to do the action</param>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.FirstRepealingPosition">
            <summary>
            Gets the first repealing position.
            </summary>
            <value>First position that needs to do repealing</value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.Repeal(System.Int32)">
            <summary>
            Does the repealing actions.
            </summary>
            <param name="position">Current position</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.UpdateContext(System.Int32)">
            <summary>
            Updates the context with the attachment.
            </summary>
            <param name="position">Updating position.
            </param>
            <returns>Whether find a glyph</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.MoveNext">
            <summary>
            Moves the enumerator to next segment; the previous expanded result becomes invalid.
            </summary>
            <value>true if there is the next segment; false otherwise</value>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.CurrentIndex">
            <summary>
            Gets the current index.
            </summary>
            <value>Current index</value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextReader.MoveTo(System.Int32)">
            <summary>
            Moves to the specified index.
            </summary>
            <param name="index">Index specified</param>
            <returns>true if can move to the specified index; otherwise, false</returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.DefaultTextSegmentMeasurer">
            <summary>
            Defines a measurer that used to measure the size of the text segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.DefaultTextSegmentMeasurer._text">
            <summary>
            Saves the text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.DefaultTextSegmentMeasurer.#ctor(FarPoint.Win.Text.GlobalizedString)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.DefaultTextSegmentMeasurer"/>.
            </summary>
            <param name="text">Whole text string</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.DefaultTextSegmentMeasurer.Measure(System.Object,System.Object)">
            <summary>
            Measures the size of a specified object in the given context.
            </summary>
            <param name="context">Context</param>
            <param name="obj">
              An <b>object</b> that indicates the object to be measured. 
            </param>
            <returns>
              Returns the <see cref="T:System.Drawing.Size"/> of the object.
            </returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.DefaultTextSegementPainter">
            <summary>
            Defines a painter that used to draw the text segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.DefaultTextSegementPainter._text">
            <summary>
            Saves the text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.DefaultTextSegementPainter.#ctor(FarPoint.Win.Text.GlobalizedString,System.Boolean)">
            <summary>
            Creates a new default painter for a text segment.
            </summary>
            <param name="text">Entire globalized text string</param>
            <param name="inTopDown">Whether painted top down</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.DefaultTextSegementPainter.Draw(System.Object,System.Drawing.Rectangle,System.Object,System.Int32)">
            <summary>
            Draws the object in the given context or based on the bounds. 
            </summary>
            <param name="context">Context</param>
            <param name="bounds">Rectangular bounds</param>
            <param name="obj">Object to be drawn</param>
            <param name="embeddingLevel">Number of levels of embedding</param>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.VerticalTextMeasurer">
            <summary>
            A measurer used to measure the vertical text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.VerticalTextMeasurer.Measure(System.Object,System.Object)">
            <summary>
              Measures the size of a specified object in the given context.
            </summary>
            <param name="context">Context</param>
            <param name="obj">
              An <b>object</b> that indicates the object to be measured. 
            </param>
            <returns>
              Return the <see cref="T:System.Drawing.Size"/> of the object.
            </returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.VerticalTextPainter">
            <summary>
            A painter used to draw the vertical text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.VerticalTextPainter.Draw(System.Object,System.Drawing.Rectangle,System.Object,System.Int32)">
            <summary>
            Draws the object in the given context or based on the bounds. 
            </summary>
            <param name="context">Context</param>
            <param name="bounds">Rectangular bounds</param>
            <param name="obj">Object to be drawn</param>
            <param name="embeddingLevel">Number of levels of embedding</param>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.PageInfo">
            <summary>
            Defines a class that save the page info.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.PageInfo.Size">
            <summary>
            A <b>Size</b> object that indicates the size of the page.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.PageInfo.Margins">
            <summary>
            A <b>Margins</b> object that indicates the margins around the page.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.PageInfo.WordInfos">
            <summary>
              An array save the word infos.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.PageInfo.ParagraphInfos">
            <summary>
              An array save the paragraph infos.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.PageInfo.ClientBounds">
            <summary>
            Gets the client bounds.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.PageInfo.Reverse">
            <summary>
            Changes the line location.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.ParagraphInfo">
            <summary>
            Defines a class that save the paragraph info.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.ParagraphInfo.Location">
            <summary>
            A <b>Point</b> that indicates the location of the page.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.ParagraphInfo.Size">
            <summary>
            A <b>Size</b> object that indicates the size of the page.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.ParagraphInfo.Margins">
            <summary>
            A <b>Margins</b> object that indicates the margins around the paragraph.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.ParagraphInfo.WordRange">
            <summary>
            A <b>TextRange</b> object that indicates the word range contained in this paragraph information.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.ParagraphInfo.LineInfos">
            <summary>
            An array that saves the line information.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.ParagraphInfo.ClientBounds">
            <summary>
            Gets the client bounds.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.ParagraphInfo.Reverse">
            <summary>
            Changes the line location.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.LineInfo">
            <summary>
            Defines a class that save the line info.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.LineInfo.Location">
            <summary>
            A <b>Point</b> that indicates the location of the page.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.LineInfo.Size">
            <summary>
            A <b>Size</b> object that indicates the size of the page.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.LineInfo.Margins">
            <summary>
            A <b>Margins</b> object that indicates the margins around the line.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.LineInfo.ClientBounds">
            <summary>
            Gets the client bounds.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.LineInfo.BeforeWrap">
            <summary>
            Saves the before wrap.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.LineInfo.AfterWrap">
            <summary>
            Saves the after wrap.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.LineInfo.WordRange">
            <summary>
            A <b>TextRange</b> object that indicates the word range contained in this paragraph information.
            </summary>
            <remarks>
              Does not contain the wrapped word.
            </remarks>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.WrapInfo">
            <summary>
            Defines a class that save the wrap info.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WrapInfo.BreakedOffset">
            <summary>
            Indicates the break offset in the break segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WrapInfo.BreakedSegmentIndex">
            <summary>
            An <b>int</b> object that indicates the index of the segment break.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WrapInfo.Location">
            <summary>
            A <b>Point</b> object that indicates the the location of the page.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WrapInfo.Size">
            <summary>
            A <b>Size</b> object that indicates the size of the page.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WrapInfo.BreakedWordIndex">
            <summary>
            An <b>int</b> object that indicates the index of the word break.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WrapInfo.TotalJustify">
            <summary>
            Defines the sum of the justify width between each glyph.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.WordInfo">
            <summary>
            Defines a class that save the line info.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WordInfo.Location">
            <summary>
            A <b>Point</b> object that indicates the location of the word.
            </summary>
            <remarks>
              The location is offset from the top left corner of the line information.
            </remarks>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WordInfo.Size">
            <summary>
            A <b>Size</b> object that indicates the size of the word.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WordInfo.Attribute">
            <summary>
            A <b>WordAttribute</b> object that indicates the attribute of the word.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WordInfo.SegmentInfos">
            <summary>
            An array that saves the segment information.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WordInfo.EmbeddingLevel">
            <summary>
            Right to left block  : odd numbers,  from 0 to 10000. 
            Left to right block  : even numbers, from 0 to 10000.
            Right to left block but being within Left to right overriding effect  : odd numbers, from 10000 to 20000.
            Left to right block but being within Left to right overriding effect  : odd numbers, from 10000 to 20000.
            Left to right block but being within Right to left overriding effect  : even numbers, > 20000.
            Right to left block but being within Right to left overriding effect  : even numbers, > 20000.
            Practically, without overriding effect, EmbeddingLevel hardly ever could reach 10000 unless the string's length is > 10000.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.WordInfo.BidirectionalCharacteristic">
            <summary>
            Left to right chars : 0.
            Neutral chars (space, symbols, punctuation..) : -1.
            Weak left to right char (European digits) :2.
            Right to left chars : 1.
            Control char, RightToLeft override, RLO : 11.
            Control char, LeftToRight override, LRO : 10.
            Control char, Pop Directional Format, PDF : 20.
            Control char, RightToLeft embedding, RLE : 13.
            Control char, LeftToRight embedding, LRE : 12.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.SegmentInfo">
            <summary>
            Defines a class that save the line info.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SegmentInfo.Location">
            <summary>
            A <b>Point</b> object that indicates the location of the word.
            </summary>
            <remarks>
              The location is offset from the top left corner of the line information.
            </remarks>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SegmentInfo.Size">
            <summary>
            A <b>Size</b> object that indicates the size of the word.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SegmentInfo.GlyphCount">
            <summary>
              An <b>int</b> that defines the count of the glyph in a segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SegmentInfo.TotalJustify">
            <summary>
            Defines the sum of the justify width between each glyph.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.ITextInfoProvider">
            <summary>
            Defines an ITextInfoProvider interface used to create the text infos.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.ITextInfoProvider.CreatePageInfo">
            <summary>
              Creates a new instance of the PageInfo class.
            </summary>
            <returns>
              Returns a new instance of the PageInfo class.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.ITextInfoProvider.CreateParagraphInfo(System.Int32)">
            <summary>
              Creates a new instance of the ParagraphInfo class.
            </summary>
            <param name="paragraphIndex">
            An <b>int</b> that indicates the index of the paragraph.
            </param>
            <returns>
              Returns a new instance of the ParagraphInfo class.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.ITextInfoProvider.CreateLineInfo(System.Int32,System.Int32)">
            <summary>
              Creates a new instance of the LineInfo class.
            </summary>
            <param name="paragraphIndex">
            An <b>int</b> that indicates the index of the paragraph.
            </param>
            <param name="lineIndex">
            An <b>int</b> that indicates the index of the line.
            </param>
            <returns>
              Returns a new instance of the LineInfo class.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.ITextInfoProvider.CreateWordInfo">
            <summary>
              Creates a new instance of the WordInfo class.
            </summary>
            <returns>
              Returns a new instance of the WordInfo class.
            </returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageRuler">
            <summary>
               Indicate the simple ruler of the page. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageRuler.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageRuler"/> class.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageRuler.Width">
            <summary>
            Indicates the width of the page.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageRuler.TabSize">
            <summary>
            Indicates the tab marks.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate">
            <summary>
              Define a simple template for a text in page.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.ParagraphTemplate">
            <summary>
            Defines a class that is a paragraph template.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.ParagraphTemplate.LineLeftIndent">
            <summary>
              Defines an indent at the left of each line.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.ParagraphTemplate.LineRightIndent">
            <summary>
              Defines an indent at the right of each line.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.ParagraphTemplate.Margins">
            <summary>
            Defines the margins of the paragraph.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate._pageRuler">
            <summary>
            Saves the page ruler.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate._paragraphTemplates">
            <summary>
            Saves the paragraph templates.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate._defaultParagraphTemplate">
            <summary>
            A <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.ParagraphTemplate"/> indicates the template for all paragraphs.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.Margins">
            <summary>
            A <see cref="F:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.Margins"/> object that indicates the margins of the page.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.Ruler">
            <summary>
            Gets the page ruler.
            </summary>
            <remarks>
            A <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageRuler"/> that indicates the page ruler.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.DefaultParagraphTemplate">
            <summary>
            Gets the default paragraph template.
            </summary>
            <value>
            A <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.ParagraphTemplate"/> that indicates the template for all paragraphs.
            </value>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.#ctor(FarPoint.Win.Text.TextRender.SimpleTools.SimplePageRuler)">
            <summary>
            Creates a new page template.
            </summary>
            <param name="pageRuler">
            A <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageRuler"/> that indicates the page ruler.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.SetSpecialParagraphTemplate(System.Int32,FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.ParagraphTemplate)">
            <summary>
              Sets the special paragraph template by paragraph index.
            </summary>
            <param name="index">
              An <b>int</b> that indicates the paragraph index.
            </param>
            <param name="template">
            A <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.ParagraphTemplate"/> that indicates the template.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.QueryParagraphTemplate(System.Int32)">
            <summary>
              Queries the paragraph template by index.
            </summary>
            <param name="index">
              An <b>int</b> that indicates the paragraph index.
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.ParagraphTemplate"/> that indicates the paragraph template.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.CreatePageInfo">
            <summary>
              Creates a new instance of the PageInfo class.
            </summary>
            <returns>
              Returns a new instance of the PageInfo class.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.CreateParagraphInfo(System.Int32)">
            <summary>
              Creates a new instance of the ParagraphInfo class.
            </summary>
            <param name="paragraphIndex">
            An <b>int</b> object that indicates the index of the paragraph.
            </param>
            <returns>
              Returns a new instance of the ParagraphInfo class.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.CreateLineInfo(System.Int32,System.Int32)">
            <summary>
              Creates a new instance of the LineInfo class.
            </summary>
            <param name="paragraphIndex">
            An <b>int</b> that indicates the index of the paragraph.
            </param>
            <param name="lineIndex">
            An <b>int</b> that indicates the index of the line.
            </param>
            <returns>
              Returns a new instance of the LineInfo class.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate.CreateWordInfo">
            <summary>
              Creates a new instance of the WordInfo class.
            </summary>
            <returns>
              Returns a new instance of the WordInfo class.
            </returns>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor">
            <summary>
            Defines a class that is used to build the page info.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder">
            <summary>
            Defines a class used to help build page information.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder._provider">
            <summary>
            Saves a provider that provides the instance of text info.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder._measurer">
            <summary>
            Saves a measurser that used to measurs a segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder._context">
            <summary>
            Saves the context.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.#ctor(FarPoint.Win.Text.TextRender.SimpleTools.ITextInfoProvider,System.Object,FarPoint.Win.Text.TextRender.IMeasurer)">
            <summary>
            Creates a new page information builder.
            </summary>
            <param name="provider">ITextInfoProvider that provides the page information</param>
            <param name="context">Context</param>
            <param name="measurer">Measurer</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.BreakLine(FarPoint.Win.Text.TextRender.SimpleTools.WrapInfo[])">
            <summary>
            Breaks the current line.
            </summary>
            <param name="wrapInfos"><see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.WrapInfo"/> array that contains the wrap information</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.NewParagraph">
            <summary>
            Creates a new paragraph.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.AddWord(FarPoint.Win.Text.TextRender.SimpleTools.WordInfo)">
            <summary>
            Adds a word.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.AddWhiteSpace(FarPoint.Win.Text.TextRender.SimpleTools.WordInfo)">
            <summary>
            Adds white space.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.Begin">
            <summary>
            Begins the building.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.End">
            <summary>
            Ends the building.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.PageInfo">
            <summary>
            A <see cref="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.PageInfo"/> that indicates the current page information.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.ParagraphInfo">
            <summary>
            A <see cref="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.ParagraphInfo"/> that indicates the current paragraph information.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.LineInfo">
            <summary>
            A <see cref="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.LineInfo"/> that indicates the current line information.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder.IsEmptyLine">
            <summary>
            A <b>bool</b> that indicates if this line is empty.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder._paragraphInfos">
            <summary>
            A array used to save the paragraph infos.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder._lineInfos">
            <summary>
            A array used to save the line infos.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder._wordInfos">
            <summary>
            A array used to save the word infos.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor._measurer">
            <summary>
            Saves a measurser that used to measurser a segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor._provider">
            <summary>
              Provides the templates.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor._breaker">
            <summary>
            Saves a breaker that used to breaker a segment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.MultiLine">
            <summary>
            Indicates whether to support multiline.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.DoWrap">
            <summary>
            A <b>bool</b> value that indicates whether to wrap.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.WrapGreedily">
            <summary>
            A <b>bool</b> value that indicates whether to fill the line with more text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.#ctor(FarPoint.Win.Text.TextRender.SimpleTools.ITextInfoProvider,FarPoint.Win.Text.TextRender.IMeasurer,FarPoint.Win.Text.TextRender.SimpleTools.Breaker)">
            <summary>
            Creates a new TextCompositor class.
            </summary>
            <param name="measurer">
            An IMeasure used to measure the segment.
            </param>
            <param name="provider">
            An ITextInfoProvider that provides the page information.
            </param>
            <param name="breaker"></param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.BuildInternal(System.Object,FarPoint.Win.Text.TextRender.SimpleTools.TextReader)">
            <summary>
            Builds the text information from the reader and context.
            </summary>
            <param name="context">Context</param>
            <param name="reader"><b>TextReader</b></param>
            <returns>Build result: a <b>PageInfo</b> object</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.NeedWrap(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns whether to break the text to multiple lines.
            </summary>
            <param name="isEmptyLine">Whether the line is empty</param>
            <param name="lineWidth">Width of the line</param>
            <param name="wordOffset">Word offset</param>
            <param name="wordWidth">Word width</param>
            <returns>true if need to wrap to multiple lines</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.ParseWord(System.Object,FarPoint.Win.Text.TextRender.IExtendedTreeEnumerator,System.Drawing.Size@)">
            <summary>
            Parses the normal word.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.ParseTabWord(System.Object,FarPoint.Win.Text.TextRender.IExtendedTreeEnumerator,System.Drawing.Size@,System.Int32)">
            <summary>
            Parses the tab word.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.BreakWord(System.Object,FarPoint.Win.Text.TextRender.IExtendedTreeEnumerator,FarPoint.Win.Text.TextRender.SimpleTools.WordInfo@,System.Int32@,System.Int32@,FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder,System.Boolean)">
            <summary>
            Breaks the normal word.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.BreakFullWidthWord(System.Object,FarPoint.Win.Text.TextRender.IExtendedTreeEnumerator,FarPoint.Win.Text.TextRender.SimpleTools.WordInfo@,System.Int32@,FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder,System.Boolean)">
            <summary>
            Breaks the full width normal word.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.BreakHalfWidthWord(System.Object,FarPoint.Win.Text.TextRender.IExtendedTreeEnumerator,FarPoint.Win.Text.TextRender.SimpleTools.WordInfo@,System.Int32@,System.Int32@,FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.PageInfoBuilder,System.Boolean)">
            <summary>
            Breaks the half width normal word.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextCompositor.BreakSegment(System.Object,FarPoint.Win.Text.TextRender.TextSegment,System.Int32,System.Boolean,System.Int32,System.Int32@,System.Drawing.Size@)">
            <summary>
            Breaks the segments of a word.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode">
            <summary>
            Specifies how the text is adjusted to fit.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode.None">
            <summary>
            Does not adjust the text
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode.Justify">
            <summary>
            When text does not fill all the bounds, the text is adjusted to fill the entire length
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode.Distribute">
            <summary>
            Same as Justify, with some small difference to the distribution of words
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode.DistributeWithSpace">
            <summary>
            Same as Distribute, with the additional insertion of a space at both start and end
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor">
            <summary>
            Defines a class that is used to align the text layout.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.WordAdjustment">
            <summary>
            A <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode"/> that indicates the word adjustment mode.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.LineAdjustment">
            <summary>
            A <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode"/> that indicates the line adjustment mode.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.IsRightToLeft">
            <summary>
            Represents the right to left layout.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.HotKeyEffect">
            <summary>
            Accounts for hotkeyEffect
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.IsTopToDown">
            <summary>
            Represents the top to down.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.LineAlginment">
            <summary>
            An <see cref="T:FarPoint.Win.Text.AlignHorizontal"/> object that indicates the line alignment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.WordAlginment">
            <summary>
            An <see cref="T:FarPoint.Win.Text.AlignVertical"/> object that indicates the word alignment.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.SegmentAlginment">
            <summary>
            An <see cref="T:FarPoint.Win.Text.AlignVertical"/> that indicates the segment alignment.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.#ctor(FarPoint.Win.Text.AlignVertical,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode,FarPoint.Win.Text.AlignHorizontal,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode)">
            <summary>
            Creates a new TextAlignmentor class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.Layout(FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,FarPoint.Win.Text.TextRender.SimpleTools.TextReader,FarPoint.Win.Text.GlobalizedString,FarPoint.Win.Text.Graphics32,System.Drawing.Text.HotkeyPrefix)">
            <summary>
            Lays out the location of the text in the page information.
            </summary>
            <param name="pageInfo">Formatted text page information</param>
            <param name="reader">Text reader</param>
            <param name="gString">Entire globalized text string</param>
            <param name="g">Graphics device</param>
            <param name="hotkey">Hotkey prefix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.LayoutHorizontal(FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,FarPoint.Win.Text.TextRender.SimpleTools.TextReader,FarPoint.Win.Text.GlobalizedString,FarPoint.Win.Text.Graphics32,System.Drawing.Text.HotkeyPrefix)">
            <summary>
            Lays out the text in the horizontal direction.
            </summary>
            <param name="pageInfo">Formatted text page information</param>
            <param name="reader">Text reader</param>
            <param name="gString">Entire globalized text string</param>
            <param name="g">Graphics device</param>
            <param name="hotkey">Hotkey prefix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.LayoutVertical(FarPoint.Win.Text.TextRender.SimpleTools.PageInfo)">
            <summary>
            Lays out the text in the vertical direction.
            </summary>
            <param name="pageInfo">
            A <b>PageInfo</b> indicates the formatted text.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.TextAlignmentor.CalculateLineContentWidth(FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,System.Int32,System.Int32)">
            <summary>
            Calculates the width of the content of the line.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender">
            <summary>
            Represents a rendering of the text in the page format.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.ShearFilter">
            <summary>
            Defines a class that implements the ISimpleTextRenderFilter interface, 
            can be used to shear the lines.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.ShearFilter._sinA">
            <summary>
            Saves the sin value of the shear angle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.ShearFilter._cosA">
            <summary>
            Saves the cos value of the shear angle.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.ShearFilter.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.ShearFilter"/> class.
            </summary>
            <param name="angle">
            A <b>double</b> that indicates the radian value of the shear angle.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.ShearFilter.FilterParagraph(System.Drawing.Rectangle@,FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,System.Int32)">
            <summary>
             Filters the bounds of the paragraph.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.ShearFilter.FilterLine(System.Drawing.Rectangle@,FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
              Filters the bounds of the line.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender._painter">
            <summary>
            Represents the default painter.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.Filter">
            <summary>
            Filters the parts of a drawing page.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.#ctor(FarPoint.Win.Text.TextRender.IPainter)">
            <summary>
            Creates a new simple text renderer.
            </summary>
            <param name="painter">
              An <b>IPainter</b> that indicates the default painter.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.Draw(System.Object,System.Drawing.Point,FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,FarPoint.Win.Text.TextRender.SimpleTools.TextReader)">
            <summary>
            Draws the formatted text in the context at the specified point.
            </summary>
            <param name="context">Context</param>
            <param name="point">Specified point</param>
            <param name="pageInfo">Page information</param>
            <param name="reader">Reader of the text segment</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.DrawWord(System.Object,System.Drawing.Rectangle,FarPoint.Win.Text.TextRender.SimpleTools.TextReader,FarPoint.Win.Text.TextRender.SimpleTools.WordInfo,System.Boolean)">
            <summary>
              Draw the current word of the reader.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.DrawSegement(System.Object,System.Drawing.Rectangle,System.Object,System.Int32,System.Int32)">
            <summary>
            Draws the segement.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.DrawBreakedWord(System.Object,System.Drawing.Rectangle,FarPoint.Win.Text.TextRender.SimpleTools.TextReader,FarPoint.Win.Text.TextRender.SimpleTools.WordInfo,FarPoint.Win.Text.TextRender.SimpleTools.WrapInfo,FarPoint.Win.Text.TextRender.SimpleTools.WrapInfo)">
            <summary>
            Draws the current word of the reader.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.FilterParagraph(System.Drawing.Rectangle@,FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,System.Int32)">
            <summary>
              Adjusts the bounds of the paragraph.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender.FilterLine(System.Drawing.Rectangle@,FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
              Adjusts the bounds of the line.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRotationRender">
            <summary>
            A class used to render the rotation text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRotationRender._render">
            <summary>
            Saves the text reander.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRotationRender.#ctor(FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRender)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRotationRender"/> class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRotationRender.Draw(System.Object,System.Drawing.Rectangle,FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,FarPoint.Win.Text.TextRender.SimpleTools.TextReader,FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate,FarPoint.Win.Text.AlignHorizontal,FarPoint.Win.Text.AlignVertical,FarPoint.Win.Text.AlignHorizontal,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode,System.Double)">
            <summary>
            Draws the specified formatted text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRotationRender.Measure(System.Object,System.Drawing.Rectangle,FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,FarPoint.Win.Text.TextRender.SimpleTools.TextReader,FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate,FarPoint.Win.Text.AlignHorizontal,FarPoint.Win.Text.AlignVertical,FarPoint.Win.Text.AlignHorizontal,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode,System.Double)">
            <summary>
            Measures the size of the specified formatted text.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRotationRender.CalculateWidth(System.Drawing.Size,System.Double)">
            <summary>
            Calculates the base width along the specified angle.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRotationRender.CalculateHeight(System.Drawing.Size,System.Double)">
            <summary>
            Calculates the height along the specified angle.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRotationRender.CalculateShearedTextSize(FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,System.Double,System.Int32@,System.Int32@)">
            <summary>
              Calculates the sheared size of the page information.
            </summary>
            <returns>
              Returns the page size.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextRender.SimpleTools.SimpleTextRotationRender.CalculateShearedTextSize(FarPoint.Win.Text.TextRender.SimpleTools.PageInfo,System.Double,System.Int32@,System.Int32@,System.Drawing.Size@)">
            <summary>
              Calculates the sheared size of the page information.
            </summary>
            <returns>
              Returns the page size.
            </returns>
        </member>
        <member name="T:FarPoint.Win.Text.CharEx">
            <summary>
              Represents a Unicode character and extention to the standard
              .NET Char type. The purpose for this is to provide better 
              CJK (Chinese, Japanese, Korean ) character support.
            </summary>
            <remarks>
              The CharEx type represents Unicode character (multibyte) with 
              values ranging from '\u0000' through '\uffff'.
            </remarks>
        </member>
        <member name="F:FarPoint.Win.Text.CharEx._charstarts">
            <summary>
              Character groups (character codes) based on Unicode 3.1.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.CharEx.Blocks">
            <summary>
              Character blocks categorized base on the Unicode standard.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharEx._fullhalfblocks">
            <summary>
            Specifies the multiple-width character blocks.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharEx._mwtable">
            <summary>
            Specifies the type of multiple-width characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharEx._halfkana">
            <summary>
            Specifies the mapping table of full width Katakana.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharEx._fullkana">
            <summary>
            Specifies the mapping table of half-width Katakana.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharEx._accentkana">
            <summary>
            Specifies the mapping table for accents for the Japanese language.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharEx.MinValue">
            <summary>
            Represents the smallest possible value of a Char. 
            This field is constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharEx.MaxValue">
            <summary>
            Represents the largest possible value of a Char. 
            This field is constant.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharEx.m_value">
            <summary>
            Stores the instance Unicode character.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.#ctor(System.Char)">
            <summary>
            Creates a new CharEx for a specified Char.
            </summary>
            <param name="c">Character structure</param>
            <remarks>This constructor creates a <b>CharEx</b> and uses the specified character (Char struct) as its base.</remarks>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of 
            their relative values.
            </summary>
            <param name="value">Object to compare, or a null reference</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.op_Implicit(System.Char)~FarPoint.Win.Text.CharEx">
            <summary>
            Converts a Char structure to a CharEx structure with the assignment operator.
            </summary>
            <param name="c">Character as char</param>
            <returns>CharEx class representing the same character as c</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.GetCharType(System.Char)">
            <summary>
            Retrieves the type of character.
            </summary>
            <param name="c">Unicode character</param>
            <returns>CharType representing the type of character of c</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsCharOfType(System.Char,FarPoint.Win.Text.CharType)">
            <summary>
            Determines whether the specified character is of the specified type.
            </summary>
            <param name="c">Unicode character</param>
            <param name="type">CharType type</param>
            <returns>true if the character and type matches the type of the character; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsMultiWidth(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a multiple-width character.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a multiple-width character; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsMultiWidth(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in a specified string is a multiple-width character. 
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a multiple-width 
              character; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsFullWidth(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a full-width character. 
            Usually CJK characters are considered as full-width characters.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a full-width character; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsFullWidth(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a full-width character. 
            Usually CJK characters are considered as full-width characters.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a full width 
              character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsCJK(System.Char)">
            <summary>
            Determines whether the specified character is Chinese-Japanese (CJK).
            </summary>
            <param name="c">Character</param>
            <returns><c>true</c> if character is CJK; <c>false</c> otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsCJK(System.String,System.Int32)">
            <summary>
            Determines whether the character at specified index of a string is Chinese-Japanese (CJK).
            </summary>
            <param name="s">Text string</param>
            <param name="index">Character index</param>
            <returns><c>true</c> if character is CJK; <c>false</c> otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsOther(System.Char)">
            <summary>
            Determines whether a Unicode character does not belong to any specific letter.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is not a Katakana character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsControl(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a control code.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a control code; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsControl(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a control code.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a control 
              code; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsKatakana(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a Katakana letter.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a Katakana character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsKatakana(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a Katakana character.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a Katakana 
              character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsHiragana(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a Hiragana letter.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a Hiragana character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsHiragana(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a Hiragana character.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a Hiragana 
              character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsDigit(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a numeric digit.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a Numeric character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsDigit(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a numeric digit.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a Numeric 
              digit; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsPunctuation(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a punctuation character.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a Punctuation character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsPunctuation(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a punctuation character.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a Punctuation 
              character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsMathSymbol(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a mathematical symbol.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a mathematical character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsMathSymbol(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a mathematical symbol.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a mathematical 
              character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsSymbol(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a symbol character.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a Symbol character; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsSymbol(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a symbol character.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a Symbol 
              character; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsLower(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a lower case letter.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a Lowercase letter; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsLower(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a lower case letter.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a Lowercase 
              letter; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsUpper(System.Char)">
            <summary>
            Determines whether the specified Unicode character is an upper case letter.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a Uppercase letter; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsUpper(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a upper case letter.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a Uppercase 
              letter; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsDigitOrSymbol(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a numeric or a math symbol.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a numeric or symbol character; otherwise, false</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsDigitOrSymbol(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a numeric or a math symbol.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is a Numeric 
              or a Math symbol; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsAlphabet(System.Char)">
            <summary>
            Determines whether the specified Unicode character is an alphabet letter.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is an alphabet letter; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsAlphabet(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is an alphabet letter.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>
              true if the character at position index in s is an alphabet 
              letter; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsAlphaOrDigit(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a letter or a digit.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is an alphabet letter or digit; <c>false</c> otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsArabic(System.Char)">
            <summary>
            Determines whether the specified character is Arabic.
            </summary>
            <param name="c">Character</param>
            <returns><c>true</c> if the character is Arabic; <c>false</c> otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsArabicOrHebrew(System.Char)">
            <summary>
            Determines whether the specified character is Arabic or Hebrew.
            </summary>
            <param name="c">Character</param>
            <returns><c>true</c> if the character is Arabic or Hebrew; <c>false</c> otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsArabicOrHebrew(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position in the 
            specified string is Arabic or Hebrew.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Character index</param>
            <returns><c>true</c> if character is Arabic or Hebrew; <c>false</c> otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsAlphaOrDigit(System.String,System.Int32)">
            <summary>
            Determines whether the character at the specified position 
            in the specified string is a letter or a digit.
            </summary>
            <param name="s">Text string</param>
            <param name="index">Position of the character in the string</param>
            <returns>true if the character is a letter or digit; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsUpperKana(System.Char)">
            <summary>
            Determines whether the specified Unicode character is an upper case (capital) kana.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a kana upper case (capital); false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsLowerKana(System.Char)">
            <summary>
            Determines whether the specified Unicode character is a lower case (normal) kana.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character is a kana lower case (normal); false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.HasLowerKana(System.Char)">
            <summary>
            Determines whether the related kana has a related lower case.
            </summary>
            <param name="c">Unicode character</param>
            <returns>true if the character has a related lower case kana; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToFullWidth(System.Char)">
            <summary>
            Transforms the specified character to a full width character
            if possible. Ranges are Latin basic, Katakana and Hangul characters.
            </summary>
            <param name="c">Unicode character</param>
            <returns>Full-width character of c, otherwise original character</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToFullWidth(System.Boolean@,System.Char[])">
            <summary>
            Transforms the specified character to a full width character
            if possible. This method differs from the other where it 
            takes on an array of characters. In FarEast country there 
            are times when multiple half width characters make one
            full width character.
            </summary>
            <param name="c">An array of characters.</param>
            <param name="processedAll">
              When the soundex character is processed, <b>true</b> is 
              returned; otherwise, <b>false</b> is returned.
            </param>
            <returns>
              Full width character of c; otherwise, the original character
              is returned.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToHalfWidth(System.Char)">
            <summary>
            Converts the value of a Unicode character to its half-width equivalent. 
            Ranges are Latin basic, Katakana and Hangul characters.
            </summary>
            <param name="c">Unicode character</param>
            <returns>
              <para>The half width equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a half
                 width or not a multiple-width character.
              </para>
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToHalfWidthEx(System.Char)">
            <summary>
            Transforms the specified character to a half-width character
            if possible. This method differs from the ToHalfWidth method
            where it tries to return the accurate half-width character - 
            which most likely happens in Far East countries.
            </summary>
            <param name="c">Unicode character</param>
            <returns>
            A character array representing c in half width form. In most
              cases this array will have only one element.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToKatakana(System.Char)">
            <summary>
            Converts the value of a Unicode character to its "Katakana" equivalent.  
            Special character handling for the Japanese language.
            </summary>
            <param name="c">Unicode character</param>
            <returns>
              <para>The Katakana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Katakana or not Hiragana.
              </para>
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToKatakana(System.Char,System.Boolean)">
            <summary>
            Converts the value of a Unicode character to its "Katakana" equivalent 
            with an optional setting of full- or half-width. 
            Special character handling for the Japanese language 
            </summary>
            <param name="c">Unicode character</param>
            <param name="fullWidth">
              <b>true</b> to return a full width Katakana, and 
              <b>false</b> to return a half width Katakana.
            </param>
            <returns></returns>
            <returns>
              <para>The Katakana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Katakana or not Hiragana.
              </para>
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToHiragana(System.Char)">
            <summary>
            Converts the value of a Unicode character to its "Hiragana" equivalent. 
            Special character handling for the Japanese language.
            </summary>
            <param name="c">Unicode character</param>
            <returns>
              <para>The Hiragana equivalent of c.</para>
              <para>- or -</para>
              <para>
                 The unchanged value of c, if c is already a 
                 Hiragana or not Katakana.
              </para>
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToAnsi(System.Char)">
            <summary>
            Converts the value of a Unicode character to its ANSI equivalent.
            </summary>
            <param name="c">Unicode character</param>
            <returns>
              An Ansi character equivalent of c in the current culture.
            </returns>
            <remarks>
              Encodes the specified Unicode character to an ANSI
              character using the current culture.
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToAnsi(System.Char,System.Globalization.CultureInfo)">
            <summary>
            Converts the value of a Unicode character to its ANSI equivalent 
            using the specified culture information.
            </summary>
            <param name="c">Unicode character</param>
            <param name="culture">
            A CultureInfo object. If a null reference is passed, the 
              current culture is assumed. 
            </param>
            <returns>
              An Ansi character equivalent of c using the specified culture.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToSJIS(System.Char)">
            <summary>
            Converts the value of a JIS (Japanese encoding) character 
            to its Shift-JIS equivalent.
            </summary>
            <param name="c">A JIS character.</param>
            <returns>
              <para>The Shift-JIS equivalent of c.</para>
              <para>- or -</para>
              <para>
                The unchanged value of c, if c is not a full width
            	character.
              </para>
            </returns>
            <remarks> 
              <newpara>
                Converts a JIS character to its equivalent Shift-JIS
                character - used in the Japanese language.
              </newpara>
              <newpara>
                Please note that this method does not take a Unicode
                character as its parameter - use the character value
                returned by the "ToJIS" method.
              </newpara>
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToJIS(System.Char)">
            <summary>
            Converts the value of a Shift-JIS (Japanese encoding) 
            character to its JIS equivalent.
            </summary>
            <param name="c">A Shift-JIS character.</param>
            <returns>
              <para>The JIS equivalent of c.</para>
              <para>- or -</para>
              <para>
                The unchanged value of c, if c is not a full width
            	character.
              </para>
            </returns>
            <remarks> 
              <newpara>
                Converts a Shift-JIS character to its equivalent JIS
                character - used in the Japanese language.
              </newpara>
              <newpara>
                Please note that this method does not take a Unicode
                character as its parameter - use the character value
                returned by the "ToSJIS" method.
              </newpara>
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.FromAnsi(System.Char)">
            <summary>
            Converts the value of an ANSI character to its Unicode equivalent.
            </summary>
            <param name="c">An ANSI character.</param>
            <returns>
            A Unicode character equivalent of c.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.FromAnsi(System.Char,System.Globalization.CultureInfo)">
            <summary>
            Converts the value of an ANSI character to its Unicode
            equivalent using the specified culture information.
            </summary>
            <param name="c">An ANSI character.</param>
            <param name="culture">
            A CultureInfo object. If a null reference is passed, the 
              current culture is assumed. 
            </param>
            <returns>
              A Unicode character equivalent of c using the specified culture.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToUpperKana(System.Char)">
            <summary>
            Converts a lower (normal) case kana into upper (capital) case.
            </summary>
            <param name="c">Unicode character</param>
            <returns>The equivalent kana upper case character.</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.ToLowerKana(System.Char)">
            <summary>
            Converts an upper (capital) case kana into a lower case (normal).
            </summary>
            <param name="c">Unicode character</param>
            <returns>The equivalent kana lower case character.</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in 
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal.
            </summary>
            <param name="value">The Object to compare with the current aqDateTime.</param>
            <returns>
            true if value is an instance of aqDateTime and equals the value of 
            this instance; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.BelongTo(System.Char)">
            <summary>
            Retreives the Unicode character block the specified character
            belongs to. Current version supports a range from '\u000' 
            through '\uffff'.
            </summary>
            <param name="c">Unicode character</param>
            <returns>
            A Unicode block the specified character belongs to.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.MultiWidthDetails(System.Char)">
            <summary>
            Returns further detail information of the character, since it lies 
            in a range where it holds a fixture of different character widths.
            </summary>
            <param name="c">Unicode character</param>
            <returns>CharType describing the type of the character, and also whether the width is full or half</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.IsFarEastBlock(FarPoint.Win.Text.CharEx.Blocks,System.Char)">
            <summary>
            Determines whether the specified block has to do with CJK.
            (only CJK have concepts of wide)
            </summary>
            <param name="block">Unicode char block</param>
            <param name="c"><see cref="T:System.Char"/> to process</param>
            <returns>true if the block is related to CJK; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.innerToChar(System.Byte[])">
            <summary>
            Converts a byte array into a char type. (Internal usage)
            </summary>
            <param name="value">Byte array.</param>
            <returns>character equivalent of value</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.innerToByte(System.Char)">
            <summary>
            Converts a single character into a byte array. (Internal usage)
            </summary>
            <param name="c">A character.</param>
            <returns>byte array equivalent of c</returns>
        </member>
        <member name="M:FarPoint.Win.Text.CharEx.GetFullHalfWidthSpecialChar(System.Char,System.Boolean)">
            <summary>
            Converts between half- and full-width characters for Japanese special characters.
            </summary>
            <param name="c">Character</param>
            <param name="toFull">
              <b>true</b> to convert to full width; otherwise, <b>false</b>.
            </param>
            <returns>
              The converted character. <see cref="F:System.Char.MinValue"/> means conversion
              didn't take place.
            </returns>
        </member>
        <member name="T:FarPoint.Win.Text.CharType">
            <summary>
            Specifies the category of a Unicode character.  
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.OtherChar">
            <summary>
            Indicates that the character is not of a particular category.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.Control">
            <summary>
            Indicates that the character is a control code.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.Numeric">
            <summary>
            Indicates that the character is a numeric digit.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.MathSymbol">
            <summary>
            Indicates that the character is a mathematical symbol.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.Symbol">
            <summary>
            Indicates that the character is a symbol.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.Punctuation">
            <summary>
            Indicates that the character is a punctuation. ( Open &amp; Close )
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.Space">
            <summary>
            Indicates that the character is a space character.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.UpperCase">
            <summary>
            Indicates that the character is an upper case letter.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.LowerCase">
            <summary>
            Indicates that the character is a lower case letter.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.Katakana">
            <summary>
            Indicates that the character is a Japanese Katakana character.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.Hiragana">
            <summary>
            Indicates that the character is a Japanese Hiragana character.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.FarEastPunctation">
            <summary>
            Indicates that the character is a CJK punctuation.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.Hangul">
            <summary>
            Indicates that the character is a Hangal character.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.CharType.FullWidth">
            <summary>
            Indicates that the character is of full width.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.Margins">
            <summary>
            Specifies the margins for the bounding areas.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Margins._left">
            <summary>
              Placeholder for the Left property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Margins._top">
            <summary>
              Placeholder for the Top property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Margins._right">
            <summary>
              Placeholder for the Right property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Margins._bottom">
            <summary>
              Placeholder for the Bottom property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Margins.Empty">
            <summary>
              Represents a <see cref="T:FarPoint.Win.Text.Margins"/> structure with its properties 
              left uninitialized.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Margins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.Margins"/> class 
              with the specified left, right, top, and bottom margins.
            </summary>
            <param name="left">
              The left margin, in pixels.
            </param>
            <param name="right">
              The right margin, in pixels.
            </param>
            <param name="top">
              The top margin, in pixels.
            </param>
            <param name="bottom">
              The bottom margin, in pixels.
            </param>
        </member>
        <member name="P:FarPoint.Win.Text.Margins.Left">
            <summary>
            Gets or sets the left margin, in pixels.
            </summary>
            <value>Number of pixels for the margin</value>
        </member>
        <member name="P:FarPoint.Win.Text.Margins.Top">
            <summary>
            Gets or sets the top margin, in pixels.
            </summary>
            <value>Number of pixels for the margin</value>
        </member>
        <member name="P:FarPoint.Win.Text.Margins.Right">
            <summary>
            Gets or sets the right margin, in pixels.
            </summary>
            <value>Number of pixels for the margin</value>
        </member>
        <member name="P:FarPoint.Win.Text.Margins.Bottom">
            <summary>
            Gets or sets the bottom margin, in pixels.
            </summary>
            <value>Number of pixels for the margin</value>
        </member>
        <member name="P:FarPoint.Win.Text.Margins.IsEmpty">
            <summary>
            Tests whether all numeric properties of this <see cref="T:FarPoint.Win.Text.Margins"/> object
            have values of zero.
            </summary>
            <value>Returns true if the Width, Height, Left, and Top properties 
            of this Rectangle all have values of zero; false otherwise</value>
        </member>
        <member name="M:FarPoint.Win.Text.Margins.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in 
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current Object.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Margins.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal.
            </summary>
            <param name="obj">Object to compare with the current <see cref="T:FarPoint.Win.Text.Margins"/></param>
            <returns>
            <b>true</b> if <c>obj</c> is a <b>Margins</b> and its <b>Left</b>, <b>Top</b>, <b>Right</b>, and 
            <b>Height</b> properties are equal to the corresponding properties 
            of this <b>Margins</b> object; <b>false</b> otherwise
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Margins.op_Equality(FarPoint.Win.Text.Margins,FarPoint.Win.Text.Margins)">
            <summary>
            Tests whether two <see cref="T:FarPoint.Win.Text.Margins"/> structures have equal values.
            </summary>
            <param name="left"><see cref="T:FarPoint.Win.Text.Margins"/> that is to the left of the equality operator</param>
            <param name="right"><see cref="T:FarPoint.Win.Text.Margins"/> that is to the right of the equality operator</param>
            <returns>
              This operator returns <b>true</b> if the two <see cref="T:FarPoint.Win.Text.Margins"/> 
              structures have equal <b>Left</b>, <b>Right</b>, <b>Top</b> and 
              <b>Bottom</b> properties.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Margins.op_Inequality(FarPoint.Win.Text.Margins,FarPoint.Win.Text.Margins)">
            <summary>
            Tests whether two <see cref="T:FarPoint.Win.Text.Margins"/> structures differ in value.
            </summary>
            <param name="left"><see cref="T:FarPoint.Win.Text.Margins"/> that is to the left of the equality operator</param>
            <param name="right"><see cref="T:FarPoint.Win.Text.Margins"/> that is to the right of the equality operator</param>
            <returns>
              This operator returns <b>true</b> if any of the <b>Left</b>, 
              <b>Right</b>, <b>Top</b>, or <b>Bottom</b> properties of the 
              two <see cref="T:FarPoint.Win.Text.Margins"/> structures are unequal; otherwise 
              <b>false</b>.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Margins.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns>String object representing the margins</returns>
        </member>
        <member name="T:FarPoint.Win.Text.AlignHorizontal">
            <summary>
            Specifies how an object or text is horizontally aligned relative to a given area.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.AlignHorizontal.NotSet">
            <summary>
            Uses the default alignment of an object or text, 
            which differs from case to case - usually holds the value of <b>Left</b>
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.AlignHorizontal.Left">
            <summary>
            Aligns the object or text to the left of the specified area
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.AlignHorizontal.Right">
            <summary>
            Aligns the object or text to the right of the specified area
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.AlignHorizontal.Center">
            <summary>
            Centers the object or text in the specified area
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.AlignVertical">
            <summary>
            Specifies how an object or text is vertically aligned relative to a given area.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.AlignVertical.NotSet">
            <summary>
            Indicates the default alignment of an object or text, which differs
              from case to case - usually holds the value of <b>Center</b>.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.AlignVertical.Top">
            <summary>
            Indicates the object or text is aligned to the top of the specified area.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.AlignVertical.Bottom">
            <summary>
            Indicates the object or text is aligned to the bottom of the specified area.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.AlignVertical.Middle">
            <summary>
            Indicates the object or text is aligned to the middle(vertical) of the specified area.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.TransformOrder">
            <summary>
              Specifies the order for matrix transform operations.
            </summary>
            <remarks>
              Matrix transform operations are not necessarily commutative. 
              The order in which they are applied is important.
            </remarks>
        </member>
        <member name="F:FarPoint.Win.Text.TransformOrder.Append">
            <summary>
              The new operation is applied after the old operation. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TransformOrder.Prepend">
            <summary>
              The new operation is applied before the old operation.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.GraphicsMode">
            <summary>
              Define a enumeration indicates the graphics mode.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.GraphicsMode.Compatible">
            <summary>
              The current graphics mode is the compatible graphics mode, a mode 
              that is compatible with 16-bit Windows. In this graphics mode, an 
              application cannot set or modify the world transformation for the 
              specified device context. The compatible graphics mode is the 
              default graphics mode.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.GraphicsMode.Advance">
            <summary>
               Windows NT/2000/XP: The current graphics mode is the advanced 
               graphics mode, a mode that allows world transformations. In this 
               graphics mode, an application can set or modify the world 
               transformation for the specified device context. 
            </summary>
            <remarks>
              Windows 95/98/Me: This mode is not supported. 
            </remarks>
        </member>
        <member name="T:FarPoint.Win.Text.Vector">
            <summary>
              Define a Vector class that represents the mathematic vector. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Vector._data">
            <summary>
            Saves the data of this vector.
            </summary>
            <remarks>
              In order to improve speed of inherited classes, I give the proteced modification
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.#ctor">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.Vector"/> class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.Vector"/> class.
            </summary>
            <param name="dimension">
            An <b>int</b> that indicates the dimension of the vector.
            </param>
            <remarks>
              The dimension of the vector must be bigger than or equal to zero.
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.#ctor(System.Double[])">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.Vector"/> class.
            </summary>
            <param name="items">
            A <b>double</b> array that indicates the items.
            </param>
        </member>
        <member name="P:FarPoint.Win.Text.Vector.Dimension">
            <summary>
            Gets or sets the dimension of the vector.
            </summary>
            <value>Dimension of the vector</value>
            <remarks>As soon as a Vector instance is created, its dimension is fixed.</remarks>
        </member>
        <member name="P:FarPoint.Win.Text.Vector.Item(System.Int32)">
            <summary>
            Gets or sets the value of the element at the specified index. 
            </summary>
            <value><b>Double</b>, the element value</value>
            <remarks>Note: The index is base on zero.</remarks>
        </member>
        <member name="P:FarPoint.Win.Text.Vector.Elements">
            <summary>
            Gets all elements in the vector. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.Vector.IsZero">
            <summary>
            Gets whether this vector is the zero vector.
            </summary>
            <value>Returns <b>true</b> if this vector is the zero vector; <b>false</b> otherwise</value>
        </member>
        <member name="P:FarPoint.Win.Text.Vector.IsIdentity">
            <summary>
            Gets a value that indicates whether this vector is the indentity vector.
            </summary>
            <value>Returns <b>true</b> if this vector is the identity vector; <b>false</b> otherwise</value>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.CheckOperationParameters(System.String,FarPoint.Win.Text.Vector[])">
            <summary>
            Checks the operation parameters and if the parameters are invalid, throws an exception.
            </summary>
            <param name="operationDescription">
            A <b>string</b> indicates the operation description.
            </param>
            <param name="parameters">
            A <see cref="T:FarPoint.Win.Text.Vector"/> array indicates the operation parameters.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.op_Addition(FarPoint.Win.Text.Vector,FarPoint.Win.Text.Vector)">
            <summary>
            Defines the + operator for the vector operation.
            </summary>
            <param name="left">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the left operand. 
            </param>
            <param name="right">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the right operand.
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.Vector"/> that is the add result of the left and right operands.
            </returns>
            <remarks>
              (n1, n2, n3) + (m1, m2, m3) = (n1 + m1, n2 + m2, n3 + m3)
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.op_Subtraction(FarPoint.Win.Text.Vector,FarPoint.Win.Text.Vector)">
            <summary>
            Defines the binary - operator for the vector operation.
            </summary>
            <param name="left">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the left operand. 
            </param>
            <param name="right">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the right operand.
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.Vector"/> that is the binary minus result of the left and right operands.
            </returns>
            <remarks>
              (n1, n2, n3) - (m1, m2, m3) = (n1 - m1, n2 - m2, n3 - m3)
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.op_UnaryNegation(FarPoint.Win.Text.Vector)">
            <summary>
            Defines the unary - operator for the vector operation.
            </summary>
            <param name="value">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the operand. 
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.Vector"/> that is the unary minus result of the operands.
            </returns>
            <remarks>
              -(n1, n2, n3) = (-n1, -n2, -n3)
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.op_Multiply(FarPoint.Win.Text.Vector,FarPoint.Win.Text.Vector)">
            <summary>
            Defines the * operator for the vector operation.
            </summary>
            <param name="left">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the left operand. 
            </param>
            <param name="right">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the right operand.
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.Vector"/> that is the multiplying result of the left and right operands.
            </returns>
            <remarks>
              (n1, n2, n3) * (m1, m2, m3) = (n1 * m1, n2 * m2, n3 * m3)
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.op_Equality(FarPoint.Win.Text.Vector,FarPoint.Win.Text.Vector)">
            <summary>
            Defines the == operator for the vector operation.
            </summary>
            <param name="left">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the left operand. 
            </param>
            <param name="right">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the right operand.
            </param>
            <returns>
            A <b>bool</b> that indicates whether left equals right.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.op_Inequality(FarPoint.Win.Text.Vector,FarPoint.Win.Text.Vector)">
            <summary>
            Defines the == operator for the vector operation.
            </summary>
            <param name="left">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the left operand. 
            </param>
            <param name="right">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the right operand.
            </param>
            <returns>
            A <b>bool</b> that indicates whether left does not equal right.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.CrossMultiply(FarPoint.Win.Text.Vector,FarPoint.Win.Text.Vector)">
            <summary>
            Defines the descarts multiplication operation for vector.
            </summary>
            <param name="left">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the left operand. 
            </param>
            <param name="right">
            A <see cref="T:FarPoint.Win.Text.Vector"/> that indicates the right operand.
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.Vector"/> that is the descarts multiplying result of the left and right operands.
            </returns>
            <remarks>
                                            | i,  j,  k |
              (n1, n2, n3) X (m1, m2, m3) = | n1, n2, n3| = (?, ?, ?)
                                            | m1, m2, m3|
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.CalculateModul(FarPoint.Win.Text.Vector)">
            <summary>
            Gets the mod of the specified vector.
            </summary>
            <param name="value">Vector specified</param>
            <returns><b>Double</b>, the mod of the specified vector</returns>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.Add(FarPoint.Win.Text.Vector)">
            <summary>
            Adds a specified vector to this vector.
            </summary>
            <param name="value">Specified vector</param>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.DotMultiply(FarPoint.Win.Text.Vector)">
            <summary>
            Dot multiplies a specified vector to this vector.
            </summary>
            <param name="value">Specified vector</param>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.CrossMultiply(FarPoint.Win.Text.Vector)">
            <summary>
            Cross multiplies a specified vector to this vector.
            </summary>
            <param name="value">Specified vector</param>
        </member>
        <member name="P:FarPoint.Win.Text.Vector.Modul">
            <summary>
            Gets the mod of this vector.
            </summary>
            <value><b>Double</b>, the mod of the specified vector.
            </value>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.Clone">
            <summary>
            Creates a new object that is a copy of this <see cref="T:FarPoint.Win.Text.Vector"/>.
            </summary>
            <returns>Copy of this <see cref="T:FarPoint.Win.Text.Vector"/></returns>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">System.Object to compare with the current System.Object</param>
            <returns>true if the specified System.Object is equal to the current System.Object; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. System.Object.GetHashCode
            is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>Hash code for the current System.Object</returns>
        </member>
        <member name="M:FarPoint.Win.Text.Vector.ToString">
            <summary>
            Returns a string that represents the current vector.
            </summary>
            <returns>String that represents the current vector</returns>
        </member>
        <member name="T:FarPoint.Win.Text.Matrix">
            <summary>
            Represents the matrix in mathematics. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Matrix._data">
            <summary>
            Defines a two-dimensional <b>double</b> array to save the data.
            </summary>
            <remarks>
            In order to improve speed of inherited classes, I give the proteced modification
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.#ctor">
            <summary>
            Creates a new matrix.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new matrix.
            </summary>
            <param name="width">
            An <b>int</b> that indicates the row number.
            </param>
            <param name="height">
            An <b>int</b> that indicates the column number.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Creates a new matrix.
            </summary>
            <summary>
            A two dimension <b>double</b> array used to save the elements.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.#ctor(System.Boolean,FarPoint.Win.Text.Vector[])">
            <summary>
            Creates a new matrix.
            </summary>
            <param name="vertical">
            A <b>bool</b> that indicates whether the direction of vectors is vertical.
            </param>
            <param name="vectors">
            A <see cref="T:FarPoint.Win.Text.Vector"/> array that indicates the vectors.
            </param>
        </member>
        <member name="P:FarPoint.Win.Text.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value of element at the specified location. 
            </summary>
            <value>
            A <b>double</b> that indicates the element value.
            </value>
            <remarks>
              Note: The row and column are zero based.
            </remarks>
        </member>
        <member name="P:FarPoint.Win.Text.Matrix.Elements">
            <summary>
            Gets the elements of the matrix.
            </summary>
            <value>
            A two dimension <b>double</b> array to save the elements to.
            </value>
        </member>
        <member name="P:FarPoint.Win.Text.Matrix.Width">
            <summary>
            Gets the column number of the matrix.
            </summary>
            <value>
            An <b>int</b> value that indicates the width of the matrix.
            </value>
        </member>
        <member name="P:FarPoint.Win.Text.Matrix.Height">
            <summary>
            Gets the row number of the matrix.
            </summary>
            <value>
            An <b>int</b> value that indicates the height of the matrix.
            </value>
        </member>
        <member name="P:FarPoint.Win.Text.Matrix.IsIdentity">
            <summary>
            Gets a value that indicates whether this Matrix object is the identity matrix.
            </summary>
            <value>
              This property is true if this Matrix is identity; otherwise, false.
            </value>
            <remarks>
              | 1, 0, 0 |
              | 0, 1, 0 |
              | 0, 0, 1 |
            </remarks>
        </member>
        <member name="P:FarPoint.Win.Text.Matrix.Columns">
            <summary>
              Gets the vectors from the column direction.
            </summary>
            <value>
            A <see cref="T:FarPoint.Win.Text.Vector"/> array that indicates the columns of the matrix.
            </value>
        </member>
        <member name="P:FarPoint.Win.Text.Matrix.Rows">
            <summary>
              Gets the vectors from the row direction.
            </summary>
            <value>
            A <see cref="T:FarPoint.Win.Text.Vector"/> array that indicates the rows of the matrix.
            </value>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.CheckOperationParameters(System.Boolean,System.String,FarPoint.Win.Text.Matrix[])">
            <summary>
              Check the operation parameters, if the parameters is invalid, throw an exception.
            </summary>
            <param name="checkMode">
            A <b>bool</b> value indicates the check mode. <b>true</b> for the multiply operation.
            </param>
            <param name="operationDescription">
            A <b>string</b> indicates the operation description.
            </param>
            <param name="parameters">
            A <see cref="T:FarPoint.Win.Text.Vector"/> array indicates the operation parameters.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.op_Addition(FarPoint.Win.Text.Matrix,FarPoint.Win.Text.Matrix)">
            <summary>
            Defines the + operator for Matrix class.
            </summary>
            <param name="left">
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the left operand.
            </param>
            <param name="right">
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the right operand.
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the add operation result of two operands.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.op_Subtraction(FarPoint.Win.Text.Matrix,FarPoint.Win.Text.Matrix)">
            <summary>
            Defines the binary - operator for Matrix class.
            </summary>
            <param name="left">
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the left operand.
            </param>
            <param name="right">
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the right operand.
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the binary nimus operation result of two operands.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.op_UnaryNegation(FarPoint.Win.Text.Matrix)">
            <summary>
            Defines the binary - operator for Matrix class.
            </summary>
            <param name="value">
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the operand.
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the unary nimus operation result of operand.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.op_Multiply(FarPoint.Win.Text.Matrix,FarPoint.Win.Text.Matrix)">
            <summary>
            Defines the * operator for Matrix class.
            </summary>
            <param name="left">
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the left operand.
            </param>
            <param name="right">
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the right operand.
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the multiplication operation result of two operands.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.T(FarPoint.Win.Text.Matrix)">
            <summary>
            Defines the transpose operator for Matrix class.
            </summary>
            <param name="value">
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the operand.
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.Matrix"/> that indicates the transpose operation result of operand.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.op_Explicit(FarPoint.Win.Text.Matrix)~System.Double">
            <summary>
            Uses the explicit conversion to get a value of the matrix.
            </summary>
            <param name="value"><see cref="T:FarPoint.Win.Text.Matrix"/> to convert</param>
            <returns><b>Double</b>, the value of the specified matrix.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.op_Equality(FarPoint.Win.Text.Matrix,FarPoint.Win.Text.Matrix)">
            <summary>
            Defines the == operator for the vector operation.
            </summary>
            <param name="left">Left <see cref="T:FarPoint.Win.Text.Matrix"/> operand</param>
            <param name="right">Right <see cref="T:FarPoint.Win.Text.Matrix"/> operand</param>
            <returns>Whether left equals right</returns>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.op_Inequality(FarPoint.Win.Text.Matrix,FarPoint.Win.Text.Matrix)">
            <summary>
            Defines the != operator for the vector operation.
            </summary>
            <param name="left">Left <see cref="T:FarPoint.Win.Text.Matrix"/> operand</param>
            <param name="right">Right <see cref="T:FarPoint.Win.Text.Matrix"/> operand</param>
            <returns>Whether left does not equals right</returns>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.Add(FarPoint.Win.Text.Matrix)">
            <summary>
            Adds a specified matrix to this matrix.
            </summary>
            <param name="value">Specified matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.LeftMultiply(FarPoint.Win.Text.Matrix)">
            <summary>
            Left multiplies a specified matrix to this matrix.
            </summary>
            <param name="value">Specified matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.RightMultiply(FarPoint.Win.Text.Matrix)">
            <summary>
            Right multiplies a specified matrix to this matrix.
            </summary>
            <param name="value">Specified matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.T">
            <summary>
            Convertes this matrix to its transpose matrix.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.Matrix.Value">
            <summary>
            Gets the value of the current matrix.
            </summary>
            <value><b>Double</b>, the value of the this matrix</value>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.Clone">
            <summary>
            Creates a new object that is a copy of this <see cref="T:FarPoint.Win.Text.Matrix"/>.
            </summary>
            <returns><b>Object</b> is a copy of this <see cref="T:FarPoint.Win.Text.Matrix"/></returns>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">System.Object to compare with the current System.Object</param>
            <returns>true if the specified System.Object is equal to the current System.Object; false otherwise</returns>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. System.Object.GetHashCode
            is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>Hash code for the current System.Object</returns>
        </member>
        <member name="M:FarPoint.Win.Text.Matrix.ToString">
            <summary>
            Returns a string that represents the current matrix.
            </summary>
            <returns>String that represents the current matrix</returns>
        </member>
        <member name="T:FarPoint.Win.Text.TransformMatrix">
            <summary>
            Represents the transform information for transforming between 
            world-space and page-space in GDI.
            </summary>
            <value>
              TransformMatrix is a 3x3 matrix, but we only use M11, M12, M21, M22, Dx and Dy. 
              | M11,  M12,  0 |
              | M21,  M22,  0 |
              | Dx,   Dy,   1 |
            </value>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.#ctor">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TransformMatrix"/> class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TransformMatrix"/> class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TransformMatrix"/> class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:FarPoint.Win.Text.TransformMatrix"/> class.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TransformMatrix.M11">
            <summary>
            Gets or sets the value of M11.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TransformMatrix.M12">
            <summary>
            Gets or sets the value of M12.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TransformMatrix.M21">
            <summary>
            Gets or sets the value of M21.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TransformMatrix.M22">
            <summary>
            Gets or sets the value of M22.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TransformMatrix.Dx">
            <summary>
            Gets or sets the value of Dx.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.TransformMatrix.Dy">
            <summary>
            Gets or sets the value of Dy.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.Rotate(System.Double)">
            <summary>
            Applies a clockwise rotation of the specified angle about the origin to this matrix.
            </summary>
            <param name="angle">
            A <b>double</b> indicates the clockwise angle.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.Translate(System.Double,System.Double)">
            <summary>
            Applies the specified translation vector (offsetX and offsetY) to this matrix 
            by prepending the translation vector.
            </summary>
            <param name="offsetX">
              The x value by which to translate this Matrix.
            </param>
            <param name="offsetY">
              The y value by which to translate this Matrix.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.Scale(System.Double,System.Double)">
            <summary>
            Applies the specified scale vector to this matrix by prepending the scale vector.
            </summary>
            <param name="scaleX">Value by which to scale this matrix in the x-axis direction</param>
            <param name="scaleY">Value by which to scale this matrix in the y-axis direction</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.Shear(System.Double,System.Double)">
            <summary>
            Applies the specified shear vector to this matrix by prepending the shear transform.
            </summary>
            <param name="shearX">Horizontal shear factor</param>
            <param name="shearY">Vertical shear factor</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.XAxisReflect">
            <summary>
            Applies the x-axis reflecting to this matrix.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.YAxisReflect">
            <summary>
            Applies the y-axis reflecting to this matrix.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.SlashReflect">
            <summary>
            Applies the slash reflecting to this Matrix object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.BackslashReflect">
            <summary>
            Applies the backslash reflecting to this Matrix object.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.Rotate(System.Double,FarPoint.Win.Text.TransformOrder)">
            <summary>
            Applies a clockwise rotation of the specified angle about the origin to this Matrix object.
            </summary>
            <param name="angle"><b>Double</b>, the clockwise angle</param>
            <param name="order"><see cref="T:FarPoint.Win.Text.TransformOrder"/> (append or prepend) in which the rotation is applied to this matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.Translate(System.Double,System.Double,FarPoint.Win.Text.TransformOrder)">
            <summary>
            Applies the specified translation vector (offsetX and offsetY) to this matrix 
            by prepending the translation vector.
            </summary>
            <param name="offsetX">Value by which to offset this matrix horizontally</param>
            <param name="offsetY">Value by which to offset this matrix vertically</param>
            <param name="order"><see cref="T:FarPoint.Win.Text.TransformOrder"/> (append or prepend) in which the translation is applied to this matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.Scale(System.Double,System.Double,FarPoint.Win.Text.TransformOrder)">
            <summary>
            Applies the specified scale vector to this matrix by prepending the scale vector.
            </summary>
            <param name="scaleX">Value by which to scale this matrix in the x-axis direction</param>
            <param name="scaleY">Value by which to scale this matrix in the y-axis direction</param>
            <param name="order"><see cref="T:FarPoint.Win.Text.TransformOrder"/> (append or prepend) in which the scaling is applied to this matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.Shear(System.Double,System.Double,FarPoint.Win.Text.TransformOrder)">
            <summary>
            Applies the specified shear vector to this matrix by prepending the shear transform.
            </summary>
            <param name="shearX">Horizontal shear factor</param>
            <param name="shearY">Vertical shear factor</param>
            <param name="order"><see cref="T:FarPoint.Win.Text.TransformOrder"/> (append or prepend) in which the shearing is applied to this matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.XAxisReflect(FarPoint.Win.Text.TransformOrder)">
            <summary>
            Applies the x-axis reflecting to this matrix.
            </summary>
            <param name="order"><see cref="T:FarPoint.Win.Text.TransformOrder"/> (append or prepend) in which the reflection is applied to this matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.YAxisReflect(FarPoint.Win.Text.TransformOrder)">
            <summary>
            Applies the y-axis reflecting to this matrix.
            </summary>
            <param name="order"><see cref="T:FarPoint.Win.Text.TransformOrder"/> (append or prepend) in which the reflection is applied to this matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.SlashReflect(FarPoint.Win.Text.TransformOrder)">
            <summary>
              Applies the slash reflecting to this Matrix object.
            </summary>
            <param name="order"><see cref="T:FarPoint.Win.Text.TransformOrder"/> (append or prepend) in which the reflection is applied to this matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.BackslashReflect(FarPoint.Win.Text.TransformOrder)">
            <summary>
            Applies the backslash reflecting to this matrix.
            </summary>
            <param name="order"><see cref="T:FarPoint.Win.Text.TransformOrder"/> (append or prepend) in which the reflection is applied to this matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.Transform(FarPoint.Win.Text.Coordinate)">
            <summary>
            Transforms a <see cref="T:FarPoint.Win.Text.Coordinate"/> object to a new <see cref="T:FarPoint.Win.Text.Coordinate"/> object.
            </summary>
            <param name="value">Old <see cref="T:FarPoint.Win.Text.Coordinate"/> value</param>
            <returns>New <see cref="T:FarPoint.Win.Text.Coordinate"/> value</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.RotateAt(FarPoint.Win.Text.Coordinate,System.Double)">
            <summary>
            Applies a clockwise rotation to this Matrix object around the point 
            specified in the point parameter, and by prepending the rotation.
            </summary>
            <param name="point">
            A <see cref="T:FarPoint.Win.Text.Coordinate"/> class that represents the center of the rotation. 
            </param>
            <param name="angle">
              The angle (extent) of the rotation. 
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.ReflectAt(FarPoint.Win.Text.Coordinate,FarPoint.Win.Text.Coordinate)">
            <summary>
            Reflects the matrix along the specified line.
            </summary>
            <param name="startPoint"><see cref="T:FarPoint.Win.Text.Coordinate"/> start point of the line</param>
            <param name="endPoint"><see cref="T:FarPoint.Win.Text.Coordinate"/> end point of the line</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.ScaleAt(FarPoint.Win.Text.Coordinate,System.Double,System.Double)">
            <summary>
            Applies the specified scale vector to this matrix by prepending the scale vector 
            at the specified point.
            </summary>
            <param name="point"><see cref="T:FarPoint.Win.Text.Coordinate"/> center of the scale</param>
            <param name="scaleX">Value by which to scale this matrix in the x-axis direction</param>
            <param name="scaleY">Value by which to scale this matrix in the y-axis direction</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.RotateAt(FarPoint.Win.Text.Coordinate,System.Double,FarPoint.Win.Text.TransformOrder)">
            <summary>
            Applies a clockwise rotation to this matrix around the point 
            specified in the point parameter, and by prepending the rotation
            </summary>
            <param name="point"><see cref="T:FarPoint.Win.Text.Coordinate"/> center of the rotation</param>
            <param name="angle">Angle (extent) of the rotation</param>
            <param name="order"><see cref="T:FarPoint.Win.Text.TransformOrder"/> (append or prepend) in which the rotation is applied to this matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.ReflectAt(FarPoint.Win.Text.Coordinate,FarPoint.Win.Text.Coordinate,FarPoint.Win.Text.TransformOrder)">
            <summary>
            Applies the reflecting by the specified line to this matrix.
            </summary>
            <param name="startPoint"><see cref="T:FarPoint.Win.Text.Coordinate"/> start point of the line</param>
            <param name="endPoint"><see cref="T:FarPoint.Win.Text.Coordinate"/> end point of the line</param>
            <param name="order"><see cref="T:FarPoint.Win.Text.TransformOrder"/> (append or prepend) in which the reflection is applied to this matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.ScaleAt(FarPoint.Win.Text.Coordinate,System.Double,System.Double,FarPoint.Win.Text.TransformOrder)">
            <summary>
            Applies the specified scale vector to this matrix by prepending the scale vector 
            at the specified point.
            </summary>
            <param name="point"><see cref="T:FarPoint.Win.Text.Coordinate"/> center of the scale</param>
            <param name="scaleX">Value by which to scale this matrix in the x-axis direction</param>
            <param name="scaleY">Value by which to scale this matrix in the y-axis direction</param>
            <param name="order"><see cref="T:FarPoint.Win.Text.TransformOrder"/> (append or prepend) in which the scaling is applied to this matrix</param>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.op_Explicit(FarPoint.Win.Text.TransformMatrix)~System.Drawing.Drawing2D.Matrix">
            <summary>
            Explicitly converts a TransformMatrix object to a System.Drawing.Drawing2D.Matrix object.
            </summary>
            <param name="value">
            A <see cref="T:FarPoint.Win.Text.TransformMatrix"/> value that will be convert to a <see cref="T:System.Drawing.Drawing2D.Matrix"/> object.
            </param>
            <returns>
            A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object indicates the converted object.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.TransformMatrix.op_Explicit(System.Drawing.Drawing2D.Matrix)~FarPoint.Win.Text.TransformMatrix">
            <summary>
            Explicitly converts a System.Drawing.Drawing2D.Matrix object to a TransformMatrix object.
            </summary>
            <param name="value">
            A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object that will be convert to a <see cref="T:FarPoint.Win.Text.TransformMatrix"/> object.
            </param>
            <returns>
            A <see cref="T:System.Drawing.Drawing2D.Matrix"/> value indicates the converted object.
            </returns>
        </member>
        <member name="T:FarPoint.Win.Text.Coordinate">
            <summary>
            Defines a class the represents the coordinate concept in mathematics.
            </summary>
            <value>
              Coordinate: Any of a set of two or more numbers used to determine the position 
              of a point, line, curve, or plane in a space of a given dimension with respect 
              to a system of lines or other fixed reference.
            </value>
        </member>
        <member name="M:FarPoint.Win.Text.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Indicates a new instance of the <see cref="T:FarPoint.Win.Text.Coordinate"/> class.
            </summary>
            <param name="x">
            A <b>double</b> value that indicates the value of x-coordinate
            </param>
            <param name="y">
            A <b>double</b> value that indicates the value of x-coordinate
            </param>
        </member>
        <member name="P:FarPoint.Win.Text.Coordinate.X">
            <summary>
            Gets or sets the value of x-coordinate.
            </summary>
            <value>
            A <b>double</b> value that indicates the x-coordinate.
            </value>
        </member>
        <member name="P:FarPoint.Win.Text.Coordinate.Y">
            <summary>
            Gets or sets the value of the y-coordinate.
            </summary>
            <value>
            A <b>double</b> value that indicates the y-coordinate.
            </value>
        </member>
        <member name="M:FarPoint.Win.Text.Coordinate.op_Implicit(System.Drawing.Point)~FarPoint.Win.Text.Coordinate">
            <summary>
              Implicitly converts a Point value to a Coordinate object.
            </summary>
            <param name="value">
            A <see cref="T:System.Drawing.Point"/> value that will be converted to a <see cref="T:FarPoint.Win.Text.Coordinate"/> object.
            </param>
            <returns>
            A <see cref="T:FarPoint.Win.Text.Coordinate"/> object that indicates the converted object.
            </returns>
            <remarks>
              The reason for providing implict conversion is that Point and Coordinate have the same conception in drawing.
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Coordinate.op_Implicit(FarPoint.Win.Text.Coordinate)~System.Drawing.Point">
            <summary>
              Implicitly converts a Coordinate value to a Point object.
            </summary>
            <param name="value">
            A <see cref="T:FarPoint.Win.Text.Coordinate"/> object that will be converted to a <see cref="T:FarPoint.Win.Text.Coordinate"/> object.
            </param>
            <returns>
            A <see cref="T:System.Drawing.Point"/> value that indicates the converted object.
            </returns>
        </member>
        <member name="T:FarPoint.Win.Text.Coordinate2D">
            <summary>
            Represents the coordinate in two dimensions.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Coordinate2D.#ctor(FarPoint.Win.Text.Fraction,FarPoint.Win.Text.Fraction)">
            <summary>
            Creates a new two-dimensional coordinate.
            </summary>
            <param name="x">A <typeparamref name="T"/> indicates the value along the x-axis direction</param>
            <param name="y">A <typeparamref name="T"/> indicates the value along the y-axis direction</param>
        </member>
        <member name="F:FarPoint.Win.Text.Coordinate2D.X">
            <summary>
            Sets the value along the x-axis direction.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Coordinate2D.Y">
            <summary>
            Sets the value along the y-axis direction.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.Fraction">
            <summary>
              Represents nn expression that indicates the quotient of two quantities.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Fraction._numerator">
            <summary>
              The number written above the line in a common fraction to indicate 
              the number of parts of the whole.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Fraction._denominator">
            <summary>
              The number written below the line in a common fraction that indicates 
              the number of parts into which one whole is divided.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new fraction with the specified numerator and denominator.
            </summary>
            <param name="numerator">
            Number written above the line in a common fraction to indicate
            the number of parts of the whole.
            </param>
            <param name="denominator">
            Number written below the line in a common fraction that indicates 
            the number of parts into which one whole is divided.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.#ctor(System.Int32)">
            <summary>
            Creates a new fraction with the specified numerator.
            </summary>
            <param name="numerator">
            Number written above the line in a common fraction to indicate
            the number of parts of the whole.
            </param>
        </member>
        <member name="P:FarPoint.Win.Text.Fraction.Numerator">
            <summary>
            Gets or sets the numerator of the fraction.
            </summary>
            <value>
            An <b>int</b> that indicates the number written above the line in a common fraction to indicate
              the number of parts of the whole.
            </value>
        </member>
        <member name="P:FarPoint.Win.Text.Fraction.Denominator">
            <summary>
            Gets or sets the denominator of the fraction.
            </summary>
            <value>
            An <b>int</b> that indicates the number written below the line in a common fraction that indicates 
              the number of parts into which one whole is divided.
            </value>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_UnaryNegation(FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the unary "-" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Addition(FarPoint.Win.Text.Fraction,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary "+" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Subtraction(FarPoint.Win.Text.Fraction,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary "-" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Multiply(FarPoint.Win.Text.Fraction,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary "*" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Multiply(System.Int32,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary "*" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Multiply(FarPoint.Win.Text.Fraction,System.Int32)">
            <summary>
            Defines the binary "*" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Division(FarPoint.Win.Text.Fraction,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary "/" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Division(System.Int32,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary "/" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Division(FarPoint.Win.Text.Fraction,System.Int32)">
            <summary>
            Defines the binary "/" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_OnesComplement(FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the "~" operator. Note: "~" is used as simplify in here.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_GreaterThan(FarPoint.Win.Text.Fraction,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary ">" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_GreaterThanOrEqual(FarPoint.Win.Text.Fraction,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary ">=" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_LessThan(FarPoint.Win.Text.Fraction,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_LessThanOrEqual(FarPoint.Win.Text.Fraction,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Equality(FarPoint.Win.Text.Fraction,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary "==" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Inequality(FarPoint.Win.Text.Fraction,FarPoint.Win.Text.Fraction)">
            <summary>
            Defines the binary "!=" operator.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Implicit(FarPoint.Win.Text.Fraction)~System.Double">
            <summary>
              Converts the fraction to double.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Implicit(FarPoint.Win.Text.Fraction)~System.Single">
            <summary>
              Converts the fraction to float.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.FromDecimal(System.Decimal)">
            <summary>
              Converts the Decimal to fraction.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Explicit(System.Double)~FarPoint.Win.Text.Fraction">
            <summary>
              Converts the double to fraction.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Explicit(System.Single)~FarPoint.Win.Text.Fraction">
            <summary>
              Converts the float to fraction.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.op_Implicit(System.Int32)~FarPoint.Win.Text.Fraction">
            <summary>
              Converts the int to fraction.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.Reverse(FarPoint.Win.Text.Fraction)">
            <summary>
              Reverses the fraction.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">
              Another object to compare to.
            </param>
            <returns>
              true if obj and this instance are the same type and represent the same value;
              otherwise, false.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.GetHashCode">
            <summary>
              Returns the hash code for this instance. 
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.CalculateGreatestCommonDivisor(System.Int32,System.Int32)">
            <summary>
              Calculate the Greatest Common Divisor of <c>oneNumber</c> and <c>anotherNumber</c>.
            </summary>
            <param name="oneNumber">
              An <b>int</b> indicate the one number.
            </param>
            <param name="anotherNumber">
              An <b>int</b> indicate another number.
            </param>
            <returns>
              An <b>int</b> indicate the Greatest Common Divisor.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Fraction.Simplify">
            <summary>
              Simplifies the fraction.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Graphics32.GdiTransformInfo.MapMode">
            <summary>
            Represents the transform information.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.GdiTransformInfo.GetTransformInfo(System.IntPtr)">
            <summary>
            Gets the transform information from the device context.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.GdiTransformInfo.SetTransformInfos(System.IntPtr,FarPoint.Win.Text.Graphics32.GdiTransformInfo)">
            <summary>
            Sets the transform information to the device context.
            </summary>
            <param name="hdc">HDC</param>
            <param name="transformInfo">Transform information</param>
        </member>
        <member name="F:FarPoint.Win.Text.Graphics32._windowHandle">
            <summary>
            Specifies the Window handle where the device context was retrieved from.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Graphics32._objectType">
            <summary>
            Specifies the type of the <see cref="T:FarPoint.Win.Text.Graphics32.Graphics32Type"/> object.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Graphics32._smoothingMode">
            <summary>
            Specifies whether smoothing (antialiasing) is applied to lines and curves
            and the edges of filled areas.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.Graphics32._textRenderingHint">
            <summary>
            Specifies the quality of text rendering.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.Graphics32.Hdc">
            <summary>
            Gets a <see cref="T:System.IntPtr"/>
            </summary>
            <value>The HDC.</value>
        </member>
        <member name="P:FarPoint.Win.Text.Graphics32.ToScreen">
            <summary>
            Gets or sets whether drawing to screen. This property added to fix
            a bug of Uniscribe API can not draw on printing graphics when use print preview.
            </summary>
            <value><c>true</c> if [to screen]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.FloatEquals(System.Single,System.Single)">
            <summary>
            Checks whether two floating-point, single-precision numbers are equal.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.Graphics32.GraphicsMode">
            <summary>
            Gets or sets a <see cref="P:FarPoint.Win.Text.Graphics32.GraphicsMode"/> indicating whether use the world transform in this Grphica32.
            </summary>
            <value>
            A <see cref="P:FarPoint.Win.Text.Graphics32.GraphicsMode"/> indicates the graphics mode.
            </value>
        </member>
        <member name="P:FarPoint.Win.Text.Graphics32.WorldTransform">
            <summary>
            Gets or sets the transform matrix from the world-space to page-space.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.Graphics32.PageScale">
            <summary>
            Gets or sets the page scale in the horizontal direction.
            </summary>
            <value>Scale value</value>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.MeasureStringSingleLine(System.String,System.IntPtr)">
            <summary>
             Measures the height and width of the specified text string (single line) with the specified font.
            </summary>
            <param name="s">Text string to measure</param>
            <param name="hFont">Font that defines the text format of the string</param>
            <returns>
            A <see cref="T:System.Drawing.Size"/> structure that represents the size, in pixel, 
              of the string specified in the <c>s</c> parameter.
            </returns>
            <remarks>
              This method ignores characters such as CRLF and measures the string as if it was a single line. 
              Tab characters are exceptional in this case.
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.NativeGetTextExtent(System.IntPtr,System.String)">
            <summary>
              Measures the specified string.
            </summary>
            <param name="hdc">
              Handle to a Windows device context.
            </param>
            <param name="s">
              String to measure.
            </param>
            <returns>
              This method returns a <see cref="T:System.Drawing.Size"/> structure that 
              represents the size, in pixel, of the string specified in
              the <c>s</c> parameter.
            </returns>
            <remarks>
              This method internally uses the Win32 <b>GetTextExtentPoint32</b> 
              API, which will ignore all control characters.
            </remarks>
            <internalonly/>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.IntersectClip(System.Drawing.Rectangle)">
            <summary>
              Updates the clip region of this <see cref="T:FarPoint.Win.Text.Graphics32"/> object 
              to the intersection of the current clip region and the specified 
              <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="rectangle">
              <see cref="T:System.Drawing.Rectangle"/> structure to intersect with the current 
              clip region. 
            </param>
            <remarks>
              This method assigns to the <b>Clip</b> property of this 
              <see cref="T:FarPoint.Win.Text.Graphics32"/> object the area represented by the 
              intersection of the current clip region and the rectangle 
              specified by the <c>rectangle</c> parameter.
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.IntersectClip(System.IntPtr)">
            <summary>
              Updates the clip region of this <see cref="T:FarPoint.Win.Text.Graphics32"/> 
              object to the intersection of the current clip region and 
              the specified WIN32 GDI region object.
            </summary>
            <param name="hRegion">
            A Win32 GDI region handle.
            </param>
            <remarks>
              This method assigns to the <b>Clip</b> property of this 
              <see cref="T:FarPoint.Win.Text.Graphics32"/> object the area represented by the 
              intersection of the current clip region and the rectangle 
              specified by the rect parameter.
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.ExcludeClip(System.Drawing.Rectangle)">
            <summary>
              Updates the clip region of this <see cref="T:FarPoint.Win.Text.Graphics32"/> object 
              to exclude the area specified by a <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="rectangle">
              <see cref="T:System.Drawing.Rectangle"/> structure that specifies the rectangle to 
              exclude from the clip region. 
            </param>
            <remarks>
              This method excludes the area specified by the <c>rectangle</c> 
              parameter from the current clip region and assigns the resulting 
              area to the <b>Clip</b> property of this <see cref="T:FarPoint.Win.Text.Graphics32"/> 
              object.
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.ExcludeClip(System.IntPtr)">
            <summary>
              Updates the clip region of this <see cref="T:FarPoint.Win.Text.Graphics32"/> 
              object to exclude the area specified by a Win32 GDI region
              handle.
            </summary>
            <param name="hRegion">
            A Win32 GDI region handle.
            </param>
            <remarks>
              This method excludes the area specified by the <c>hRegion</c> 
              parameter from the current clip region and assigns the resulting
              area to the <b>Clip</b> property of this <see cref="T:FarPoint.Win.Text.Graphics32"/> 
              object.
            </remarks>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.SetClip(System.Drawing.Rectangle)">
            <summary>
              Sets the clipping region of this <see cref="T:FarPoint.Win.Text.Graphics32"/> object 
              to the rectangle specified by a <see cref="T:System.Drawing.Rectangle"/> structure.
            </summary>
            <param name="rectangle">
              <see cref="T:System.Drawing.Rectangle"/> structure that represents the new clip region. 
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)">
            <summary>
              Sets the clipping region of this <see cref="T:FarPoint.Win.Text.Graphics32"/> object 
              to the result of the specified operation combining the current 
              clip region and the rectangle specified by a <see cref="T:System.Drawing.Rectangle"/> 
              structure.
            </summary>
            <param name="rectangle">
              <see cref="T:System.Drawing.Rectangle"/> structure to combine. 
            </param>
            <param name="combineMode">
              Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode"/> enumeration that 
              specifies the combining operation to use. 
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.SetClip(System.IntPtr,System.Drawing.Drawing2D.CombineMode)">
            <summary>
              Sets the clipping region of this <see cref="T:FarPoint.Win.Text.Graphics32"/> object 
              to the result of the specified operation combining the current clip 
              region and the specified Windows region handle.
            </summary>
            <param name="hRegion">
            A Windows region handle to combine.
            </param>
            <param name="combineMode">
              Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode"/> enumeration that 
              specifies the combining operation to use. 
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.Save">
            <summary>
            Saves the current state of this <see cref="T:FarPoint.Win.Text.Graphics32"/> object and 
              identifies the saved state with a handle.
            </summary>
            <returns>
              This methods returns a handle that represents the save state of this
              <see cref="T:FarPoint.Win.Text.Graphics32"/> object.
            </returns>
        </member>
        <member name="M:FarPoint.Win.Text.Graphics32.Restore(System.Int32)">
            <summary>
              Restores the state of this <see cref="T:FarPoint.Win.Text.Graphics32"/> object to the 
              state represented by a handle.
            </summary>
            <param name="gState">
            A handle that represents the state to which to restore this
              <see cref="T:FarPoint.Win.Text.Graphics32"/> object.
            </param>
        </member>
        <member name="T:FarPoint.Win.Text.UnsafeNativeMethods">
            <summary>
            Defines the methods base on Win32 API library.
            </summary>
            <remarks>
            The UnsafeNativeMethods class defines functions, which is given in Win32 SDK.
            </remarks>
        </member>
        <member name="T:FarPoint.Win.Text.UnsafeNativeMethods.LOGBRUSH">
            <summary>
              The LOGBRUSH structure defines the style, color, and pattern of a physical brush. 
              It is used by the Windows CreateBrushIndirect and ExtCreatePen functions.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.LOGBRUSH.Style">
            <summary>
              Specifies the brush style.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.LOGBRUSH.Color">
            <summary>
              Specifies the color in which the brush is to be drawn.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.LOGBRUSH.Hatch">
            <summary>
              Specifies a hatch style. The meaning depends on the brush style defined by Style.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.UnsafeNativeMethods.NCCALCSIZEPARAMS">
            <summary>
              The NCCALCSIZEPARAMS structure contains information that 
              an application can use while processing the WM_NCCALCSIZE message 
              to calculate the size, position, and valid contents of 
              the client area of a window.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.NCCALCSIZEPARAMS.rect0">
            <summary>
              The rectangle contains the new coordinates of 
            A window that has been moved or resized.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.NCCALCSIZEPARAMS.rect1">
            <summary>
              The rectangle contains the coordinates of 
              the window before it was moved or resized.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.NCCALCSIZEPARAMS.rect2">
            <summary>
              The rectangle contains the coordinates of 
              the client area of a window before it was moved or resized.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.NCCALCSIZEPARAMS.lppos">
            <summary>
              Points to a WINDOWPOS structure that contains the size and 
              position values specified in the operation that caused 
              the window to be moved or resized.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT">
            <summary>
              The PAINTSTRUCT structure contains information for an application.
              This information can be used to paint the client area of a window
              owned by that application.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.hDC">
            <summary>
              Handle to the display DC to be used for painting.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.Erase">
            <summary>
              Specifies whether the background must be erased.This value is
              nonzero if the application should erase the background. 
              The application is responsible for erasing the background 
              if a window class is created without a background brush.
              For more information, see the description of the hbrBackground member of
              the WNDCLASS structure.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.Paint_Left">
            <summary>
              Specifies a left value of rectangle that specifies the upper left and 
              lower right corners of the rectangle in which the painting is requested,
              in device units relative to the upper-left corner of the client area. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.Paint_Top">
            <summary>
              Specifies a top value of rectangle that specifies the upper left and 
              lower right corners of the rectangle in which the painting is requested,
              in device units relative to the upper-left corner of the client area. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.Paint_Right">
            <summary>
              Specifies a right value of rectangle that specifies the upper left and 
              lower right corners of the rectangle in which the painting is requested,
              in device units relative to the upper-left corner of the client area. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.Paint_Bottom">
            <summary>
              Specifies a bottom value of rectangle that specifies the upper left and 
              lower right corners of the rectangle in which the painting is requested,
              in device units relative to the upper-left corner of the client area. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.Restore">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.IncUpdate">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.Reserved1">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.Reserved2">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.Reserved3">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.PAINTSTRUCT.Reserved4">
            <summary>
              Reserved; used internally by the system.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.UnsafeNativeMethods.POINT">
            <summary>
              The POINT structure defines the x and y coordinates of a point.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.POINT.X">
            <summary>
              Specifies the x-coordinate of the point.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.POINT.Y">
            <summary>
              Specifies the y-coordinate of the point.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs the POINT structure.
            </summary>
            <param name="x">
              Specifies the x-coordinate of the point.
            </param>
            <param name="y">
              Specifies the y-coordinate of the point.
            </param>
        </member>
        <member name="T:FarPoint.Win.Text.UnsafeNativeMethods.RECT">
            <summary>
              The RECT structure defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.RECT.Left">
            <summary>
              Specifies the x-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.RECT.Top">
            <summary>
              Specifies the y-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.RECT.Right">
            <summary>
              Specifies the x-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.RECT.Bottom">
            <summary>
              Specifies the y-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs the RECT structure.
            </summary>
            <param name="left">
              Specifies the x-coordinate of the upper-left corner of a rectangle.
            </param>
            <param name="top">
              Specifies the y-coordinate of the upper-left corner of a rectangle.
            </param>
            <param name="right">
              Specifies the x-coordinate of the lower-right corner of a rectangle.
            </param>
            <param name="bottom">
              Specifies the y-coordinate of the lower-right corner of a rectangle.
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.RECT.#ctor(System.Drawing.Rectangle)">
            <summary>
            Constructs the RECT structure.
            </summary>
            <param name="rectangle">
              Specifies the rectangle
            </param>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.RECT.Offset(System.Int32,System.Int32)">
            <summary>
              Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="x">
              The horizontal offset.
            </param>
            <param name="y">
              The vertical offset.
            </param>
        </member>
        <member name="P:FarPoint.Win.Text.UnsafeNativeMethods.RECT.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:FarPoint.Win.Text.UnsafeNativeMethods.RECT.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.UnsafeNativeMethods.SIZE">
            <summary>
              The SIZE structure specifies the width and height of a rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.SIZE.cx">
            <summary>
              Specifies the rectangle's width. The units depend on which function uses this.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.SIZE.cy">
            <summary>
              Specifies the rectangle's height. The units depend on which function uses this.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs the SIZE structure.
            </summary>
            <param name="width">Specifies the size's width.</param>
            <param name="height">Specifies the size's height.</param>
        </member>
        <member name="T:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC">
            <summary>
              The TEXTMETRIC structure contains basic information about a physical font. 
              All sizes are specified in logical units; that is, they depend on 
              the current mapping mode of the display context.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.Height">
            <summary>
              Specifies the height (ascent + descent) of characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.Ascent">
            <summary>
              Specifies the ascent (units above the base line) of characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.Descent">
            <summary>
              Specifies the descent (units below the base line) of characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.InternalLeading">
            <summary>
              Specifies the amount of leading (space) inside the bounds set by 
              the tmHeight member. Accent marks and other diacritical characters 
              may occur in this area. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.ExternalLeading">
            <summary>
              Specifies the amount of extra leading (space) that the application 
            Adds between rows. Since this area is outside the font, it contains 
              no marks and is not altered by text output calls in either OPAQUE or 
              TRANSPARENT mode. The designer may set this member to zero.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.AveCharWidth">
            <summary>
              Specifies the average width of characters in the font 
              (generally defined as the width of the letter x). This value 
              does not include the overhang required for bold or italic characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.MaxCharWidth">
            <summary>
              Specifies the width of the widest character in the font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.Weight">
            <summary>
              Specifies the weight of the font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.Overhang">
            <summary>
              Specifies the extra width per string that may be added to 
              some synthesized fonts. When synthesizing some attributes, 
              such as bold or italic, graphics device interface (GDI) or 
            A device may have to add width to a string on both a 
              per-character and per-string basis.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.DigitizedAspectX">
            <summary>
              Specifies the horizontal aspect of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.DigitizedAspectY">
            <summary>
              Specifies the vertical aspect of the device for which the font was designed. 
              The ratio of the tmDigitizedAspectX and tmDigitizedAspectY members is 
              the aspect ratio of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.FirstChar">
            <summary>
              Specifies the value of the first character defined in the font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.LastChar">
            <summary>
              Specifies the value of the last character defined in the font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.DefaultChar">
            <summary>
              Specifies the value of the character to be substituted for 
              characters not in the font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.BreakChar">
            <summary>
              Specifies the value of the character that will be used to 
              define word breaks for text justification.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.Italic">
            <summary>
              Specifies an italic font if it is nonzero.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.Underlined">
            <summary>
              Specifies an underlined font if it is nonzero.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.StruckOut">
            <summary>
              Specifies a strikeout font if it is nonzero.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.PitchAndFamily">
            <summary>
              Specifies information about the pitch, the technology, 
              and the family of a physical font.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC.CharSet">
            <summary>
              Specifies the character set of the font. The character set 
              can be one of the following values.
            </summary>
        </member>
        <member name="T:FarPoint.Win.Text.UnsafeNativeMethods.XFORM">
            <summary>
              The XFORM structure contains information for a world-space to page-space transformation.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.XFORM.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
              The constructor initializes a new instance of the <b>XFORM</b> structure.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.LOGFONT.Equals(FarPoint.Win.Text.UnsafeNativeMethods.LOGFONT)">
            <summary>
              Add this method in order to recduce the warning count of Fon32 class.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.CreateFontIndirect(FarPoint.Win.Text.UnsafeNativeMethods.LOGFONT@)">
            <summary>The CreateFontIndirect Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.CreatePen(System.Int32,System.Int32,System.Int32)">
            <summary>The CreatePen Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.DeleteObject(System.IntPtr)">
            <summary>The DeleteObject Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.DrawIcon(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>The DrawIcon Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.GetGraphicsMode(System.IntPtr)">
            <summary>The GetGraphicsMode Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.SetGraphicsMode(System.IntPtr,System.Int32)">
            <summary>The SetGraphicsMode Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.GetWorldTransform(System.IntPtr,FarPoint.Win.Text.UnsafeNativeMethods.XFORM@)">
            <summary>The GetWorldTransform Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.SetWorldTransform(System.IntPtr,FarPoint.Win.Text.UnsafeNativeMethods.XFORM@)">
            <summary>The SetWorldTransform Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.GetTextMetrics(System.IntPtr,FarPoint.Win.Text.UnsafeNativeMethods.TEXTMETRIC@)">
            <summary>The GetTextMetrics Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>The ReleaseDC Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>The SelectObject Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.GetCurrentObject(System.IntPtr,System.UInt32)">
            <summary>The GetCurrentObject Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.SetBkMode(System.IntPtr,System.Int32)">
            <summary>The SetBKMode Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.SetTextColor(System.IntPtr,System.Int32)">
            <summary>The SetTextColor Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.GetTextColor(System.IntPtr)">
            <summary>The GetTextColor Function</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The CreateRectRgn Function.</summary>
        </member>
        <member name="M:FarPoint.Win.Text.UnsafeNativeMethods.GetDC(System.IntPtr)">
            <summary>The GetDC Function.</summary>
        </member>
        <member name="T:FarPoint.Win.Text.TextHelper">
            <summary>
             Provides static methods to draw text with various styles and settings
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.RLM">
            <summary>
            Right-to-Left Mark  		200F 		Acts as an Arabic character. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.LRM">
            <summary>
             Left-to-Right Mark  		200E 		Acts as a Latin character. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.RLE">
            <summary>
             Right-to-Left Embedding  	202B 		Treat the following text as embedded right-to-left. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.LRE">
            <summary>
             Left-to-right embedding  	202A 		Treat the following text as embedded left-to-right. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.RLO">
            <summary>
            Right-to-left override  	202E 		Force following characters to be treated as strong right-to-left characters. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.LRO">
            <summary>
             Left-to-right override  	202D 		Force following characters to be treated as strong left-to-right characters. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.PDF">
            <summary>
             Pop Directional Format   	202C 		Restore the bidirectional state to what it was before the last LRE, RLE, RLO, LRO. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.ZWJ">
            <summary>
             Zero width joiner  		200D 		Forces leading and trailing characters to be in joined form, if possible. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.ZWNJ">
            <summary>
            Zero width non joiner  	200C 		Forces leading and trailing characters not to be joined. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.RS">
            <summary>
            RECORD SEPARATOR    1E     A control character used to separate and qualify data logically; its specific meaning has to be specified for each application. If this character is used in hierarchical order, it delimits a data item called a record.  
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.US">
            <summary>
            UNIT SEPARATOR    1F       A control character used to separate and qualify data logically; its specific meaning has to be specified for each application. If this character is used in hierarchical order, it delimits a data item called a unit.  
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.MeasureDrawRotationText(System.Boolean,FarPoint.Win.Text.DrawTextArgs)">
            <summary>
            Measures and draws the rotated text.
            </summary>
            <param name="args">Draw Text arguments.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.ReverseParagraphsForTopDown(System.String)">
            <summary>
            Reverses the paragraphs for top down.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.CalculateSinACosA(System.Double@,System.Double@,System.Double@,System.Boolean@,FarPoint.Win.TextOrientation,System.Drawing.Rectangle@,System.IntPtr@,FarPoint.Win.Text.Graphics32@,FarPoint.Win.HorizontalAlignment@,FarPoint.Win.VerticalAlignment@,System.Int32)">
            <summary>
            Calculates the sine and cosine of the angle and some other variables for later use.
            </summary>
            <param name="angle">Angle</param>
            <param name="sinA">Sine of the angle</param>
            <param name="cosA">Cosine of the angle</param>
            <param name="isRotation">Whether text is rotated</param>
            <param name="textOrientation">Text orientation</param>
            <param name="rectangle">Rectangle</param>
            <param name="hFont">H font</param>
            <param name="graphics32">Graphics</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.AdjustAlignment(System.Boolean,FarPoint.Win.VerticalAlignment,FarPoint.Win.HorizontalAlignment,System.Boolean,System.Double,System.Double,System.Int32,System.Int32,System.Boolean,FarPoint.Win.Text.AlignHorizontal@,FarPoint.Win.Text.AlignVertical@,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode@,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode@,FarPoint.Win.Text.AlignHorizontal@,FarPoint.Win.Text.AlignVertical@,FarPoint.Win.Text.TextRender.SimpleTools.SimplePageTemplate@)">
            <summary>
            Adjusts the alignment.
            </summary>
            <param name="valign">Vertical alignment</param>
            <param name="halign">Horizontal alignment</param>
            <param name="isRotation">Whether text is rotated</param>
            <param name="sinA">Sine of the angle</param>
            <param name="cosA">Cosine of the angle</param>
            <param name="tabWidth">Width of the tab</param>
            <param name="textIndent">Amount of indent of the text</param>
            <param name="isRTL">Whether layout is right-to-left</param>
            <param name="lineAlign">Line alignment</param>
            <param name="wordAlign">Word alignment</param>
            <param name="wordAdjustment">Word adjustment</param>
            <param name="lineAdjustment">Line adjustment</param>
            <param name="pageAlignH">Page horizontal alignment</param>
            <param name="pageAlignV">Page vertical alignment</param>
            <param name="pageTemplate">Page template</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.AdjustAlignmentMinus90To90(System.Boolean,FarPoint.Win.VerticalAlignment,FarPoint.Win.HorizontalAlignment,System.Boolean,System.Boolean,FarPoint.Win.Text.AlignHorizontal@,FarPoint.Win.Text.AlignVertical@,FarPoint.Win.Text.AlignHorizontal@,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode@,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode@)">
            <summary>
            Adjusts the alignment from -90 to 90.
            </summary>
            <param name="valign">Vertical alignment</param>
            <param name="halign">Horizontal alignment</param>
            <param name="isRotation">Whether text is rotated</param>
            <param name="isRTL">Whether layout is right-to-left</param>
            <param name="lineAlign">Line alignment</param>
            <param name="pageAlignV">Page vertical alignment</param>
            <param name="pageAlignH">Page horizontal alignment</param>
            <param name="wordAdjustment">Word adjustment</param>
            <param name="lineAdjustment">Line adjustment</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.AdjustAlignmentMinus90(FarPoint.Win.VerticalAlignment,FarPoint.Win.HorizontalAlignment,System.Boolean,System.Boolean,FarPoint.Win.Text.AlignHorizontal@,FarPoint.Win.Text.AlignVertical@,FarPoint.Win.Text.AlignHorizontal@,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode@,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode@)">
            <summary>
            Adjusts the alignment for -90.
            </summary>
            <param name="valign">Vertical alignment</param>
            <param name="halign">Horizontal alignment</param>
            <param name="isRotation">Whether text is rotated</param>
            <param name="isRTL">Whether layout is right-to-left</param>
            <param name="lineAlign">Line alignment</param>
            <param name="pageAlignV">Page vertical alignment</param>
            <param name="pageAlignH">Page horizontal alignment</param>
            <param name="wordAdjustment">Word adjustment</param>
            <param name="lineAdjustment">Line adjustment</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.AdjustAlignment90(FarPoint.Win.VerticalAlignment,FarPoint.Win.HorizontalAlignment,System.Boolean,System.Boolean,FarPoint.Win.Text.AlignHorizontal@,FarPoint.Win.Text.AlignHorizontal@,FarPoint.Win.Text.AlignVertical@,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode@,FarPoint.Win.Text.TextRender.SimpleTools.TextAdjustmentMode@)">
            <summary>
            Adjusts the alignment for 90.
            </summary>
            <param name="valign">Vertical alignment</param>
            <param name="halign">Horizontal alignment</param>
            <param name="isRotation">Whether text is rotated</param>
            <param name="isRTL">Whether layout is right-to-left</param>
            <param name="lineAlign">Line alignment</param>
            <param name="pageAlignH">Page horizontal alignment</param>
            <param name="pageAlignV">Page vertical alignment</param>
            <param name="wordAdjustment">Word adjustment</param>
            <param name="lineAdjustment">Line adjustment</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.ProcessHotKey(System.String,System.Drawing.Text.HotkeyPrefix,System.Boolean,FarPoint.Win.Text.TextRender.TextBindingCollection@)">
            <summary>
            Processes the hot key.
            </summary>
            <param name="str">The STR.</param>
            <param name="hotkeyPrefix">The hotkey prefix.</param>
            <param name="stringIsRTL">if set to <c>true</c> [string is RTL].</param>
            <param name="textStyles">The text styles.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.DrawNormalText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix, string trimming and rotation angle.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String to draw</param>
            <param name="font">Font to use</param>
            <param name="foreColor">Color of text</param>
            <param name="rectangle">Rectangle in which to draw string</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">True to wrap text, false otherwise</param>
            <param name="hotkeyPrefix">HotkeyPrefix</param>
            <param name="stringTrim">StringTrimming</param>
            <param name="drawRectHeight">Height of the target rectangle in pixels</param>
            <param name="adjust">Whether to adjust the rectangle for alignment</param>
            <param name="rotationAngle">Angle to rotate text</param>
            <param name="textIndent">text indent</param>
            <param name="isRTL">Whether the layout is right-to-left</param>
            <param name="preserveGraphicClipping">True if draw text within clipped bound of Graphic</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.DrawNormalTextTopDown(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF@,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Drawing.SolidBrush,System.Drawing.StringFormat,System.Int32@,System.Boolean,System.Drawing.SizeF@,System.Boolean)">
            <summary>
            Draws the normal text top down.
            </summary>
            <param name="g">The g.</param>
            <param name="s">The s.</param>
            <param name="font">The font.</param>
            <param name="foreColor">Color of the fore.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="valign">Vertical alignment</param>
            <param name="textOrientation">The text orientation.</param>
            <param name="wordWrap">if set to <c>true</c> [word wrap].</param>
            <param name="hotkeyPrefix">The hotkey prefix.</param>
            <param name="stringTrim">The string trim.</param>
            <param name="drawRectHeight">Height of the draw rect.</param>
            <param name="brush">The brush.</param>
            <param name="fmt">The FMT.</param>
            <param name="flags">The flags.</param>
            <param name="toscreen">if set to <c>true</c> [toscreen].</param>
            <param name="textSize">Size of the text.</param>
            <param name="preserveGraphicClipping">If set to <c>true</c> text will be drawn within clipped bound of graphic.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.DrawNormalTextVerticalFlipped(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF@,System.Drawing.SolidBrush,System.Drawing.StringFormat,System.Int32,System.Drawing.Rectangle@,System.Boolean,System.Drawing.Bitmap,System.Drawing.Graphics)">
            <summary>
            Draws the normal text vertical flipped.
            </summary>
            <param name="g">The g.</param>
            <param name="s">The s.</param>
            <param name="font">The font.</param>
            <param name="foreColor">Color of the fore.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="brush">The brush.</param>
            <param name="fmt">The FMT.</param>
            <param name="flags">The flags.</param>
            <param name="rect">The rect.</param>
            <param name="toscreen">if set to <c>true</c> [toscreen].</param>
            <param name="bmp">The BMP.</param>
            <param name="gtemp">The gtemp.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.DrawNormalTextVertical(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF@,System.Drawing.SolidBrush,System.Drawing.StringFormat,System.Single,System.Int32,System.Drawing.Rectangle@,System.Boolean,System.Drawing.Bitmap,System.Drawing.Graphics)">
            <summary>
            Draws the normal text vertical.
            </summary>
            <param name="g">The g.</param>
            <param name="s">The s.</param>
            <param name="font">The font.</param>
            <param name="foreColor">Color of the fore.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="brush">The brush.</param>
            <param name="fmt">The FMT.</param>
            <param name="fAdjust">The f adjust.</param>
            <param name="flags">The flags.</param>
            <param name="rect">The rect.</param>
            <param name="toscreen">if set to <c>true</c> [toscreen].</param>
            <param name="bmp">The BMP.</param>
            <param name="gtemp">The gtemp.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.DrawNormalTextHorizontalFlipped(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF@,System.Drawing.SolidBrush,System.Drawing.StringFormat,System.Single,System.Int32,System.Drawing.Rectangle@,System.Boolean,System.Drawing.Bitmap,System.Drawing.Graphics)">
            <summary>
            Draws the normal text horizontal flipped.
            </summary>
            <param name="g">The g.</param>
            <param name="s">The s.</param>
            <param name="font">The font.</param>
            <param name="foreColor">Color of the fore.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="brush">The brush.</param>
            <param name="fmt">The FMT.</param>
            <param name="fAdjust">The f adjust.</param>
            <param name="flags">The flags.</param>
            <param name="rect">The rect.</param>
            <param name="toscreen">if set to <c>true</c> [toscreen].</param>
            <param name="bmp">The BMP.</param>
            <param name="gtemp">The gtemp.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.DrawNormalTextHorizontal(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF@,System.Drawing.SolidBrush,System.Drawing.StringFormat,System.Int32,System.Drawing.Rectangle@,System.Boolean)">
            <summary>
            Draws the normal text horizontal.
            </summary>
            <param name="g">The g.</param>
            <param name="s">The s.</param>
            <param name="font">The font.</param>
            <param name="foreColor">Color of the fore.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="brush">The brush.</param>
            <param name="fmt">The FMT.</param>
            <param name="flags">The flags.</param>
            <param name="rect">The rect.</param>
            <param name="toscreen">if set to <c>true</c> [toscreen].</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.CalculateTextBoundsHorizontal(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.RectangleF@,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Drawing.StringTrimming@,System.Int32,System.Drawing.StringFormat,System.Single@,System.Boolean,System.Drawing.SizeF@,System.Drawing.SizeF@)">
            <summary>
            Calculates the text bounds horizontal.
            </summary>
            <param name="g">The g.</param>
            <param name="s">The s.</param>
            <param name="font">The font.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="stringTrim">The string trim.</param>
            <param name="textIndent">The text indent.</param>
            <param name="fmt">The FMT.</param>
            <param name="fAdjust">The f adjust.</param>
            <param name="toscreen">if set to <c>true</c> [toscreen].</param>
            <param name="textSize">Size of the text.</param>
            <param name="testSize">Size of the test.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.CalculateTextBoundsHorizontalFlipped(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.RectangleF@,FarPoint.Win.HorizontalAlignment@,FarPoint.Win.VerticalAlignment@,System.Drawing.StringTrimming@,System.Int32,System.Drawing.StringFormat,System.Single@,System.Boolean,System.Drawing.SizeF@,System.Drawing.SizeF@)">
            <summary>
            Calculates the text bounds horizontal flipped.
            </summary>
            <param name="g">The g.</param>
            <param name="s">The s.</param>
            <param name="font">The font.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="stringTrim">The string trim.</param>
            <param name="textIndent">The text indent.</param>
            <param name="fmt">The FMT.</param>
            <param name="fAdjust">The f adjust.</param>
            <param name="toscreen">if set to <c>true</c> [toscreen].</param>
            <param name="textSize">Size of the text.</param>
            <param name="testSize">Size of the test.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.CalculateTextBoundsVerticalFlipped(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.RectangleF@,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Drawing.StringTrimming@,System.Int32,System.Drawing.StringFormat,System.Single@,System.Boolean,System.Drawing.SizeF@,System.Drawing.SizeF@)">
            <summary>
            Calculates the text bounds vertical flipped.
            </summary>
            <param name="g">The g.</param>
            <param name="s">The s.</param>
            <param name="font">The font.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="stringTrim">The string trim.</param>
            <param name="textIndent">The text indent.</param>
            <param name="fmt">The FMT.</param>
            <param name="fAdjust">The f adjust.</param>
            <param name="toscreen">if set to <c>true</c> [toscreen].</param>
            <param name="textSize">Size of the text.</param>
            <param name="testSize">Size of the test.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.CalculateTextBoundsVertical(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.RectangleF@,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Drawing.StringTrimming@,System.Int32,System.Drawing.StringFormat,System.Single@,System.Boolean,System.Drawing.SizeF@,System.Drawing.SizeF@)">
            <summary>
            Calculates the text bounds vertical.
            </summary>
            <param name="g">The g.</param>
            <param name="s">The s.</param>
            <param name="font">The font.</param>
            <param name="rectangle">The rectangle.</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="stringTrim">The string trim.</param>
            <param name="textIndent">The text indent.</param>
            <param name="fmt">The FMT.</param>
            <param name="fAdjust">The f adjust.</param>
            <param name="toscreen">if set to <c>true</c> [toscreen].</param>
            <param name="textSize">Size of the text.</param>
            <param name="testSize">Size of the test.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.CalculateTextBoundsTopDownRTL(System.Drawing.RectangleF@,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Boolean,System.Single@,System.Drawing.SizeF@)">
            <summary>
            Calculates the text bounds top down RTL.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="wordWrap">if set to <c>true</c> [word wrap].</param>
            <param name="fAdjust">The f adjust.</param>
            <param name="textSize">Size of the text.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.CalculateTextBoundsTopDown(System.Drawing.RectangleF@,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Boolean,System.Single@,System.Drawing.SizeF@)">
            <summary>
            Calculates the text bounds top down.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="wordWrap">if set to <c>true</c> [word wrap].</param>
            <param name="fAdjust">The f adjust.</param>
            <param name="textSize">Size of the text.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.DrawTrimedText(FarPoint.Win.Text.DrawTextArgs)">
            <summary>
            Draws the trimed text.
            </summary>
            <param name="args">Draw Text arguments.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.MeasureNormalText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.RectangleF,FarPoint.Win.TextOrientation,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean)">
            <summary>
            Gets the size of the specified text when drawn with the specified font, orientation, wrapping, hotkey prefix and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">String</param>
            <param name="font">Font</param>
            <param name="rectangle">RectangleF</param>
            <param name="textOrientation">Text orientation</param>
            <param name="wordWrap">Whether to wrap text to multiple lines</param>
            <param name="hotkeyPrefix">Hotkey prefix</param>
            <param name="stringTrim">String trimming</param>
            <param name="textIndent">Amount to indent the text</param>
            <param name="preserveGraphicClipping">Text will be paint within clipped bound of graphic.</param>
            <returns>SizeF</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.IsTrimedString(FarPoint.Win.Text.DrawTextArgs)">
            <summary>
            Determines whether the text is trimmed.
            </summary>
            <param name="args">Draw Text arguments.</param>
            <returns><c>true</c> if string is trimmed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.GetTextFormatFlags(System.Boolean,System.Boolean,System.Boolean,System.Drawing.Text.HotkeyPrefix,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,System.Drawing.StringTrimming)">
            <summary>
            Gets the text format flags.
            </summary>
            <param name="preserveGraphicClipping">if set to <c>true</c> text will be draw within the clipped bound of graphic.</param>
            <param name="wordWrap">if set to <c>true</c> [word wrap].</param>
            <param name="multiline">if set to <c>true</c> [multiline].</param>
            <param name="hotkeyPrefix">The hotkey prefix.</param>
            <param name="halign">Horizontal alignment</param>
            <param name="valign">Vertical alignment</param>
            <param name="stringTrim">The string trim.</param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.SaveGraphicState(System.Drawing.Graphics)">
            <summary>
            When drawText by drawText5 (textRender dll). 
            If exist the tranform (offsetX or offsetY), drawText5 will be translate 2 times.
            the first for graphics and second for the state of graphics.
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.DrawRotatedText(FarPoint.Win.Text.DrawTextArgs)">
            <summary>
            Draws the specified string in the specified rectangle, with the specified font, color, alignment, orientation, wrapping, hotkey prefix, string trimming and rotation angle.
            </summary>
            <param name="args">Draw Text arguments</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.GetRotatedTextSize(FarPoint.Win.Text.DrawTextArgs,System.Boolean,System.Boolean)">
            <summary>
            Gets the size of the specified text when drawn with the specified font, orientation, wrapping, hotkey prefix and string trimming.
            </summary>
            <param name="g">GDI+ graphics surface</param>
            <param name="s">Text string</param>
            <param name="font">Font of the text</param>
            <param name="r">Rectangle bounding the text</param>
            <param name="textOrientation">Orientation of the text</param>
            <param name="wordWrap">Whether to wrap the text to multiple lines</param>
            <param name="multiline">Whether to allow multiple lines of text</param> // 20080 -scl
            <param name="hotkeyPrefix">Hotkey prefix</param>
            <param name="stringTrim">String trimming</param>
            <param name="textIndent">Number of pixels to indent the text</param>
            <returns>SizeF</returns>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.GDIPlusTextMetric.Height">
            <summary>
              Specifies the height of characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.GDIPlusTextMetric.Ascent">
            <summary>
              Specifies the ascent (units above the base line) of characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.GDIPlusTextMetric.Descent">
            <summary>
              Specifies the descent (units below the base line) of characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.GDIPlusTextMetric.InternalLeading">
            <summary>
              Specifies the internal leading (space) of characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.GDIPlusTextMetric.ExternalLeading">
            <summary>
              Specifies the external leading (space) of characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.TextHelper.GDIPlusTextMetric.EmHeight">
            <summary>
              Specifies the em height of characters.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.Draw(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean,System.Double,System.Int32,System.Boolean)">
            <summary>
            Draws the text.
            </summary>
            <param name="g">Graphics device interface for painting the text</param>
            <param name="s">Text to draw</param>
            <param name="font">Font of the text</param>
            <param name="foreColor">Color of the text</param>
            <param name="rectangle">Bounding rectangle of the text</param>
            <param name="halign">Horizontal alignment settings of the text relative to its bounding rectangle</param>
            <param name="valign">Vertical alignment settings of the text relative to its bounding rectangle</param>
            <param name="textOrientation">Orientation of the text</param>
            <param name="wordWrap">Whether the text is wrapped to multiple lines</param>
            <param name="multiline">Whether to allow text to go to multiple lines</param>
            <param name="hotkeyPrefix">Hotkey prefix style of the text</param>
            <param name="stringTrim">Trimming effect of the text</param>
            <param name="drawRectHeight">Height of the drawing rectangle</param>
            <param name="adjust">Whether to adjust the bounding rectangle of the text when drawing</param>
            <param name="rotationAngle">Rotation angle of the text</param>
            <param name="textIndent">Number of pixels to indent the text</param>
            <param name="isRTL">Whether layout is right-to-left</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.Draw(FarPoint.Win.Text.DrawTextArgs)">
            <summary>
            Draws the text.
            </summary>
            <param name="args">Draw Text arguments.</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.Measure(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,FarPoint.Win.HorizontalAlignment,FarPoint.Win.VerticalAlignment,FarPoint.Win.TextOrientation,System.Boolean,System.Boolean,System.Drawing.Text.HotkeyPrefix,System.Drawing.StringTrimming,System.Int32,System.Boolean,System.Double,System.Int32)">
            <summary>
            Determines the size of the text.
            </summary>
            <param name="g">Graphics device interface for measuring the text on</param>
            <param name="s">Text to measure</param>
            <param name="font">Font of the text</param>
            <param name="foreColor">Color of the text</param>
            <param name="rectangle">Bounding rectangle of the text</param>
            <param name="halign">Horizontal alignment settings of the text relative to its bounding rectangle</param>
            <param name="valign">Vertical alignment settings of the text relative to its bounding rectangle</param>
            <param name="textOrientation">Orientation of the text</param>
            <param name="wordWrap">Whether the text is wrapped to multiple lines</param>
            <param name="multiline">Whether multiple lines are allowed</param>
            <param name="hotkeyPrefix">Hotkey prefix</param>
            <param name="stringTrim">Trimming effect of the text</param>
            <param name="drawRectHeight">Height of the rectangle</param>
            <param name="adjust">Whether to adjust the bounding rectangle of the text</param>
            <param name="rotationAngle">Rotation angle of the text</param>
            <param name="textIndent">Number of pixels to indent the text</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.Measure(FarPoint.Win.Text.DrawTextArgs)">
            <summary>
            Determines the size of the text.
            </summary>
            <param name="args">Draw Text arguments</param>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.MeasureTextSizeWithAutoFit(FarPoint.Win.Text.TextHelper.MeasureMethods,FarPoint.Win.Text.DrawTextArgs,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function acts as a wrapper around the original MeasureDrawRotationText and GetRotatedTextSize. The old limitation was that our logic couldn't extend width when auto fit column or
            couldn't extend height when auto fit row for distributed or justify alignment. This function provides that capability.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.TextHelper.IsComplexString(System.String)">
            <summary>
            Determines whether the string is a complex string with RTL reading order.
            </summary>
            <param name="s">The string.</param>
            <returns>
            	<c>true</c> if complex string with RTL reading order; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FarPoint.Win.Text.DrawTextArgs">
            <summary>
            Draw text arguments.
            </summary>
        </member>
        <member name="M:FarPoint.Win.Text.DrawTextArgs.#ctor(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,System.Int32)">
             <summary>
            internal only
             </summary>
             <param name="g">Graphics device interface for painting the text.</param>
             <param name="text">Text to draw.</param>
             <param name="font">Font of the text.</param>
             <param name="foreColor">Color of the text.</param>
             <param name="rectangle">Bounding rectangle of the text.</param>
        </member>
        <member name="M:FarPoint.Win.Text.DrawTextArgs.#ctor(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF)">
            <summary>
            Creates Draw Text arguments.
            </summary>
            <param name="g">Graphics device interface for painting the text.</param>
            <param name="text">Text to draw.</param>
            <param name="font">Font of the text.</param>
            <param name="foreColor">Color of the text.</param>
            <param name="rectangle">Bounding rectangle of the text.</param>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.KeepNewline">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.Graphics">
            <summary>
            Graphics device interface for painting the text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.Text">
            <summary>
            Text to draw.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.Font">
            <summary>
            Font of the text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.ForeColor">
            <summary>
            Color of the text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.Rectangle">
            <summary>
            Bounding rectangle of the text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.HorizontalAlignment">
            <summary>
            Horizontal alignment settings of the text relative to its bounding rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.VerticalAlignment">
            <summary>
             Vertical alignment settings of the text relative to its bounding rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.TextOrientation">
            <summary>
            Orientation of the text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.WordWrap">
            <summary>
            Whether the text is wrapped to multiple lines.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.Multiline">
            <summary>
            Whether to allow text to go to multiple lines.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.HotkeyPrefix">
            <summary>
            Hotkey prefix style of the text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.StringTrimming">
            <summary>
            Trimming effect of the text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.DrawRectHeight">
            <summary>
            Height of the drawing rectangle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.Adjust">
            <summary>
            Whether to adjust the bounding rectangle of the text when drawing.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.RotationAngle">
            <summary>
            Rotation angle of the text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.TextIndent">
            <summary>
            Number of pixels to indent the text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.RightToLeft">
            <summary>
            Whether layout is right-to-left.
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.GetPreferredSizeDirection">
            <summary>
            The direction where getPreferredSize is executed
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.KeepAlignment">
            <summary>
            Whether to keep alignment when cell size is small than text size
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.IsDiagonal">
            <summary>
            Whether this is for diagonal line
            </summary>
        </member>
        <member name="F:FarPoint.Win.Text.DrawTextArgs.AdjustTop">
            <summary>
            Adjustment for top
            </summary>
        </member>
        <member name="T:FarPoint.Win.UniscribeUtil">
            <summary>
              Defines the unsafe native methods base on Uniscribe API library.
              USP - Unicode Complex Script processor.
            </summary>
            <remarks>
              The UnisribeUtil class defines functions, which is given in Uniscribe SDK.
            </remarks>
        </member>
        <member name="T:FarPoint.Win.UniscribeUtil.Result">
            <summary>
              An enumeration defines a returned value of uniscribe API.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Result.Ok">
            <summary>
              The function performance is success.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Result.False">
            <summary>
              The function performance is fault.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Result.OutOfMemory">
            <summary>
              The memory is not enough.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Result.InvalidHandle">
            <summary>
              This is a invalid handle.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Result.ArgumentsInvalid">
            <summary>
              Some of the parameters is invalid.
            </summary>
        </member>
        <member name="T:FarPoint.Win.UniscribeUtil.Control">
            <summary>
              The Control struct provides itemization control flags to the Itemize method. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Control.ContextDigitsFlagMask">
            <summary>
              Defines a mask used to get or set the data of the ContextDigits property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Control.InvertPreBoundDirFlagMask">
            <summary>
              Defines a mask used to get or set the data of the InvertPreBoundDir property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Control.InvertPostBoundDirFlagMask">
            <summary>
              Defines a mask used to get or set the data of the InvertPostBoundDir property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Control.LinkStringBeforeFlagMask">
            <summary>
              Defines a mask used to get or set the data of the LinkStringBefore property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Control.LinkStringAfterFlagMask">
            <summary>
              Defines a mask used to get or set the data of the LinkStringAfter property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Control.NeutralOverrideFlagMask">
            <summary>
              Defines a mask used to get or set the data of the NeutralOverride property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Control.NumericOverrideFlagMask">
            <summary>
              Defines a mask used to get or set the data of the NumericOverride property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Control.LegacyBidiClassFlagMask">
            <summary>
              Defines a mask used to get or set the data of the LegacyBidiClass property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Control._defaultLanguage">
            <summary>
              Indicates the default language.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Control._flags">
            <summary>
              Indicates the flags.
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.Control.DefualtLanguage">
            <summary>
              Specifies the language to use when Unicode values are ambiguous. This is a LANGID, 
              including both a primary language and a sublanguage. Used by numeric processing to 
              select digit shape when DigitSubstitute of <see cref="T:FarPoint.Win.UniscribeUtil.State"/> is set. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.Control.ContextDigits">
            <summary>
              Specifies that national digits are chosen according to the nearest previous strong 
              text, rather than using DefaultLanguage.
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.Control.InvertPreBoundDir">
            <summary>
              By default, text at the start of the string is laid out as if it follows a strong 
              LTR character if the base embedding level is 0, and as if it follows a strong RTL 
              character if the base embedding level is 1.Set InvertPreBoundDir to change the 
              initial context to the opposite of the base embedding level. This member is for 
              GetCharacterPlacement legacy support.
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.Control.InvertPostBoundDir">
            <summary>
              By default, text at the end of the string is laid out as if it precedes strong text 
              of the same direction as the base embedding level. Set InvertPreBoundDir to change 
              the final context to the opposite of the base embedding level. This flag is for 
              GetCharacterPlacement legacy support. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.Control.LinkStringBefore">
            <summary>
              Causes the first character of the string to be shaped as if it were joined to a 
              previous character.
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.Control.LinkStringAfter">
            <summary>
              Causes the last character of the string to be shaped as if it were joined to a 
              following character.
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.Control.NeutralOverride">
            <summary>
              Causes all neutral characters in the string to be treated as if they were strong 
              characters of their enclosing embedding level. This effectively locks them in place, 
              and reordering occurs only between neutrals. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.Control.NumericOverride">
            <summary>
              Causes all numeric characters in the string to be treated as if they were strong 
              characters of their enclosing embedding level. This effectively locks them in place, 
              and reordering occurs only between numeric characters. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.Control.LegacyBidiClass">
            <summary>
              Causes the plus and minus characters to be treated as neutral characters, that is, 
              with no implied direction, and the slash character to be treated as a common separator. 
              
              Windows XP: The plus and minus characters are treated as European separators. 
            </summary>
        </member>
        <member name="T:FarPoint.Win.UniscribeUtil.State">
            <summary>
              The State structure is used both to initialize the Unicode algorithm state as an 
              input parameter to Script.Itemize, and is also a component of the analysis returned by 
              ScriptItemize. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.State.BidiLevelFlagMask">
            <summary>
              Defines a mask used to get or set the data of the BidiLevel property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.State.OverrideDirectionFlagMask">
            <summary>
              Defines a mask used to get or set the data of the OverrideDirection property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.State.InhibitSymSwapFlagMask">
            <summary>
              Defines a mask used to get or set the data of the InhibitSymSwap property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.State.CharShapeFlagMask">
            <summary>
              Defines a mask used to get or set the data of the CharShape property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.State.DigitSubstituteFlagMask">
            <summary>
              Defines a mask used to get or set the data of the DigitSubstitute property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.State.InhibitLigateFlagMask">
            <summary>
              Defines a mask used to get or set the data of the InhibitLigate property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.State.DisplayZWGFlagMask">
            <summary>
              Defines a mask used to get or set the data of the DisplayZWG property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.State.ArabicNumContextFlagMask">
            <summary>
              Defines a mask used to get or set the data of the ArabicNumContext property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.State.GcpClustersFlagMask">
            <summary>
              Defines a mask used to get or set the data of the GcpClusters property.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.State._flags">
            <summary>
              Save the flags of script state.
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.State.BidiLevel">
            <summary>
              The embedding level associated with all characters in this run according to the 
              Unicode bidirectional algorithm. When passed to ScriptItemize, should be initialized 
              to zero for an LTR base embedding level, or 1 for RTL. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.State.OverrideDirection">
            <summary>
              true if this level is an override level (LRO/RLO). In an override level, characters 
              are laid out in one direction only, either left-to-right or right-to-left. No 
              reordering of digits or strong characters of opposing direction takes place. Note 
              that this initial value is reset by LRE, RLE, LRO or RLO codes in the string. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.State.InhibitSymSwap">
            <summary>
              True if the shaping engine is to bypass mirroring of Unicode mirrored glyphs such 
              as brackets. Set by Unicode character ISS, cleared by ASS. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.State.CharShape">
            <summary>
              true if character codes in the Arabic Presentation Forms areas of Unicode should be 
              shaped. (Not implemented). 
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.State.DigitSubstitute">
            <summary>
              true if character codes U+0030 through U+0039 (European digits) are to be substituted 
              by national digits. Set by Unicode NADS, cleared by NODS. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.State.InhibitLigate">
            <summary>
              true if ligatures are not to be used in the shaping of Arabic or Hebrew characters. 
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.State.DisplayZWG">
            <summary>
              true if control characters are to be shaped as representational glyphs. (Typically, 
              control characters are shaped to the blank glyph and given a width of zero).
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.State.ArabicNumContext">
            <summary>
              true indicates prior strong characters were Arabic for the purposes of rule P0 as 
              discussed in The Unicode Standard, version 2.0. This should normally be set to true 
              before itemizing an RTL paragraph in an Arabic language, and false otherwise.
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.State.GcpClusters">
            <summary>
              For GetCharacterPlacement legacy support only. Initialize to true to request 
              ScriptShape to generate the pwLogClust array the same way as GetCharacterPlacement 
              does in Arabic and Hebrew Windows. Affects only Arabic and Hebrew items.
            </summary>
        </member>
        <member name="T:FarPoint.Win.UniscribeUtil.TextAnalyseFlags">
            <summary>
              Defines the flags for Text.Analyse.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.Password">
            <summary>
              Input string contains a single character to be duplicated iLength times.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.Tab">
            <summary>
              Expand tabs.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.Clip">
            <summary>
              Clip string at required width.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.Fit">
            <summary>
              Justify string to required width.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.DZWG">
            <summary>
              Provide representation glyphs for control characters.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.Fallback">
            <summary>
              Use fallback fonts.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.Break">
            <summary>
              Return break flags (character and word stops).
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.Glyphs">
            <summary>
              Generate glyphs, positions and attributes.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.RightToLeft">
            <summary>
              Base embedding level 1.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.GCP">
            <summary>
              Return missing glyphs and LogCLust with GetCharacterPlacement conventions.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.Hotkey">
            <summary>
              Replace &amp; with underline on subsequent codepoint.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.Metafile">
            <summary>
              Write items with ExtTextOutW Unicode calls, not glyphs.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.Link">
            <summary>
              Apply FE font linking/association to non-complex text.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.HideHotkey">
            <summary>
              Remove first &amp; from displayed string.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.HotkeyOnly">
            <summary>
              Display underline only.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.FullMeasure">
            <summary>
              Internal - calculate full width and out the number of chars can fit in required width.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.LPKANSIFALLBACK">
            <summary>
              Internal - enable FallBack for all LPK Ansi calls Except BiDi hDC calls
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.PIDX">
            <summary>
               Internal
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.LAYOUTRTL">
            <summary>
               Internal - Used when DC is mirrored
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.DONTGLYPH">
            <summary>
              Internal - Used only by GDI during metafiling - Use ExtTextOutA for positioning
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.TextAnalyseFlags.NOKASHIDA">
            <summary>
               Internal - Used by GCP to justify the non Arabic glyphs only.
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.SCRIPT_ANALYSIS.eScript">
            <summary>
             Shaping engine
            </summary>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.SCRIPT_ANALYSIS.RTLFlag">
            <summary>
            Rendering direction
            </summary>
            <value><c>true</c> if [RTL flag]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.SCRIPT_ANALYSIS.LayoutRTLFlag">
            <summary>
             Set for GCP classes ARABIC/HEBREW and LOCALNUMBER
            </summary>
            <value><c>true</c> if [layout RTL flag]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.SCRIPT_ANALYSIS.LinkBeforeFlag">
            <summary>
            Implies there was a ZWJ before this item
            </summary>
            <value><c>true</c> if [link before flag]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.SCRIPT_ANALYSIS.LinkAfterFlag">
            <summary>
            Implies there is a ZWJ following this item.
            </summary>
            <value><c>true</c> if [link after flag]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.SCRIPT_ANALYSIS.LogicalOrder">
            <summary>
            Set by client as input to ScriptShape/Place
            </summary>
            <value><c>true</c> if [logical order]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FarPoint.Win.UniscribeUtil.SCRIPT_ANALYSIS.NoGlyphIndexFlag">
            <summary>
            Generated by ScriptShape/Place - this item does not use glyph indices
            </summary>
            <value><c>true</c> if [no glyph index flag]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:FarPoint.Win.UniscribeUtil.Tab">
            <summary>
              Defines the tab positions for Text.Analyse methods.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Tab._tabStops">
            <summary>
              Equals the length of the TabStops.(Required by Uniscribe API)
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Tab.Scale">
            <summary>
              Scale factor for iTabOrigin and pTabStops entries.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Tab.TabStops">
            <summary>
              Each entry specifies a tab stop position. 
              Positive values give near-edge alignment, while negative values give far-edge alignment. 
            </summary>
        </member>
        <member name="F:FarPoint.Win.UniscribeUtil.Tab.TabOrigin">
            <summary>
              Initial offset for tab stops. 
            </summary>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.Tab.SafeNative">
            <summary>
              Invokes before it is passed to Uniscribe API.
            </summary>
        </member>
        <member name="T:FarPoint.Win.UniscribeUtil.DatumHelper">
            <summary>
            Defines some method to help manage the data of uniscribe.
            </summary>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.GetFlag(System.UInt16,System.UInt16)">
            <summary>
            Internal method helps to get the flag form a flags ushort value.
            </summary>
            <param name="flags"><b>ushort</b> contains the flags</param>
            <param name="flagMask"><b>ushort</b> indicates the flag mask</param>
            <returns>Returns the flag.</returns>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.GetFlag(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Internal method helps to get the flag form a flags ushort value.
            </summary>
            <param name="flags"><b>ushort</b> contains the flags</param>
            <param name="flagMask"><b>ushort</b> indicates the flag mask</param>
            <param name="param">Whether value</param>
            <returns>Returns the flag.</returns>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.GetFlag(System.Int16,System.Int16)">
            <summary>
            Internal method helps to get the flag form a flags ushort value.
            </summary>
            <param name="flags"><b>short</b> contains the flags</param>
            <param name="flagMask"><b>short</b> indicates the flag mask</param>
            <returns>Returns the flag.</returns>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.GetFlag(System.UInt64,System.UInt64)">
            <summary>
            Internal method helps to get the flag form a flags ushort value.
            </summary>
            <param name="flags"><b>UInt64</b> contains the flags</param>
            <param name="flagMask"><b>UInt64</b> indicates the flag mask</param>
            <returns>Returns the flag.</returns>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.GetFlag(System.Byte,System.Byte)">
            <summary>
            Internal method helps to get the flag form a flags ushort value.
            </summary>
            <param name="flags"><b>byte</b> contains the flags</param>
            <param name="flagMask"><b>byte</b> indicates the flag mask</param>
            <returns>Returns the flag.</returns>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.GetFlag(System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            Gets the flag.
            </summary>
            <param name="flags">Flags</param>
            <param name="flagMask">Flag mask</param>
            <param name="param">Whether value</param>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.SetFlag(System.UInt16@,System.UInt16,System.Boolean)">
            <summary>
            Internal method helps to set a value to the flags.
            </summary>
            <param name="flags"><b>ushort</b> contains the flags</param>
            <param name="flagMask">A <b>ushort</b> indicates the flag mask</param>
            <param name="value">A <b>bool</b> value indicates the value</param>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.SetFlag(System.UInt16@,System.UInt16,System.UInt16)">
            <summary>
            Internal method helps to set a value to the flags.
            </summary>
            <param name="flags"><b>ushort</b> contains the flags</param>
            <param name="flagMask"><b>ushort</b> indicates the flag mask</param>
            <param name="value"><b>ushort</b> value indicates the value</param>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.SetFlag(System.Int16@,System.Int16,System.Boolean)">
            <summary>
              Internal method helps to set a value to the flags.
            </summary>
            <param name="flags"><b>short</b> contains the flags</param>
            <param name="flagMask"><b>short</b> indicates the flag mask</param>
            <param name="value"><b>bool</b> value indicates the value</param>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.SetFlag(System.UInt64@,System.UInt64,System.Boolean)">
            <summary>
            Internal method helps to set a value to the flags.
            </summary>
            <param name="flags"><b>UInt64</b> contains the flags</param>
            <param name="flagMask"><b>UInt64</b> indicates the flag mask</param>
            <param name="value"><b>bool</b> value indicates the value</param>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.SetFlag(System.Byte@,System.Byte,System.Boolean)">
            <summary>
            Internal method helps to set a value to the flags.
            </summary>
            <param name="flags"><b>byte</b> contains the flags</param>
            <param name="flagMask"><b>byte</b> indicates the flag mask</param>
            <param name="value"><b>bool</b> value indicates the value</param>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.DatumHelper.SetFlag(System.UInt64@,System.UInt64,System.UInt64)">
            <summary>
            Sets the flag.
            </summary>
            <param name="flags">Flags</param>
            <param name="flagMask">Flag mask</param>
            <param name="value">Value</param>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.TextOutL2RToScreen(System.IntPtr,System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Text.HotkeyPrefix)">
            <summary>
            Displays text to screen out left to right.
            </summary>
            <param name="hdc">HDC</param>
            <param name="bounds">Bounds</param>
            <param name="text">Text</param>
            <param name="length">Length</param>
            <param name="hotkeyEffect">Hotkey prefix</param>
            <remarks></remarks>
        </member>
        <member name="M:FarPoint.Win.UniscribeUtil.TextOutR2LToScreen(System.IntPtr,System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Text.HotkeyPrefix,System.Int32)">
            <summary>
            Displays text to screen out right to left.
            </summary>
            <param name="hdc">HDC</param>
            <param name="bounds">Bounds</param>
            <param name="text">Text</param>
            <param name="length">Length</param>
            <param name="hotkeyEffect">Hotkey prefix</param>
            <param name="embeddingLevel">Number of levels of embedding</param>
        </member>
        <member name="T:FarPoint.Win.UnlockDialog">
            <summary>
            Represents the system unlock dialog.
            </summary>
        </member>
        <member name="F:FarPoint.Win.UnlockDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FarPoint.Win.UnlockDialog.#ctor">
            <summary>
            Creates a new unlock dialog.
            </summary>
        </member>
        <member name="M:FarPoint.Win.UnlockDialog.LocalizeGUIStrings(System.Boolean)">
            <summary>
            Localize all GUI strings of this instance
            </summary>
        </member>
        <member name="M:FarPoint.Win.UnlockDialog.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates a new unlock dialog with the instance and whether already purchased.
            </summary>
            <param name="instance">Object containing the instance</param>
            <param name="alreadyPurchased">Whether the product has been already purchased</param>
        </member>
        <member name="M:FarPoint.Win.UnlockDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FarPoint.Win.UnlockDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FarPoint.Win.VisualStyleTheme">
            <summary>
            Represents a visual style (Windows XP theme) handle from uxtheme.dll.
            </summary>
        </member>
        <member name="F:FarPoint.Win.VisualStyleTheme.ThemeChangedEventAddress">
            <summary>
            Inditity of event pipe that will be raised whenever a theme changes. 
            </summary>
        </member>
        <member name="E:FarPoint.Win.VisualStyleTheme.ThemeChanged">
            <summary>Raises when system theme is changed</summary>
        </member>
        <member name="T:FarPoint.Win.VisualStyleTheme.Theme">
            <summary>
            hTheme object wrapper
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyleTheme.#cctor">
            <summary>
            Internal use only. Creates a visual style (XP theme).
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyleTheme.Finalize">
            <summary>
            Internal use only. Handles a visual style (XP theme).
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyleTheme.#ctor(System.String)">
            <summary>
            Creates a new visual style (XP theme).
            </summary>
            <param name="classList">Class list to find theme information</param>
        </member>
        <member name="P:FarPoint.Win.VisualStyleTheme.ClassList">
            <summary>
            Gets the class list for finding the visual style (XP theme) information.
            </summary>
        </member>
        <member name="P:FarPoint.Win.VisualStyleTheme.IsThemeActive">
            <summary>
            Gets whether visual styles (XP themes) are active.
            </summary>
        </member>
        <member name="P:FarPoint.Win.VisualStyleTheme.hTheme">
            <summary>
            Gets the visual style (XP theme) handle obtained from uxtheme.dll.
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyleTheme.GetTheme(System.Boolean)">
            <summary>
            Gets the visual style (Theme object) for this instance.
            </summary>
            <param name="create">True to force creation of the Theme object or add a reference
            to an existing Theme object, False to query whether a Theme exists</param>
            <returns>Theme object for this instance, or null if create is false and
            there is no Theme object for this instance created yet.</returns>
        </member>
        <member name="M:FarPoint.Win.VisualStyleTheme.CloseTheme(FarPoint.Win.VisualStyleTheme.Theme,System.Boolean)">
            <summary>
            Releases this instance's reference to the Theme object, and closes the theme handle
            and removes the Theme object if this is the last reference to the Theme object.
            </summary>
            <param name="theme">Theme to close</param>
            <param name="forceRelease">if set to <c>true</c>, the theme must be closed.</param>
        </member>
        <member name="M:FarPoint.Win.VisualStyleTheme.OnThemeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the ThemeChanged event from the ThemeChangedWindow and raises the ThemeChanged event for clients.
            </summary>
            <param name="sender">Null unless VisualStyleTheme is being initialized</param>
            <param name="e">EventArgs.Empty</param>
        </member>
        <member name="M:FarPoint.Win.VisualStyleTheme.Dispose">
            <summary>
            Internal use only. Disposes a visual style (XP theme).
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyleTheme.Dispose(System.Boolean)">
            <summary>
            Internal use only. Frees system resources from a visual style (XP theme).
            </summary>
        </member>
        <member name="E:FarPoint.Win.VisualStyleTheme.ThemeMessageFilter.ThemeChanged">
            <summary>
            Internal use only. Handler for theme changed event.
            </summary>
        </member>
        <member name="M:FarPoint.Win.VisualStyleTheme.ThemeMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Filters out a message before it is dispatched.
            </summary>
            <param name="m">The message to be dispatched. You cannot modify this message.</param>
            <returns>
            true to filter the message and stop it from being dispatched; false to allow the message to continue to the next filter or control.
            </returns>
        </member>
        <member name="M:FarPoint.Win.VisualStyleTheme.Clone">
            <summary>
            Internal use only. Makes a clone of the visual style (XP theme).
            </summary>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.FpVisualStyleRenderer">
            <summary>
            Represents a renderer for drawing and getting information about a System.Windows.Forms.VisualStyles.VisualStyleElement.
            </summary>
        </member>
        <member name="M:FarPoint.Win.FpVisualStyleRenderer.#ctor(System.Windows.Forms.VisualStyles.VisualStyleElement)">
            <summary>
            Initializes a new instance of FarPoint.Win.FpVisualStyleRenderer.
            </summary>
            <param name="element">A System.Windows.Forms.VisualStyles.VisualStyleElement that this FarPoint.Win.FpVisualStyleRenderer will represent.</param>
        </member>
        <member name="M:FarPoint.Win.FpVisualStyleRenderer.DrawBackground(System.Drawing.IDeviceContext,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of FarPoint.Win.FpVisualStyleRenderer.
            </summary>
            <param name="idc">The System.Drawing.IDeviceContext used to draw the background image.</param>
            <param name="bounds">A System.Drawing.Rectangle in which the background image is drawn.</param>
        </member>
        <member name="M:FarPoint.Win.FpVisualStyleRenderer.GetInteger(System.Windows.Forms.VisualStyles.IntegerProperty)">
            <summary>
            Returns the value of the specified integer property for the current visual style element.
            </summary>
            <param name="prop">One of the System.Windows.Forms.VisualStyles.IntegerProperty values that specifies which property value to retrieve for the current visual style element.</param>
            <returns></returns>
        </member>
        <member name="T:FarPoint.Win.XmlTypeConverter">
            <summary>
            Type converter for objects which implement ISerializeSupport (or other related serialization interface) which converts objects to and from their xml representations.
            </summary>
        </member>
        <member name="M:FarPoint.Win.XmlTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the specified type can be converted to a border object.
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <param name="sourceType">Type</param>
            <returns>True if sourceType is String, false otherwise.</returns>
        </member>
        <member name="T:FarPoint.BugWorkarounds.Bug20421">
            <summary>
            Workaround for bug 20421 -- PropertyGrid control copying objects when we don't want it to.
            </summary>
        </member>
        <member name="M:FarPoint.BugWorkarounds.Bug20421.IsPropertyGridCopyingMe">
            <summary>
            Returns true if the .Net 2.0 PropertyGrid control is calling the Clone method to copy
            the object from its MergePropertyDescriptor.CopyValue method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.Licenses.AboutBoxForm">
            <summary>
              Represents the base class for all AboutBoxForm.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.AboutBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.AboutBoxForm.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:GrapeCity.Licenses.AboutBoxForm"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.AboutBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GrapeCity.Licenses.AboutBoxForm.InitializeComponent">
            <summary>
              Required method for Designer support - do not modify
              the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.CopyrightYear">
            <summary>
              Gets the product copyrighted years.
            </summary>
            <value>
              A <b>string</b> indicates the product copyrighted years.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.Title">
            <summary>
              Gets the text that is title of dialog.
            </summary>
            <value>
              A <b>string</b> indicates the title of dialog.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.ProductSeries">
            <summary>
              Gets the text that is the product series name.
            </summary>
            <value>
              A <b>string</b> indicates the product series name.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.ProductName">
            <summary>
              Gets the text that is the product name.
            </summary>
            <value>
              A <b>string</b> indicates the product name.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.Copyright">
            <summary>
              Gets the copyright string.
            </summary>
            <value>
              A <b>string</b> indicates the copyright string.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.WebURL">
            <summary>
              Gets or the product URL of web page.
            </summary>
            <value>
              A <b>string</b> indicates the product URL of web page.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.VersionPrompt">
            <summary>
              Gets the version prompt.
            </summary>
            <value>
              A <b>string</b> indicates the version prompt.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.FileVersionPrompt">
            <summary>
              Gets the file version prompt.
            </summary>
            <value>
              A <b>string</b> indicates the file version prompt.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.FileVersion">
            <summary>
              Gets the file version.
            </summary>
            <value>
              A <b>string</b> indicates the file version.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.AssemblyVersionPrompt">
            <summary>
              Gets the assembly version prompt.
            </summary>
            <value>
              A <b>string</b> indicates the assembly version prompt.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.AssemblyVersion">
            <summary>
              Gets the assembly version.
            </summary>
            <value>
              A <b>string</b> indicates the assembly version.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.ManufacturerName">
            <summary>
              Gets the name of the company.
            </summary>
            <value>
              A <b>string</b> indicates the name of the company.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.CompanyAddress">
            <summary>
              Gets the address of the company.
            </summary>
            <value>
              A <b>string</b> indicates the address of the company.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.LawInformation">
            <summary>
              Gets the caption of LawInformation label.
            </summary>
            <value>
              A <b>string</b> indicates the caption of LawInformation.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.AboutBoxForm.OKButtonCaption">
            <summary>
              Gets the caption of OK button.
            </summary>
            <value>
              A <b>string</b> indicates the caption of OK button.
            </value>
        </member>
        <member name="M:GrapeCity.Licenses.AboutBoxForm.InitializeLocallizedInformations">
            <summary>
              Initializes the localized information.
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.AboutBoxForm.OnLinkLabelWebHomeLinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
              Handles the LinkClicked event of the _linkLabelWebHome control.
            </summary>
            <param name="sender">
              An <b>object</b> indicates the event sender.
            </param>
            <param name="e">
              The <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:GrapeCity.Licenses.PowerToolsLicense">
            <summary>
              Represents a license of a PowerTools component.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicense._usageMode">
            <summary>
              Indicates when the license is used.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicense._licenseKey">
            <summary>
              Indicates the product key of the license.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicense._exist">
            <summary>
              Indicates whether the registry entry is exist or not.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicense._valid">
            <summary>
              Indicates whether the license is valid or not.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicense._fullFunction">
            <summary>
              Indicates whether the license is a full function license or not.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicense._expired">
            <summary>
              Indicates whether the license is expired or not.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicense._daysLeft">
            <summary>
              Indicates the remaining available days of a trial version.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicense._compiledDate">
            <summary>
              Indicates the compiled date of the user assembly.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicense._computerName">
            <summary>
              Indicates the name of the computer which build the user assembly. 
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicense.#ctor(System.ComponentModel.LicenseUsageMode)">
            <summary>
              Initializes a new instance of the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> class. 
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicense.#ctor(System.ComponentModel.LicenseUsageMode,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.DateTime,System.String,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> class. 
            </summary>
            <param name="usageMode">
              A <see cref="T:System.ComponentModel.LicenseUsageMode"/> value indicates when the license is used.
            </param>
            <param name="licenseKey">
              A <c>string</c> value indicates the product key of the license.
            </param>
            <param name="exist">
              A <c>bool</c> value indicates whether the registry entry is exist or not.
            </param>
            <param name="valid">
              A <c>bool</c> value indicates whether the license is valid or not.
            </param>
            <param name="fullFunction">
              A <c>bool</c> value indicates whether the license is a full function license or not.
            </param>
            <param name="expired">
              A <c>bool</c> value indicates whether the license is expired or not.
            </param>
            <param name="daysLeft">
              An <c>int</c> value indicates the remaining available days of a trial version.
            </param>
            <param name="compiledDate">
              A <see cref="T:System.DateTime"/> value indicates the compiled date of the user assembly.
            </param>
            <param name="computerName">
              A <c>string</c> value indicates the name of the computer which build the user assembly. 
            </param>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicense.Dispose">
            <summary>
              Releases all resources used by this <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>. It is unused.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.PowerToolsLicense.UsageMode">
            <summary>
              Gets a <see cref="T:System.ComponentModel.LicenseUsageMode"/> value that indicates when the license is used.
            </summary>
            <value>
              A <see cref="T:System.ComponentModel.LicenseUsageMode"/> value indicates the license is used in Design-Time or Run-Time.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.PowerToolsLicense.LicenseKey">
            <summary>
              Gets a <c>string</c> value that indicates the product key of the license.
            </summary>
            <value>
              A <c>string</c> indicates the product key.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.PowerToolsLicense.Exist">
            <summary>
              Gets a <c>bool</c> value that indicates whether the registry entry is exist or not.
            </summary>
            <value>
              <c>true</c> if the corresponding registry entry is exist; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.PowerToolsLicense.Valid">
            <summary>
              Gets a <c>bool</c> value that indicates whether the license is valid or not.
            </summary>
            <value>
              <c>true</c> if the license is valid; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.PowerToolsLicense.FullFunction">
            <summary>
              Gets a <c>bool</c> value that indicates whether the license is a full function license or not.
            </summary>
            <value>
              <c>true</c> if the license is a product license; <c>false</c> if the license is a trial license.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.PowerToolsLicense.Expired">
            <summary>
              Gets a <c>bool</c> value that indicates whether the trial license is expired or not.
            </summary>
            <value>
              <c>true</c> if the license is expired; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.PowerToolsLicense.DaysLeft">
            <summary>
              Gets an <c>int</c> value that indicates the remaining available days of a trial version.
            </summary>
            <value>
              An <c>int</c> value indicates the remaining available days if this is a trial license.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.PowerToolsLicense.CompiledDate">
            <summary>
              Gets a <see cref="T:System.DateTime"/> value that indicates the compiled date of the user assembly.
            </summary>
            <value>
              The date when the user build an assembly which use a PowerTools component.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.PowerToolsLicense.ComputerName">
            <summary>
              Gets a <c>bool</c> value that indicates the name of the computer which build the user assembly. 
            </summary>
            <value>
              The name of the computer which the user use to make a build.
            </value>
        </member>
        <member name="P:GrapeCity.Licenses.PowerToolsLicense.IsEmpty">
            <summary>
              Gets a <c>bool</c> value that indicates whether the license is empty or not. 
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicense.CompareTo(GrapeCity.Licenses.PowerToolsLicense)">
            <summary>
              Compare to another license.
            </summary>
            <param name="other">
              The license to compare.
            </param>
            <returns>
              1 means this license can be used longer than the other one.
              0 means these two licenses have same left days.
              -1 means this license can be used shorter than the other one.
            </returns>
        </member>
        <member name="T:GrapeCity.Licenses.PowerToolsLicenseProvider">
            <summary>
              Represents a license provider of a PowerTools component.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicenseProvider.MAXDAYSDESIGNTIME">
            <summary>
              The max days to use at design time.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicenseProvider.MAXDAYSDESIGNTIMEFORSP7">
            <summary>
              The max days to use at design time, it is special for spread .net 7.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicenseProvider.MAXDAYSRUNTIME">
            <summary>
              The max days to use at run time.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicenseProvider.MAXINTERVAL">
            <summary>
              The max interval days for design time usage.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicenseProvider._showDialogDummy">
            <summary>
              Indicates a instance of <see cref="T:GrapeCity.Licenses.PowerToolsLicenseProvider.ShowDialogDummy"/>, used to indicate if it is the first time to show dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicenseProvider._licenseDataCacheForAppDomain">
            <summary>
              Cache the license data for AppDomain license file. Use Hashtable because it is Thread Safe.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicenseProvider._licenseDataCacheForAssemblies">
            <summary>
              Cache the license data for the assemblies in current AppDomain. Use Hashtable because it is Thread Safe.
            </summary>
        </member>
        <member name="T:GrapeCity.Licenses.PowerToolsLicenseProvider.ShowDialogDummy">
            <summary>
              Represents a dummy to show dialog.
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.ShowDialogDummy.#ctor(GrapeCity.Licenses.PowerToolsLicenseProvider,System.Type,GrapeCity.Licenses.ProductInfo,GrapeCity.Licenses.PowerToolsLicense@,System.Reflection.Assembly,System.Object)">
            <summary>
              Initialize a new instance of <see cref="T:GrapeCity.Licenses.PowerToolsLicenseProvider.ShowDialogDummy"/>.
            </summary>
            <param name="provider">
              The <see cref="T:GrapeCity.Licenses.PowerToolsLicenseProvider"/> of the dummy.
            </param>
            <param name="componentType">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <param name="license">
              The <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> to display by the license dialog.
            </param>
            <param name="licenseLocation">
              The <see cref="T:System.Reflection.Assembly"/> who contains the license.
            </param>
            <param name="instance">
              A component that requests the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
        </member>
        <member name="T:GrapeCity.Licenses.PowerToolsLicenseProvider.LicenseData">
            <summary>
              Represents the binary data for <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.LicenseData.#ctor(GrapeCity.Licenses.PowerToolsLicense)">
            <summary>
              Initialize a new instance of <see cref="T:GrapeCity.Licenses.PowerToolsLicenseProvider.LicenseData"/>.
            </summary>
            <param name="license">
              The <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> which want to convert to binary data.
            </param>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.LicenseData.#ctor(System.String)">
            <summary>
              Initialize a new instance of <see cref="T:GrapeCity.Licenses.PowerToolsLicenseProvider.LicenseData"/>.
            </summary>
            <param name="encryptedData">
              A <see cref="T:System.String"/> contains the binary data for <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> in base64 format.
            </param>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.LicenseData.GetData">
            <summary>
              Get the binary data.
            </summary>
            <returns>
              A <see cref="T:System.String"/> contains the binary data in base64 format.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.LicenseData.GetLicense">
            <summary>
              Get the license.
            </summary>
            <returns>
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> stored in the binary data.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
              Returns a license for the instance of the component, if one is available.
            </summary>
            <param name="context">
              A <see cref="T:System.ComponentModel.LicenseContext"/> that specifies where you can use the licensed object.
            </param>
            <param name="type">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="instance">
              A component that requests the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="allowExceptions">
              <c>true</c> if a <see cref="T:System.ComponentModel.LicenseException"/> should be thrown when a component cannot be granted a license; otherwise, <c>false</c>.
            </param>
            <returns>
              A valid <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>. If this method cannot find a valid <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>, it returns <c>null</c>.
            </returns>
        </member>
        <member name="P:GrapeCity.Licenses.PowerToolsLicenseProvider.DefaultProductInfo">
            <summary>
              Gets the default product information. The info will be used in <see cref="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetDesignTimeLicense(System.ComponentModel.LicenseContext,System.Type,GrapeCity.Licenses.ProductInfo@,GrapeCity.Licenses.PowerToolsLicense@)"/>.
            </summary>
            <value>
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the default product info.
              It is used in <see cref="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetDesignTimeLicense(System.ComponentModel.LicenseContext,System.Type,GrapeCity.Licenses.ProductInfo@,GrapeCity.Licenses.PowerToolsLicense@)"/>. If you override <see cref="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetDesignTimeLicense(System.ComponentModel.LicenseContext,System.Type,GrapeCity.Licenses.ProductInfo@,GrapeCity.Licenses.PowerToolsLicense@)"/> and write you logic, this value could be null.
            </value>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.AllowShowDialog(GrapeCity.Licenses.PowerToolsLicense)">
            <summary>
              Determines whether allows to show the dialog or not.
            </summary>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the final license for the specified component.
            </param>
            <returns>
              <c>true</c> if the dialog can be shown; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.ShouldShowDialog(GrapeCity.Licenses.PowerToolsLicense)">
            <summary>
              Determines whether should show the dialog or not for the specified license.
            </summary>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the final license for the specified component.
            </param>
            <returns>
              <c>true</c> to show dialog; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.CreateShowDialogDummy(System.Type,GrapeCity.Licenses.ProductInfo,GrapeCity.Licenses.PowerToolsLicense,System.Reflection.Assembly,System.Object)">
            <summary>
            Create a flag to indicate the license dialog is shown
            </summary>
            <param name="componentType">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the final license for the specified component.
            </param>
            <param name="licenseLocation">
              A <see cref="T:System.Reflection.Assembly"/> indicates the location of the <paramref name="license"/>. For Run-Time, it is the assembly where the license resource embeded; for Design-Time, it should be null.
            </param>
            <param name="instance">
              A component that requests the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <returns>Return the flag to indicate the license dialog is shown</returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.IsShowDialogDummyCreated(GrapeCity.Licenses.PowerToolsLicense)">
            <summary>
            Indicates whether the license dialog has been shown before
            </summary>
            <returns>Return true if the license dialog is shown; Else return false</returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.ShowDesignTimeLicenseDialog(System.Type,GrapeCity.Licenses.ProductInfo,GrapeCity.Licenses.PowerToolsLicense,System.Object)">
            <summary>
              Show the license dialog for design-time.
            </summary>
            <param name="componentType">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the final license for the specified component.
            </param>
            <param name="instance">
              A component that requests the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.ShowRunTimeLicenseDialog(System.Type,GrapeCity.Licenses.PowerToolsLicense,System.Reflection.Assembly,System.Object)">
            <summary>
              Show the license dialog for run-time.
            </summary>
            <param name="componentType">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the final license for the specified component.
            </param>
            <param name="licenseLocation">
              A <see cref="T:System.Reflection.Assembly"/> indicates the location of the <paramref name="license"/>. For Run-Time, it is the assembly where the license resource embeded; for Design-Time, it should be null.
            </param>
            <param name="instance">
              A component that requests the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.ShouldEndApplication(GrapeCity.Licenses.PowerToolsLicense)">
            <summary>
              Determines whether should end the current application.
            </summary>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the final license for the specified component.
            </param>
            <returns>
              <c>true</c> to end application; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.EndApplication(System.Type,GrapeCity.Licenses.PowerToolsLicense)">
            <summary>
              End the current application if the license is invaild. By default, a <see cref="T:System.ComponentModel.LicenseException"/> will be thrown.
            </summary>
            <param name="componentType">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the invalid license.
            </param>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetEndApplicationMessage(GrapeCity.Licenses.PowerToolsLicense,System.Type)">
            <summary>
              Get the message that will be shown when end the application.
            </summary>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the invalid license.
            </param>
            <param name="componentType">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <rreturns>
              The message to display. By default it is the message of <see cref="T:System.ComponentModel.LicenseException"/>.
            </rreturns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.OnError(System.Int32,System.Type,System.Boolean)">
            <summary>
              Process the error when check license.
            </summary>
            <param name="errorCode">
              An <c>int</c> value indicates the error code.
            </param>
            <param name="type">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="allowExceptions">
              <c>true</c> if a <see cref="T:System.ComponentModel.LicenseException"/> should be thrown when a component cannot be granted a license; otherwise, <c>false</c>.
            </param>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.ShowAboutBox(System.Type)">
            <summary>
              Show about box for the specified component.
            </summary>
            <param name="componentType">
              The <see cref="T:System.Type"/> of the component.
            </param>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.VerifyDesignTimeEnvironment">
            <summary>
              Verify the environment to get whether the component is in design-time. 
            </summary>
            <returns>
              <c>true</c> if it is in design-time; otherwise <c>false</c>.
            </returns>
            <remarks>
              In DesignTime, because of IDE bugs, some component are not created with DesigntimeLicenseContext. 
              For example, when drag a control from Win Forms DataSource tool window, or use a web control in a ASP.NET Template.
              This may cause the control do run-time license validation and found that there is no license.
              To resolve this problem, we will check the environment and decide whether to do design-time license validation again.
            </remarks>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetDesignTimeLicense(System.ComponentModel.LicenseContext,System.Type,GrapeCity.Licenses.ProductInfo@,GrapeCity.Licenses.PowerToolsLicense@)">
            <summary>
              Get the license for Design-Time. You can override this method to implement your own logic, and call <see cref="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetDesignTimeLicenseFromRegistry(System.ComponentModel.LicenseContext,GrapeCity.Licenses.ProductInfo,GrapeCity.Licenses.PowerToolsLicense@)"/> in your code.
            </summary>
            <param name="context">
              A <see cref="T:System.ComponentModel.LicenseContext"/> that specifies where you can use the licensed object.
            </param>
            <param name="componentType">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the final license for the specified component.
            </param>
            <returns>
              An <c>int</c> value indicates the error code. 0 is success.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetDesignTimeLicenseFromRegistry(System.ComponentModel.LicenseContext,GrapeCity.Licenses.ProductInfo,GrapeCity.Licenses.PowerToolsLicense@)">
            <summary>
              Get the license for Design-Time.
            </summary>
            <param name="context">
              A <see cref="T:System.ComponentModel.LicenseContext"/> that specifies where you can use the licensed object.
            </param>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the license for the specified component.
            </param>
            <returns>
              An <c>int</c> value indicates the error code. 0 is success.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetRunTimeLicense(System.ComponentModel.LicenseContext,System.Type,GrapeCity.Licenses.PowerToolsLicense@,System.Reflection.Assembly@)">
            <summary>
              Get the license for Run-Time. You can override this method to implement your own logic, and call <see cref="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetRunTimeLicenseFromAppDomain(GrapeCity.Licenses.ProductInfo,System.String)"/> or <see cref="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetRunTimeLicenseFromAssembly(System.Reflection.Assembly,GrapeCity.Licenses.ProductInfo,System.String)"/> in your code.
            </summary>
            <param name="context">
              A <see cref="T:System.ComponentModel.LicenseContext"/> that specifies where you can use the licensed object.
            </param>
            <param name="componentType">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the license for the specified component.
            </param>
            <param name="licenseLocation">
              A <see cref="T:System.Reflection.Assembly"/> indicates the location of the <paramref name="license"/>.
            </param>
            <returns>
              An <c>int</c> value indicates the error code. 0 is success.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetRunTimeLicenseFromAppDomain(GrapeCity.Licenses.ProductInfo,System.String)">
            <summary>
              Get the license for Run-Time from current <see cref="T:System.AppDomain"/>.
            </summary>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <param name="licensedComponentType">
              A <see cref="T:System.String"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <returns>
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> for the specified component. It could be null.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetRunTimeLicenseFromAssembly(System.Reflection.Assembly,GrapeCity.Licenses.ProductInfo,System.String)">
            <summary>
              Get the license for Run-Time from a specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> where to retrieve the license.
            </param>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <param name="licensedComponentType">
              A <see cref="T:System.String"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <returns>
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> for the specified component. It could be null.
            </returns>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicenseProvider.PackageCodeCharacterCount">
            <summary>
            Current package code is ushort and can be convert to 4-characters string (hex)
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetRuntimePackagecodeString(GrapeCity.Licenses.ProductInfo)">
            <summary>
            Get the package code string from product info
            </summary>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <returns>Returns the package code string</returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.GetRuntimePackagecodeString(System.String)">
            <summary>
            Get the package code string from license Data
            </summary>
            <param name="licenseRawString">
              A string indciates the license resources
            </param>
            <returns>Returns the package code string</returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.SaveLicenseData(System.ComponentModel.LicenseContext,GrapeCity.Licenses.ProductInfo,System.Type,GrapeCity.Licenses.PowerToolsLicenseProvider.LicenseData)">
            <summary>
              Save the license data into <see cref="T:System.ComponentModel.LicenseContext"/>. The license will be saved at Design-Time and loaded at Run-Time.
            </summary>
            <param name="context">
              The <see cref="T:System.ComponentModel.LicenseContext"/> to save license data.
            </param>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <param name="componentType">
              The <see cref="T:System.Type"/> of the component who own the license.
            </param>
            <param name="licenseData">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicenseProvider.LicenseData"/> indicates the binary format for a license.
            </param>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.RemoveVersionInformation(System.String)">
            <summary>
            Removes the "v50, Version=6.0.2009.0728" string from type's assemblyqualifiedname
            </summary>
            <param name="assemblyQualifiedName">Indicates the type's assemblyqualifiedname </param>
            <returns>Returns the type string which ignored the version information</returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.DeserializeLicenseStream(System.IO.Stream,System.String,System.String)">
            <summary>
            Try to deserialze the license hashtable from the resource stream
            </summary>
            <param name="stream">
              The <see cref="T:System.IO.Stream"/> who contains the license data. It is created by <see cref="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)"/>.
            </param>
            <param name="fileName">
              A <c>string</c> indicates the file name of the ".license" file. It is used as a crypto key.
            </param>
            <param name="licensedComponentType">
              The <see cref="T:System.String"/> of the component who own the license.
            </param>
            <returns>Returns the license data</returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.UnwrapGcLicenseString(System.String,System.String@)">
            <summary>
            Unwrap license string from raw data
            </summary>
            <param name="licensedComponentType">Indicates the licensed component type</param>
            <param name="rawLicenseString">Indicates the license string from the licese hashtable value</param>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.RetriveLicenseData(System.IO.Stream,System.String,GrapeCity.Licenses.ProductInfo,System.String)">
            <summary>
            Gets the license data from stream
            </summary>
            <param name="stream">
              The <see cref="T:System.IO.Stream"/> who contains the license data. It is created by <see cref="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)"/>.
            </param>
            <param name="fileName">
              A <c>string</c> indicates the file name of the ".license" file. It is used as a crypto key.
            </param>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <param name="licensedComponentType">
              The <see cref="T:System.String"/> of the component who own the license.
            </param>
            <returns>
              Returns the license key and value.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.LoadLicenseData(System.IO.Stream,System.String,GrapeCity.Licenses.ProductInfo,System.String,System.Collections.IDictionary)">
            <summary>
              Load the license data from a <see cref="T:System.IO.Stream"/>. The license data is saved at Design-Time and loaded at Run-Time.
            </summary>
            <param name="stream">
              The <see cref="T:System.IO.Stream"/> who contains the license data. It is created by <see cref="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)"/>.
            </param>
            <param name="fileName">
              A <c>string</c> indicates the file name of the ".license" file. It is used as a crypto key.
            </param>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <param name="licensedComponentType">
              The <see cref="T:System.String"/> of the component who own the license.
            </param>
            <param name="licenseDataCache">
              A cache to save license data. The key of the cache is component type and the value is a LicenseData. It is used to improve performance.
            </param>
            <returns>
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicenseProvider.LicenseData"/> indicates the binary format for a license.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.RunActivateTool(GrapeCity.Licenses.ProductInfo)">
            <summary>
              Run the PowerTools activate tool for the specified product.
            </summary>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates whose activate tool should be run.
            </param>
        </member>
        <member name="F:GrapeCity.Licenses.PowerToolsLicenseProvider._designtimeContext">
            <summary>
              Cache a license context for create instance with designtime license validation.
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.CreateInstanceWithDesigntime(System.Type)">
            <summary>
              Creates an instance of the specified type and do designtime license validation for it.
            </summary>
            <param name="type">
              A <see cref="T:System.Type"/> that represents the type to create.
            </param>
            <returns>
              An instance of the specified type.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.PowerToolsLicenseProvider.CreateInstanceWithDesigntime(System.Type,System.Object[])">
            <summary>
              Creates an instance of the specified type and do designtime license validation for it.
            </summary>
            <param name="type">
              A <see cref="T:System.Type"/> that represents the type to create.
            </param>
            <param name="args">
              An array of type <see cref="T:System.Object"/> that represents the arguments for the type.
            </param>
            <returns>
              An instance of the specified type.
            </returns>
        </member>
        <member name="T:GrapeCity.Licenses.ProductInfo">
            <summary>
              Represents a set of product information.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.ProductInfo.VendorID">
            <summary>
              Gets the vendor id of the product.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.ProductInfo.PackageID">
            <summary>
              Gets the package id of the product.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.ProductInfo.Guid">
            <summary>
              Gets the GUID of the product.
            </summary>
        </member>
        <member name="T:GrapeCity.Licenses.LicenseResource">
            <summary>
              Contains the resource for <see cref="T:GrapeCity.Licenses.PowerToolsLicenseProvider"/>.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.LicenseResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.LicenseResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.LicenseResource.ErrorIcon">
            <summary>
              Gets the Error icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.LicenseResource.InfoIcon">
            <summary>
              Gets the Info icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.LicenseResource.WarningIcon">
            <summary>
              Gets the Warning icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.LicenseResource.GrapeCityIcon">
            <summary>
              Gets the GrapeCity icon for license dialog.
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.LicenseResource.GetString(System.String)">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Licenses.LicenseResource"/>.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.LicenseResource.GetString(System.String,System.Object[])">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Licenses.LicenseResource"/>.
            </param>
            <param name="args">
              The data used in the string.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.LicenseResource.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
              Get the file version description of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose file version description should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the file version description of the specified assembly.
            </returns>
        </member>
        <member name="M:GrapeCity.Licenses.LicenseResource.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
              Get the name of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose name should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the name of the specified assembly.
            </returns>
            <remarks>
              Please use this method to get assembly name. It is because that the Assembly.GetName method need FileIO permission.
            </remarks>
        </member>
        <member name="M:GrapeCity.Licenses.LicenseResource.GetMachineName">
            <summary>
              Get the name of the current machine.
            </summary>
            <returns>
              The current machine name.
            </returns>
        </member>
        <member name="T:GrapeCity.Licenses.LicenseDialogKind">
            <summary>
              Represents the kind of license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.LicenseDialogKind.Info">
            <summary>
              Info dialog. It is shown for a trial license.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.LicenseDialogKind.Warning">
            <summary>
              Warning dialog. It is shown for a trial license which is expired.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.LicenseDialogKind.Error">
            <summary>
              Error dialog. It is shown for an invalid license or other errors.
            </summary>
        </member>
        <member name="T:GrapeCity.Licenses.LicenseDialogWebLinkTarget">
            <summary>
              Represents the target web site for the link in license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.LicenseDialogWebLinkTarget.None">
            <summary>
              None target.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.LicenseDialogWebLinkTarget.GotoWebFAQ">
            <summary>
              Goto web site http://www.grapecity.com/japan/support/faq/.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.LicenseDialogWebLinkTarget.GotoWebActivation">
            <summary>
              Goto web site http://www.grapecity.com/japan/activation/.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.LicenseDialogWebLinkTarget.GotoWebShop">
            <summary>
              Goto web site http://shop.grapecity.com/.
            </summary>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.CopyrightYear">
            <summary>
            Gets the product copyrighted years.
            </summary>
            <value>A <b>string</b> indicates the product copyrighted years.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.Title">
            <summary>
            Gets the text that is title of dialog.
            </summary>
            <value>A <b>string</b> indicates the title of dialog.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.ProductSeries">
            <summary>
            Gets the text that is the product series name.
            </summary>
            <value>A <b>string</b> indicates the product series name.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.ProductName">
            <summary>
            Gets the text that is the product name.
            </summary>
            <value>A <b>string</b> indicates the product name.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.Copyright">
            <summary>
            Gets the copyright string.
            </summary>
            <value>A <b>string</b> indicates the copyright string.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.WebURL">
            <summary>
            Gets or the product URL of web page.
            </summary>
            <value>A <b>string</b> indicates the product URL of web page.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.VersionPrompt">
            <summary>
            Gets the version prompt.
            </summary>
            <value>A <b>string</b> indicates the version prompt.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.FileVersionPrompt">
            <summary>
            Gets the file version prompt.
            </summary>
            <value>A <b>string</b> indicates the file version prompt.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.FileVersion">
            <summary>
            Gets the file version.
            </summary>
            <value>A <b>string</b> indicates the file version.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.AssemblyVersionPrompt">
            <summary>
            Gets the assembly version prompt.
            </summary>
            <value>A <b>string</b> indicates the assembly version prompt.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
            <value>A <b>string</b> indicates the assembly version.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.ManufacturerName">
            <summary>
            Gets the name of the company.
            </summary>
            <value>A <b>string</b> indicates the name of the company.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.CompanyAddress">
            <summary>
            Gets the address of the company.
            </summary>
            <value>A <b>string</b> indicates the address of the company.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.LawInformation">
            <summary>
            Gets the caption of LawInformation label.
            </summary>
            <value>A <b>string</b> indicates the caption of LawInformation.</value>
        </member>
        <member name="P:GrapeCity.Licenses.SplashForm.OKButtonCaption">
            <summary>
            Gets the caption of OK button.
            </summary>
            <value>A <b>string</b> indicates the caption of OK button.</value>
        </member>
        <member name="T:GrapeCity.Licenses.AboutEditor">
            <summary>
            Represents the About dialog editor.
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.AboutEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the values for the About dialog.
            </summary>
            <param name="context">Context</param>
            <param name="provider">Provider</param>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.Licenses.AboutEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the style for the About dialog for the specified context.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:GrapeCity.Licenses.AboutEditor.GetEditStyle">
            <summary>
            Gets the style for the About dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Licenses.WinForm.LicenseDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.WinForm.LicenseDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GrapeCity.Licenses.WinForm.LicenseDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GrapeCity.Licenses.WinFormLicenseProvider">
            <summary>
              Represents a license provider of a Windows Forms PowerTools component.
            </summary>
        </member>
        <member name="M:GrapeCity.Licenses.WinFormLicenseProvider.ShowDesignTimeLicenseDialog(System.Type,GrapeCity.Licenses.ProductInfo,GrapeCity.Licenses.PowerToolsLicense,System.Object)">
            <summary>
              Show the license dialog for design-time.
            </summary>
            <param name="componentType">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="product">
              A <see cref="T:GrapeCity.Licenses.ProductInfo"/> indicates the valid product package for the specified component.
            </param>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the final license for the specified component.
            </param>
            <param name="instance">
              A component that requests the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
        </member>
        <member name="M:GrapeCity.Licenses.WinFormLicenseProvider.ShowRunTimeLicenseDialog(System.Type,GrapeCity.Licenses.PowerToolsLicense,System.Reflection.Assembly,System.Object)">
            <summary>
              Show the license dialog for run-time.
            </summary>
            <param name="componentType">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the final license for the specified component.
            </param>
            <param name="licenseLocation">
              A <see cref="T:System.Reflection.Assembly"/> indicates the location of the <paramref name="license"/>. For Run-Time, it is the assembly where the license resource embeded; for Design-Time, it should be null.
            </param>
            <param name="instance">
              A component that requests the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
        </member>
        <member name="M:GrapeCity.Licenses.WinFormLicenseProvider.EndApplication(System.Type,GrapeCity.Licenses.PowerToolsLicense)">
            <summary>
              End the current application if the license is invaild.
            </summary>
            <param name="componentType">
              A <see cref="T:System.Type"/> that represents the component requesting the <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/>.
            </param>
            <param name="license">
              A <see cref="T:GrapeCity.Licenses.PowerToolsLicense"/> indicates the invalid license.
            </param>
        </member>
        <member name="F:GrapeCity.Common.LicenseDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.GcNetFxLicenseProvider`1.VerifyDesignTimeEnvironment">
            <summary>
              Verify the environment to get whether the component is in design-time. 
            </summary>
            <returns>
              <c>true</c> if it is in design-time; otherwise <c>false</c>.
            </returns>
            <remarks>
              In DesignTime, because of IDE bugs, some component are not created with DesigntimeLicenseContext. 
              For example, when drag a control from Win Forms DataSource tool window, or use a web control in a ASP.NET Template.
              This may cause the control do run-time license validation and found that there is no license.
              To resolve this problem, we will check the environment and decide whether to do design-time license validation again.
            </remarks>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseResource">
            <summary>
              Contains the resource for <see cref="!:PowerToolsLicenseProvider"/>.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ErrorIcon">
            <summary>
              Gets the Error icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.InfoIcon">
            <summary>
              Gets the Info icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.WarningIcon">
            <summary>
              Gets the Warning icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.GrapeCityIcon">
            <summary>
              Gets the GrapeCity icon for license dialog.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String)">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String,System.Object[])">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <param name="args">
              The data used in the string.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
              Get the file version description of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose file version description should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the file version description of the specified assembly.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
              Get the name of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose name should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the name of the specified assembly.
            </returns>
            <remarks>
              Please use this method to get assembly name. It is because that the Assembly.GetName method need FileIO permission.
            </remarks>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.FormatSerialKey(System.String)">
            <summary>
              Format the product key as "xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".
            </summary>
            <param name="productKey">
              A <see cref="T:System.String"/> indicates the original product key which is a sequence of 24 digits.
            </param>
            <returns>
              A readable text indicates the product key.
            </returns>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogKind">
            <summary>
              Represents the kind of license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Info">
            <summary>
              Info dialog. It is shown for a trial license.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Warning">
            <summary>
              Warning dialog. It is shown for a trial license which is expired.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Error">
            <summary>
              Error dialog. It is shown for an invalid license or other errors.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget">
            <summary>
              Represents the target web site for the link in license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.None">
            <summary>
              None target.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebFAQ">
            <summary>
              Goto web site http://www.grapecity.com/japan/support/faq/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebActivation">
            <summary>
              Goto web site http://www.grapecity.com/japan/activation/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebShop">
            <summary>
              Goto web site http://shop.grapecity.com/.
            </summary>
        </member>
    </members>
</doc>
