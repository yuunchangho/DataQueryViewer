<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GrapeCity.CalcEngine</name>
    </assembly>
    <members>
        <member name="T:GrapeCity.CalcEngine.AsyncFunction">
            <summary>
            Represents an asynchronous function which result can be returned later without locking the calculating thread.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.Function" />
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncFunction.#ctor(System.String,System.Int32,System.Int32,GrapeCity.CalcEngine.FunctionAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AsyncFunction"/> class.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="minArgs">An integer value indicates the minimum amount of arguments.</param>
            <param name="maxArgs">An integer value indicates the maximum amount of arguments.</param>
            <param name="attributes">A <see cref="T:GrapeCity.CalcEngine.FunctionAttributes"/> value indicates attributes of the function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncFunction.#ctor(GrapeCity.CalcEngine.BuiltinFunction,System.Int32,System.Int32,GrapeCity.CalcEngine.ExpressionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AsyncFunction"/> class.
            </summary>
            <param name="functionId">The function identifier.</param>
            <param name="minArgs">An integer value indicates the minimum amount of arguments.</param>
            <param name="maxArgs">An integer value indicates the maximum amount of arguments.</param>
            <param name="flags">An <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/> value indicates the state of expression.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncFunction.CreateApplicationKey(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
            <summary>
            Creates the unique application key which will be used to classify among asynchronous functions.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> instance indicates the evaluation context.</param>
            <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments"/> instance indicates all arguments of the function.</param>
            <returns>A <see cref="T:System.String"/> value represents the unique application key.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncFunction.CreateApplication(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
            <summary>
            Creates the asynchronous application.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> instance indicates the evaluation context.</param>
            <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments"/> instance indicates all arguments of the function.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.AsyncApplication"/> object indicates the asynchronous application.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.AsyncFunctionExpression">
            <summary>
            Represents an asynchronous function expression.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AsyncFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.IAsyncFunctionManager">
            <summary>
            Represents an asynchronous function manager which handles processing after asynchronous function(s) finished.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.IAsyncFunctionManager.OnDataChanged(GrapeCity.CalcEngine.AsyncApplication)">
            <summary>
            Called when asynchronous function(s) finished.
            </summary>
            <param name="asyncApplication">An <see cref="T:GrapeCity.CalcEngine.AsyncApplication"/> object indicates the asynchronous function application.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.AsyncFunctionManager">
            <summary>
            Represents an asynchornous function manager which handles calls of asynchronous functions.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncFunctionManager.#ctor(GrapeCity.CalcEngine.IAsyncFunctionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AsyncFunctionManager"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncFunctionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncFunctionManager.GetValue(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.AsyncFunction,GrapeCity.CalcEngine.Arguments,GrapeCity.CalcEngine.Value)">
            <summary>
            Call asynchronous function and get the value if it's available.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="function">The function.</param>
            <param name="arguments">The arguments.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.AsyncApplication">
            <summary>
            Represents the unique asynchronous application which serve data base on real-time data (topic parameter(s)).
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AsyncApplication"/> class.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.AsyncApplication.Topics">
            <summary>
            Gets the topics.
            </summary>
            <value>The topics.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.CreateTopicKey(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
            <summary>
            Creates the unique topic key which will be used to classify among asynchronous calls.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> instance indicates the evaluation context.</param>
            <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments"/> instance indicates all arguments of the function.</param>
            <returns>A <see cref="T:System.String"/> value represents the unique topic key.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.CreateTopic(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IArguments)">
            <summary>
            Creates the asynchronous topic.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> instance indicates the evaluation context.</param>
            <param name="arguments">An <see cref="T:GrapeCity.CalcEngine.IArguments"/> instance indicates all arguments of the function.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.AsyncTopic"/> object indicates the asynchronous topic.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.GetData">
            <summary>
            Gets last received data of all topics in the asynchronous application.
            </summary>
            <returns>A dictionary maps topic's ID to the received data. </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:GrapeCity.CalcEngine.AsyncApplication"/> class.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.AsyncApplication.IsServerStarted">
            <summary>
            Gets or sets a value indicating whether this instance is server started.
            </summary>
            <value><c>true</c> if this instance is server started; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.ConnectData(GrapeCity.CalcEngine.AsyncTopic)">
            <summary>
            Connects the data.
            </summary>
            <param name="topic">The asynchronous topic.</param>
            <returns><c>true</c> if connecting data is successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.Start">
            <summary>
            Starts the asynchronous application.
            </summary>
            <returns><c>true</c> if the asynchronous application starts successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.Stop">
            <summary>
            Stops the asynchronous application.
            </summary>
        </member>
        <member name="E:GrapeCity.CalcEngine.AsyncApplication.DataChanged">
            <summary>
            Occurs when the data, which received from asynchronous application, is changed.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.AddChangedTopic(System.Int32,System.String)">
            <summary>
            Adds the specified topic to the changed list.
            </summary>
            <param name="topicId">An integer value indicates the topic ID.</param>
            <param name="topicKey">A string value indicates the topic key.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.OnDataChanged">
            <summary>
            Called when the data, which received from asynchronous application, is changed.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.AsyncApplication.Refresh">
            <summary>
            Refreshes the data.
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.AsyncTopic">
            <summary>
            Represents an asynchronous topic.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInDatas.GetFunction(GrapeCity.CalcEngine.BuiltinFunction)">
            <summary>
            Gets the function via function ID.
            </summary>
            <param name="functionId">An integer value represent the function ID.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.Function"/> value represents the corresponding function.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInDatas.AddFunction(GrapeCity.CalcEngine.Function)">
            <summary>
            Adds the specified function to the function dictionary.
            </summary>
            <param name="function">The function to add.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AddressFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluated arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AndFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AndFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AndFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ARABICFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AreasFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AreasFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AreasFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AreasFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.BahtTextFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.BahtTextFunctionExpression"/> class.
            </summary>
            <param name="bathTextFunc">The bath text function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.BahtTextFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.BaseFunctionExpression.ConvertNumberToString(System.Int64,System.Int32)">
            <summary>
            Converts the value of an un-signed integer to its equivalent string representation in a specified base.
            </summary>
            <param name="number">The un-signed integer to convert.</param>
            <param name="base">The base of the return value, which must be greater than 1 and less than 37.</param>
            <returns>The string representation of value in base toBase.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.BESSELIJFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Beta_InvFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.Beta_InvFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Beta_InvFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Bin2DecFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.Bin2DecFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Bin2DecFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Bin2DecFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Bin2DecFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Bin2HexFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Bin2HexFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Bin2HexFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Bin2OctFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.Bin2OctFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Bin2OctFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Bin2OctFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Bin2OctFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.BitLShiftFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.BitLShiftFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CeilingPreciseFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ChooseFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ChooseFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ChooseFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ChooseFunctionExpression.IsImplicitIntersectionOperatorAdded">
            <summary>
            Determine implicit intersection operator expression for back-ward compatibility is added.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ChooseFunctionExpression.AddImplicitIntersectionOperatorIfNeeded(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Converts the expression to implicit intersection operator expression for back-ward compatibility if needed.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ChooseFunctionExpression.GuessReturnTypeCore">
            <summary>
            Guesses the type of the return.
            </summary>
            <returns>ExpressionFlags.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CleanFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.CleanFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CleanFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CodeFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.CodeFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CodeFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnFunctionExpression.GuessReturnTypeCore">
            <summary>
            Guesses the type of the returned value of the expression.
            </summary>
            <returns>The type of the returned value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnFunctionExpression.ShouldExportAsArray(System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="contextRow">The row index of the context cell.</param>
            <param name="contextColumn">The column index of the context cell.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnFunctionExpression.UpdateArrayDimensions(GrapeCity.CalcEngine.EvaluationContext,System.Int32@,System.Int32@,GrapeCity.CalcEngine.Value)">
            <summary>
            Updates the array dimensions indicating how large is the <see cref="T:GrapeCity.CalcEngine.ArrayConstants" /> to maintain the whole array formula.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="rowCount">An integer value indicates the row count of <see cref="T:GrapeCity.CalcEngine.ArrayConstants" />.</param>
            <param name="columnCount">An integer value indicates the column count of <see cref="T:GrapeCity.CalcEngine.ArrayConstants" />.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value" /> object indicates the evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnsFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ColumnsFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnsFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnsFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnsFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ColumnsFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ComplexFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ComplexFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ConcatenateFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ConcatenateFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ConcatenateFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ConcatenateFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ConcatenateFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ConvertFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ConvertFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.CovarianceFunctionExpression">
            <summary>
            Represents COVARIANCE.P or COVARIANCE.S function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CovarianceFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.CovarianceFunctionExpression"/> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function" /> instance indicates the evaluating function.</param>
            <param name="firstArg">An <see cref="T:GrapeCity.CalcEngine.Expression" /> instance indicates the first argument.</param>
            <param name="secondArg">An <see cref="T:GrapeCity.CalcEngine.Expression" /> instance indicates the second argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CovarianceFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CovarianceFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CovarianceFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CUMIPMTFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CUMIPMTFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DateFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DateValueFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.DateValueFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DateValueFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DayFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.DayFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DayFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DBFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DdbFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ERFFunctionExpression.ERF_Precise(System.Double)">
            <summary>
            Returns the error function.
            </summary>
            <param name="x">The lower bound for integrating ERF.PRECISE.</param>
            <returns>A double value represents the error function.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ERFFunctionExpression.ERFC_Precise(System.Double)">
            <summary>
            Returns the complementary ERF function integrated between x and infinity.
            </summary>
            <param name="x">The lower bound for integrating ERFC.PRECISE.</param>
            <returns>A double value represents the complementary ERF function integrated between x and infinity.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ERFCFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ERFCFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ERFCFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ErrorTypeFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EUROCONVERTFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EUROCONVERTFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EUROCONVERTFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.ExpondistFunctionExpression">
            <summary>
            Represents EXPONDIST function
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ExpondistFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ExpondistFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
            <param name="thirdArg">The third argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ExpondistFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.FdistFunctionExpression">
            <summary>
            Represents FDIST function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FdistFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.FdistFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
            <param name="thirdArg">The third argument.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GrapeCity.CalcEngine.BuiltInFunctions.FILTERXMLFunctionExpression.GetXmlNamespaceManager(System.Xml.XPath.XPathNavigator)" -->
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.FinvFunctionExpression">
            <summary>
            Represents FINV function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FinvFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.FinvFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
            <param name="thirdArg">The third argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FvFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.GAMMAFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.GAMMAFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.GAMMAFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.GammaLnFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.GammaLnFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.GammaLnFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.GAMMALN_PRECISEFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.GAMMALN_PRECISEFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.GAMMALN_PRECISEFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.GAUSSFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.GAUSSFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.GAUSSFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HEX2DECFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.HEX2DECFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HEX2DECFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.VertorLookupFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.VertorLookupFunctionExpression"/> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function" /> instance indicates the evaluating function.</param>
            <param name="args">An <see cref="T:GrapeCity.CalcEngine.Expression" /> array indicates the arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.VertorLookupFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.VertorLookupFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.VertorLookupFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.VertorLookupFunctionExpression.IsEnforedVector(System.Int32)">
            <summary>
            Determines whether the expression at specified index must be evaluated as in single cell evaluation mode.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            An example that argument will be enfored as (single cell) vector as the second argument of LOOKUP function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression must be evaluated as in single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.VertorLookupFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HlookupFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.LookupFunctionExpression" /> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function" /> instance indicates the evaluating function.</param>
            <param name="args">An <see cref="T:GrapeCity.CalcEngine.Expression" /> array indicates the arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HlookupFunctionExpression.FindVertical(System.Int32,System.Int32)">
            <summary>
            Get a boolean value indicates whether we find by vertical or horizontal.
            </summary>
            <param name="rowCount">An integer value indicates the row count.</param>
            <param name="columnCount">An integer value indicates the column count.</param>
            <returns><c>true</c> if find by vertical, <c>false</c> if find by hozizontal.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HyperlinkFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.HyperlinkFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HyperlinkFunctionExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HyperlinkFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HyperlinkFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HyperlinkFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression">
            <summary>
            Represents IF and IFS function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separately using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separately using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression.GuessReturnTypeCore">
            <summary>
            Guesses the type of the returned value of the expression.
            </summary>
            <returns>The type of the returned value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>Evaluates a cell's value using evaluated arguments.</summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluated arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfFunctionExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.IfsFunctionExpression">
            <summary>
            Represents IF and IFS function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfsFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IfsFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfsFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separately using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfsFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfsFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfsFunctionExpression.GuessReturnTypeCore">
            <summary>
            Guesses the type of the returned value of the expression.
            </summary>
            <returns>The type of the returned value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfsFunctionExpression.ShouldExportAsArray(System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="contextRow">The row index of the context cell.</param>
            <param name="contextColumn">The column index of the context cell.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfsFunctionExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluated arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IfsFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluated arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImAbsFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImAbsFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImAbsFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImaginaryFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImaginaryFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImaginaryFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImArgumentFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImArgumentFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImArgumentFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImConjugateFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImConjugateFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImConjugateFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImCosFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImCosFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImCosFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImCoshFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImCoshFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImCoshFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImCotFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImCotFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImCotFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IMCSCFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IMCSCFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IMCSCFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IMCSCHFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IMCSCHFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IMCSCHFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImExpFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImExpFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImExpFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImLnFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImLnFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImLnFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImLog10FunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImLog10FunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImLog10FunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImLog2FunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImLog2FunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImLog2FunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImRealFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImRealFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImRealFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IMSECFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IMSECFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IMSECFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IMSECHFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IMSECHFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IMSECHFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImSinhFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImSinhFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImSinhFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImSQRTFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImSQRTFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImSQRTFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImTanFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImTanFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImTanFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndexFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IndexFunctionExpression"/> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function" /> instance indicates the evaluating function.</param>
            <param name="args">An <see cref="T:GrapeCity.CalcEngine.Expression" /> array indicates the arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndexFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndexFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndexFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndexFunctionExpression.ShouldReevaluateInSingleCell(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Shoulds the reevaluate in single cell.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <returns><c>true</c> if expression should be reevaluated in each row, column , <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndexFunctionExpression.GuessReturnTypeCore">
            <summary>
            Guesses the type of the returned value of the expression.
            </summary>
            <returns>The type of the returned value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndexFunctionExpression.ProcessArgumentPrecedents(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value,System.Int32,System.Int32)">
            <summary>
            Processes the argument's precedent(s) during evaluating with <see cref="!:EvaluateAsSingleCell(EvaluationContext, int, Value)"/>
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="argIndex">Index of the argument.</param>
            <param name="argumentResult">The evaluated result of the argument.</param>
            <param name="fromIndex">The start index of the arguemnt's precedent(s).</param>
            <param name="toIndexExclusive">The end exclusive index of the argument's precedent(s).</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndexFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluated arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndexFunctionExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.IndirectFunctionExpression">
            <summary>
            Represents INDIRECT function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndirectFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IndirectFunctionExpression"/> class.
            </summary>
            <param name="indirectFunction">The indirect function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndirectFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndirectFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IndirectFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IpmtFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsBlankFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsBlankFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsBlankFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsBlankFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsBlankFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsBlankFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsErrFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsErrFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsErrFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsErrFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsErrFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsErrFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsErrorFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsErrorFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsErrorFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsErrorFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsErrorFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsErrorFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsLogicalFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsLogicalFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsLogicalFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsLogicalFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsLogicalFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsLogicalFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNAFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsNAFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNAFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNAFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNAFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNAFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNonTextFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsNonTextFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNonTextFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNonTextFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNonTextFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNonTextFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNumberFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsNumberFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNumberFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNumberFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNumberFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsNumberFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsoWeekNumFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsoWeekNumFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsoWeekNumFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsRefFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsRefFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsRefFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsRefFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsRefFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsRefFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsTextFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsTextFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsTextFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsTextFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsTextFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsTextFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LenFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.LenFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LenFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LetFunctionExpression.IsAlwaysEvaluatedAsArrayFormula(System.Int32)">
            <summary>
            Determines whether the specified argument is passed as array/reference and the function is always evaluated as array formula (FILTER, SEQUENCE..).
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the specified argument is passed as array/reference and the function is always evaluated as array formula; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LetFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LetFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LetFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LetFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LetFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LetFunctionExpression.ShouldExportAsArray(System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="contextRow">The row index of the context cell.</param>
            <param name="contextColumn">The column index of the context cell.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LetFunctionExpression.GuessReturnTypeCore">
            <summary>
            Guesses the type of the returned value of the expression.
            </summary>
            <returns>The type of the returned value.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.LogNormDistFunctionExpression">
            <summary>
            Represents LOGNORMDIST function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LogNormDistFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.LogNormDistFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
            <param name="thirdArg">The third argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LogNormDistFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LookupFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.LookupFunctionExpression"/> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function" /> instance indicates the evaluating function.</param>
            <param name="args">An <see cref="T:GrapeCity.CalcEngine.Expression" /> array indicates the arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LookupFunctionExpression.IsEnforedVector(System.Int32)">
            <summary>
            Determines whether the expression at specified index must be evaluated as in single cell evaluation mode.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            An example that argument will be enfored as (single cell) vector as the second argument of LOOKUP function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression must be evaluated as in single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LookupFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LookupFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LookupFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LowerFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.LowerFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LowerFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MatchFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.MatchFunctionExpression"/> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function" /> instance indicates the evaluating function.</param>
            <param name="args">An <see cref="T:GrapeCity.CalcEngine.Expression" /> array indicates the arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MatchFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MatchFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MatchFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MatchFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MatchFunctionExpression.FindVertical(System.Int32,System.Int32)">
            <summary>
            Get a boolean value indicates whether we find by vertical or horizontal.
            </summary>
            <param name="rowCount">An integer value indicates the row count.</param>
            <param name="columnCount">An integer value indicates the column count.</param>
            <returns><c>true</c> if find by vertical, <c>false</c> if find by hozizontal.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MROUNDFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MROUNDFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MUNITFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.MUNITFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MUNITFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MUNITFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MUNITFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MUNITFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MUNITFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NFunctionExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NAFunctionExpression.#ctor(GrapeCity.CalcEngine.Function)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NAFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NAFunctionExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NAFunctionExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NAFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NAFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NetWorkdaysIntlFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NetWorkdaysIntlFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NetWorkdaysIntlFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">Index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NetWorkdaysIntlFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NetWorkdaysIntlFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.NormDistFunctionExpression">
            <summary>
            Represents NORMDIST function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NormDistFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NormDistFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NormDistFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NormsDistFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NormsDistFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NormsDistFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NormsInvFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NormsInvFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NormsInvFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OCT2DECFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.OCT2DECFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OCT2DECFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.OffsetFunctionExpression">
            <summary>
            Represents OFFSET function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OffsetFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.OffsetFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OffsetFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OffsetFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OffsetFunctionExpression.ShouldExportAsArray(System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="contextRow">The row index of the context cell.</param>
            <param name="contextColumn">The column index of the context cell.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OffsetFunctionExpression.GuessReturnTypeCore">
            <summary>
            Guesses the type of the returned value of the expression.
            </summary>
            <returns>The type of the returned value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OffsetFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OffsetFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OffsetFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PHIFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PHIFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PHIFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PmtFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PoissonFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PPMTFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression">
            <summary>
            Represents price-related function expressions.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression.Evaluate(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the price.
            </summary>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="pr">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="coupnum">The number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <param name="totalCouponsFirstPeriod">The total coupon payments of the first period.</param>
            <param name="totalCouponsLastPeriod">The total coupon payments of the last period.</param>
            <returns>A double value represents the price.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression.ProcessLastCouponPeriod(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Processes the last coupon period.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="last_interest">The last_interest.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="basis">The type of day count basis to use.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <returns><c>true</c> if the data is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression.ProcessFirstCouponPeriod(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Processes the first coupon period.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="issue">The security's issue date.</param>
            <param name="first_coupon">The security's first coupon date.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="basis">The type of day count basis to use.</param>
            <param name="coupnum">The coupon number.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <param name="totalCouponsFirstPeriod">The total coupon payments of the first period.</param>
            <param name="totalCouponsLastPeriod">The total coupon payments of the last period.</param>
            <returns><c>true</c> if the data is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression.CalculatePrice(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the price.
            </summary>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="coupnum">The number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <param name="totalCouponsFirstPeriod">The total coupon payments of the first period.</param>
            <param name="totalCouponsLastPeriod">The total coupon payments of the last period.</param>
            <returns>A <see cref="!:A double value represents the price."/> value represents </returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.ODDLYIELDFunctionExpression">
            <summary>
            Represents ODDLYIELD function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDLYIELDFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ODDLYIELDFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDLYIELDFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDLYIELDFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDLYIELDFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDLYIELDFunctionExpression.CalculatePrice(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the price.
            </summary>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="coupnum">The number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <param name="totalCouponsFirstPeriod">The total coupon payments of the first period.</param>
            <param name="totalCouponsLastPeriod">The total coupon payments of the last period.</param>
            <returns>A <see cref="T:System.Double" /> value represents the price</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDLYIELDFunctionExpression.Calculate(System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the price.
            </summary>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <returns>A <see cref="T:System.Double"/> value represents the price.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.PRICEFunctionExpression">
            <summary>
            Represents PRICE function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PRICEFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEFunctionExpression.CalculatePrice(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the price.
            </summary>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="coupnum">The number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <param name="totalCouponsFirstPeriod">The total coupon payments of the first period.</param>
            <param name="totalCouponsLastPeriod">The total coupon payments of the last period.</param>
            <returns>A double value represents the price.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEFunctionExpression.Calculate(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Calculates the price per $100 face value of a security that pays periodic interest.
            </summary>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="coupnum">The number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <returns>A <see cref="!:A double value represents the price per $100 face value of a security that pays periodic interest."/> value represents </returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.YIELDFunctionExpression">
            <summary>
            Represents YIELD function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.YIELDFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDFunctionExpression.CalculatePrice(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the price.
            </summary>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="coupnum">The number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <param name="totalCouponsFirstPeriod">The total coupon payments of the first period.</param>
            <param name="totalCouponsLastPeriod">The total coupon payments of the last period.</param>
            <returns>A double value represents the price.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.ODDLPRICEFunctionExpression">
            <summary>
            Represents ODDLPRICE function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDLPRICEFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ODDLPRICEFunctionExpression" /> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDLPRICEFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDLPRICEFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDLPRICEFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDLPRICEFunctionExpression.CalculatePrice(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the price.
            </summary>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="coupnum">The number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <param name="totalCouponsFirstPeriod">The total coupon payments of the first period.</param>
            <param name="totalCouponsLastPeriod">The total coupon payments of the last period.</param>
            <returns>A double value represents the price.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.ODDFYIELDFunctionExpression">
            <summary>
            Represents ODDFYIELD function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDFYIELDFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ODDFYIELDFunctionExpression" /> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDFYIELDFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDFYIELDFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDFYIELDFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDFYIELDFunctionExpression.CalculatePrice(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the price.
            </summary>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="pr">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="coupnum">The number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <param name="totalCouponsFirstPeriod">The total coupon payments of the first period.</param>
            <param name="totalCouponsLastPeriod">The total coupon payments of the last period.</param>
            <returns>A double value represents the price.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.ODDFPRICEFunctionExpression">
            <summary>
            Represents ODDFPRICE function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PriceBaseFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDFPRICEFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ODDFPRICEFunctionExpression" /> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDFPRICEFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDFPRICEFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDFPRICEFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDFPRICEFunctionExpression.CalculatePrice(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the price.
            </summary>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="coupnum">The number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <param name="totalCouponsFirstPeriod">The total coupon payments of the first period.</param>
            <param name="totalCouponsLastPeriod">The total coupon payments of the last period.</param>
            <returns>A double value represents the price.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ODDFPRICEFunctionExpression.Calculate(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the price.
            </summary>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="coupnum">The number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.</param>
            <param name="coupdaybs">The number of days from the beginning of a coupon period until its settlement date.</param>
            <param name="coupdaysnc">The number of days from the settlement date to the next coupon date.</param>
            <param name="coupdaysncLastPeriod">The number of days from the settlement date to the last coupon date.</param>
            <param name="totalCouponsFirstPeriod">The total coupon payments of the first period.</param>
            <param name="totalCouponsLastPeriod">The total coupon payments of the last period.</param>
            <returns>A double value represents the price.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ProperFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ProperFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ProperFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PvFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RandFunctionExpression.#ctor(GrapeCity.CalcEngine.Function)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.RandFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RandFunctionExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.RandFunctionExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RandFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RandFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.RandBetweenFunctionExpression">
            <summary>
            Represents RANDBETWEEN function
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RandBetweenFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.RandBetweenFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RandBetweenFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RandBetweenFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RandBetweenFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RateFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RomanFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RoundFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RoundUpFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RoundDownFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowFunctionExpression.GuessReturnTypeCore">
            <summary>
            Guesses the type of the returned value of the expression.
            </summary>
            <returns>The type of the returned value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowFunctionExpression.ShouldExportAsArray(System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="contextRow">The row index of the context cell.</param>
            <param name="contextColumn">The column index of the context cell.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowFunctionExpression.UpdateArrayDimensions(GrapeCity.CalcEngine.EvaluationContext,System.Int32@,System.Int32@,GrapeCity.CalcEngine.Value)">
            <summary>
            Updates the array dimensions indicating how large is the <see cref="T:GrapeCity.CalcEngine.ArrayConstants" /> to maintain the whole array formula.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="rowCount">An integer value indicates the row count of <see cref="T:GrapeCity.CalcEngine.ArrayConstants" />.</param>
            <param name="columnCount">An integer value indicates the column count of <see cref="T:GrapeCity.CalcEngine.ArrayConstants" />.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value" /> object indicates the evaluted result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowsFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.RowsFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowsFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowsFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowsFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RowsFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SlnFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.SwitchFunctionExpression">
            <summary>
            Represents SWITCH function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SwitchFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.SwitchFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SwitchFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SwitchFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SwitchFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SydFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TimeFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TimeValueFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TimeValueFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TimeValueFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TransposeFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TransposeFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TransposeFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TransposeFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TransposeFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TrimFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TrimFunctionExpression"/> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function"/> object indicates the corresponding function.</param>
            <param name="arg">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the argument of this function expression.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TrimFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TypeFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TypeFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TypeFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TypeFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TypeFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.UnicodeFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.UnicodeFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.UnicodeFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.UpperFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.UpperFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.UpperFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ValueFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ValueFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ValueFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.VdbFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.VlookupFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.VlookupFunctionExpression"/> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function" /> instance indicates the evaluating function.</param>
            <param name="args">An <see cref="T:GrapeCity.CalcEngine.Expression" /> array indicates the arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.VlookupFunctionExpression.FindVertical(System.Int32,System.Int32)">
            <summary>
            Get a boolean value indicates whether we find by vertical or horizontal.
            </summary>
            <param name="rowCount">An integer value indicates the row count.</param>
            <param name="columnCount">An integer value indicates the column count.</param>
            <returns><c>true</c> if find by vertical, <c>false</c> if find by hozizontal.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.WEBSERVICEFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.WEBSERVICEFunctionExpression"/> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function" /> object indicates the corresponding function.</param>
            <param name="arg">An <see cref="T:GrapeCity.CalcEngine.Expression" /> object indicates the argument of this function expression.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.WEBSERVICEFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.WeibullFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AcotFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.AcotFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AcotFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AcothFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.AcothFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AcothFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CotFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.CotFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CotFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CothFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.CothFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CothFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CscFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.CscFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CscFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CschFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.CschFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CschFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SecFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.SecFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SecFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SechFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.SechFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SechFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AcosFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.AcosFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AcosFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AsinFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.AsinFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AsinFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ASinhFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ASinhFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ASinhFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AtanFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.AtanFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AtanFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Atan2FunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.Atan2FunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Atan2FunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ATanhFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ATanhFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ATanhFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CosFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.CosFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CosFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CoshFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.CoshFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CoshFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EvenFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.EvenFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EvenFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ExpFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ExpFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ExpFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FactFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.FactFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FactFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FalseFunctionExpression.#ctor(GrapeCity.CalcEngine.Function)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.FalseFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FalseFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FalseFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FisherFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.FisherFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FisherFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HourFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.HourFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HourFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HourFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MinuteFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.MinuteFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MinuteFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MinuteFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MonthFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.MonthFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MonthFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.MonthFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YearFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.YearFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YearFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YearFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="F:GrapeCity.CalcEngine.BuiltInFunctions.TodayFunctionExpression.Instance">
            <summary>
            The static singleton instance
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TodayFunctionExpression.#ctor(GrapeCity.CalcEngine.Function)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TodayFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TodayFunctionExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TodayFunctionExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TodayFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TodayFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TodayFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SecondFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.SecondFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SecondFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SecondFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OddFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.OddFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.OddFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NowFunctionExpression.#ctor(GrapeCity.CalcEngine.Function)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NowFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NowFunctionExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NowFunctionExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NowFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NowFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NowFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LogFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.LogFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Log10FunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.Log10FunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Log10FunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LnFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.LnFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LnFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FisherInvFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.FisherInvFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FisherInvFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CombinFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.CombinFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ConfidenceFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ConfidenceFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
            <param name="thirdArg">The third argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CharFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.CharFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.CharFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ACoshFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ACoshFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ACoshFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AbsFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.AbsFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AbsFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AbsFunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IntFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IntFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IntFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SignFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.SignFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SignFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SqrtFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.SqrtFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SqrtFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TrueFunctionExpression.#ctor(GrapeCity.CalcEngine.Function)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TrueFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TrueFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TrueFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TanFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TanFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TanFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TanhFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TanhFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TanhFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SinFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.SinFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SinFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SinhFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.SinhFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SinhFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RadiansFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.RadiansFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RadiansFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PiFunctionExpression.#ctor(GrapeCity.CalcEngine.Function)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PiFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PiFunctionExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PiFunctionExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PiFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PiFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DegreesFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.DegreesFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DegreesFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsOddFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsOddFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsOddFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsOddFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsOddFunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsOddFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsEvenFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.IsEvenFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsEvenFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsEvenFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.IsEvenFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.UniCharFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.UniCharFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.UniCharFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ENCODEURLFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ENCODEURLFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ENCODEURLFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ENCODEURLFunctionExpression.EncodeURL(System.Text.StringBuilder,System.String)">
            <summary>
            Get an encoded URL text.
            </summary>
            <param name="text">A string value indicates the URL to encode.</param>
            <returns>A string value represents the encoded URL. <c>null</c> if the data is invalid.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.DurationFunctionExpression">
            <summary>
            Represents DURATION function
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DurationFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.DurationFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DurationFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DurationFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DurationFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.LogNorm_DistFunctionExpression">
            <summary>
            Represents LOGNORM.DIST function
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LogNorm_DistFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.LogNorm_DistFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
            <param name="thirdArg">The third argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.LogNorm_DistFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.Norm_S_DistFunctionExpression">
            <summary>
            Represents NORM.S.DIST function
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Norm_S_DistFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.Norm_S_DistFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Norm_S_DistFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.EDateFunctionExpression">
            <summary>
            Represents EDATE function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EDateFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.Norm_S_DistFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EDateFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EDateFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EDateFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.EOMonthFunctionExpression">
            <summary>
            Represents EDATE function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EOMonthFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.Norm_S_DistFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EOMonthFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EOMonthFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.EOMonthFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.Days360FunctionExpression">
            <summary>
            Represents DAYS360 function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Days360FunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.Days360FunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.Days360FunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.YearFracFunctionExpression">
            <summary>
            Represents YEARFRAC function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YearFracFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.YearFracFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YearFracFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YearFracFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YearFracFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.AMorDeGrcFunctionExpression">
            <summary>
            Represents AMORDEGRC function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AMorDeGrcFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.AMorDeGrcFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AMorDeGrcFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.AccrIntFunctionExpression">
            <summary>
            Represents ACCRINT function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AccrIntFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.AccrIntFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AccrIntFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.COUPDAYxxxFunctionExpression">
            <summary>
            Represents COUPDAYxxx function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.COUPDAYxxxFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.COUPDAYxxxFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.COUPDAYxxxFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.F_INV_RTFunctionExpression">
            <summary>
            Represents F.INV.RT function expression.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression" />
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.Beta_DistFunctionExpression">
            <summary>
            Represents BETA.DIST function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.AccrIntMFunctionExpression">
            <summary>
            Represents ACCRINTM function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AccrIntMFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.AccrIntMFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AccrIntMFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.FactDoubleFunctionExpression">
            <summary>
            Represent FACTDOUBLE function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.OneArgumentFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FactDoubleFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FactDoubleFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.DollarFrFunctionExpession">
            <summary>
            Represent DollarFr function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DollarFrFunctionExpession.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DollarFrFunctionExpession.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.DollardeFunctionExpression">
            <summary>
            Represent DOLLARDE function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DollardeFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DollardeFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.AMORLINCFunctionExpression">
            <summary>
            Represents AMORLINC function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AMORLINCFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.AMORLINCFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AMORLINCFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AMORLINCFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.AMORLINCFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.ImSinFunctionExpression">
            <summary>
            Represents IMSIN function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.OneArgumentFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImSinFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ImSinFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImSinFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImSinFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ImSinFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.INTRATEFunctionExpression">
            <summary>
            Represents INTRATE function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.INTRATEFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.INTRATEFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.INTRATEFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.INTRATEFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.INTRATEFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.SQRTPIFunctionExpression">
            <summary>
            Represents SQRTPI function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.OneArgumentFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SQRTPIFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.SQRTPIFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SQRTPIFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SQRTPIFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SQRTPIFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.NOMINALFunctionExpression">
            <summary>
            Represents NOMINAL function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NOMINALFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NOMINALFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NOMINALFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NOMINALFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NOMINALFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.PRICEDISCFunctionExpression">
            <summary>
            Represents PRICEDISC function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEDISCFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PRICEDISCFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEDISCFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEDISCFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEDISCFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.PRICEMATFunctionExpression">
            <summary>
            Represents PRICEMAT function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEMATFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.PRICEMATFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEMATFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEMATFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.PRICEMATFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.YIELDMATFunctionExpression">
            <summary>
            Represents YIELDMAT function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDMATFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.YIELDMATFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDMATFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDMATFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDMATFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.YIELDDISCFunctionExpression">
            <summary>
            Represents YIELDDISC function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDDISCFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.YIELDDISCFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDDISCFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDDISCFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.YIELDDISCFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.DISCFunctionExpression">
            <summary>
            Represents DISC function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DISCFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.DISCFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DISCFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DISCFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.DISCFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.TBILLEQFunctionExpression">
            <summary>
            Represents TBILLEQ function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLEQFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TBILLEQFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLEQFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLEQFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLEQFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.TBILLYIELDFunctionExpression">
            <summary>
            Represents TBILLYIELD function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLYIELDFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TBILLYIELDFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLYIELDFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLYIELDFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLYIELDFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.TBILLPRICEFunctionExpression">
            <summary>
            Represents TBILLPRICE function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLPRICEFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.TBILLPRICEFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLPRICEFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLPRICEFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.TBILLPRICEFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.T_DIST_RTFunctionExpression">
            <summary>
            Represents T.DIST.RT function
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.T_DIST_RTFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.T_DIST_RTFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.T_DIST_RTFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.RECEIVEDFunctionExpression">
            <summary>
            Represents RECEIVED function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RECEIVEDFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.RECEIVEDFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RECEIVEDFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RECEIVEDFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.RECEIVEDFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.QUOTIENTFunctionExpression">
            <summary>
            Represents QUOTIENT function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.QUOTIENTFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.QUOTIENTFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.QUOTIENTFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.QUOTIENTFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.QUOTIENTFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.SERIESSUMFunctionExpression">
            <summary>
            Represents SERIESSUM function
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SERIESSUMFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.SERIESSUMFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SERIESSUMFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">Index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SERIESSUMFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.SERIESSUMFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.WEEKNUMFunctionExpression">
            <summary>
            Represents WEEKNUM function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.WEEKNUMFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.WEEKNUMFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.WEEKNUMFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.WEEKNUMFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.WEEKNUMFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.HypGeomDistFunctionExpression">
            <summary>
            Represents HYPGEOMDIST function
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HypGeomDistFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.HypGeomDistFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HypGeomDistFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.HYPGEOM_DISTFunctionExpression">
            <summary>
            Represents HYPGEOM.DIST function
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HYPGEOM_DISTFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.HYPGEOM_DISTFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.HYPGEOM_DISTFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.NegBinomDistFunctionExpression">
            <summary>
            Represents NEGBINOMDIST function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NegBinomDistFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NegBinomDistFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="firstArg">The first argument.</param>
            <param name="secondArg">The second argument.</param>
            <param name="thirdArg">The third argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NegBinomDistFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltInFunctions.NEGBINOM_DISTFunctionExpression">
            <summary>
            Represents NEGBINOM.DIST function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NEGBINOM_DISTFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.NEGBINOM_DISTFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.NEGBINOM_DISTFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue" /> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ERFC_PRECISEFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ERFC_PRECISEFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ERFC_PRECISEFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ERFC_PRECISEFunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ERFC_PRECISEFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ERF_PRECISEFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BuiltInFunctions.ERF_PRECISEFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ERF_PRECISEFunctionExpression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ERF_PRECISEFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.ASCFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.T_Dist_2TFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FieldNameExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FieldNameExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BuiltInFunctions.FieldNameExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.NotFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.NotFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.NotFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.CalcError">
            <summary>
            Represents a calculation error.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.None">
            <summary>
            There is no error. This value is used internally and it is not supposed to be used directly in your code.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.Null">
            <summary>
            #NULL!
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.DivideByZero">
            <summary>
            #DIV/0!
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.Value">
            <summary>
            #VALUE!
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.Reference">
            <summary>
            #REF!
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.Name">
            <summary>
            #NAME!
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.Number">
            <summary>
            #NUM!
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.NotAvailable">
            <summary>
            #N/A!
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.GettingData">
            <summary>
            #GETTING_DATA
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.Spill">
            <summary>
            #SPILL!
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.Unknown">
            <summary>
            #UNKNOWN!
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.Field">
            <summary>
            #FIELD!
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CalcError.Calc">
            <summary>
            #CALC!
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.CellReference">
            <summary>
            Represents a contextual cell reference.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CellReference.Empty">
            <summary>
            Empty CellReference instance.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.CellReference"/> struct which represents an absolute cell reference.
            </summary>
            <param name="row">An integer indicates the index of the row.</param>
            <param name="column">An integer indicates the index of the column.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.#ctor(System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.CellReference"/> struct.
            </summary>
            <param name="row">An integer indicates the index of the row.</param>
            <param name="column">An integer indicates the index of the column.</param>
            <param name="relation">A <see cref="P:GrapeCity.CalcEngine.CellReference.Relation"/> value indicates the relative of this <see cref="T:GrapeCity.CalcEngine.CellReference"/> with the source.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellReference.Relation">
            <summary>
            Gets the relative of this <see cref="T:GrapeCity.CalcEngine.CellReference"/> with the source.
            </summary>
            <value>A <see cref="P:GrapeCity.CalcEngine.CellReference.Relation"/> value represents the relative of this <see cref="T:GrapeCity.CalcEngine.CellReference"/> with the source.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellReference.Column">
            <summary>
            Gets the index of the column.
            </summary>
            <value>An integer represents the index of the column.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellReference.Row">
            <summary>
            Gets the index of the row.
            </summary>
            <value>An integer represents the index of the row.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns><c>true</c> if this instance is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.IsValid">
            <summary>
            Return <c>true</c> if this <see cref="T:GrapeCity.CalcEngine.CellReference"/> object represents a valid cell reference.
            </summary>
            <returns><c>true</c> if this <see cref="T:GrapeCity.CalcEngine.CellReference"/> object represents a valid cell reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.IsAbsoluteValid(GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Indicates whether this CellReference is valid in the specified reference source.
            </summary>
            <param name="source">The source.</param>
            <returns><c>true</c> if this CellReference is valid in the specified reference source; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.op_Equality(GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.CellReference)">
            <summary>
            Returns whether two <see cref="T:GrapeCity.CalcEngine.CellReference"/> are equals.
            </summary>
            <param name="cell1">The fisrt <see cref="T:GrapeCity.CalcEngine.CellReference"/> value to compare.</param>
            <param name="cell2">The second <see cref="T:GrapeCity.CalcEngine.CellReference"/> value to compare.</param>
            <returns><c>true</c> if two values are equals; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.op_Inequality(GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.CellReference)">
            <summary>
            Returns whether two <see cref="T:GrapeCity.CalcEngine.CellReference"/> are not equals.
            </summary>
            <param name="cell1">The fisrt <see cref="T:GrapeCity.CalcEngine.CellReference"/> value to compare.</param>
            <param name="cell2">The second <see cref="T:GrapeCity.CalcEngine.CellReference"/> value to compare.</param>
            <returns><c>true</c> if two values are not equals; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.Equals(GrapeCity.CalcEngine.CellReference)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.CellReference"/> is equal to another <see cref="T:GrapeCity.CalcEngine.CellReference"/> of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.CellReference"/> is equal to the other <see cref="T:GrapeCity.CalcEngine.CellReference"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.Transpose">
            <summary>
            Transposes (rotate) rows to columns and vice versa.
            </summary>
            <returns>A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value represents the transposed <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.CompareTo(GrapeCity.CalcEngine.CellReference)">
            <summary>
            Compares the current <see cref="T:GrapeCity.CalcEngine.CellReference"/> with another <see cref="T:GrapeCity.CalcEngine.CellReference"/>.
            </summary>
            <param name="other">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> to compare with this <see cref="T:GrapeCity.CalcEngine.CellReference"/>.</param>
            <returns>A value that indicates the relative order of the <see cref="T:GrapeCity.CalcEngine.CellReference"/> values being compared.
            The return value has the following meanings:
            Less than zero: This object is less than the other parameter.
            Zero: This object is equal to other.
            Greater than zero: This object is greater than other.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.ToAbsolute(System.Int32,System.Int32)">
            <summary>
            Returns the absolute reference of the <see cref="T:GrapeCity.CalcEngine.CellReference"/> object which relates with the context cell
            (specified by <paramref name="contextRow"/> and <paramref name="contextColumn"/>.
            </summary>
            <param name="contextRow">An integer indicates the row index of context cell.</param>
            <param name="contextColumn">An integer indicates the column index of context cell.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.ToRelative(System.Int32,System.Int32)">
            <summary>
            Returns the target reference of the <see cref="T:GrapeCity.CalcEngine.CellReference"/> object which relates with the context cell
            (specified by <paramref name="contextRow"/> and <paramref name="contextColumn"/>.
            Position state of the <see cref="T:GrapeCity.CalcEngine.CellReference"/> is unchanged.
            </summary>
            <param name="contextRow">An integer value indicates the context row index.</param>
            <param name="contextColumn">An integer value indicates the context column index.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.CellReference"/> indicates the target location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.GetRefExpressionFlags">
            <summary>
            Gets a <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/> value represents the relative-state of this <see cref="T:GrapeCity.CalcEngine.CellReference"/>.
            </summary>
            <returns>A <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/> value represents the relative-state of this <see cref="T:GrapeCity.CalcEngine.CellReference"/>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.Translate(System.Int32,System.Int32)">
            <summary>
            Translates this <seealso cref="T:GrapeCity.CalcEngine.CellReference"/> by the specified amount.
            </summary>
            <param name="translateRow">The amount to offset the y-coordinate.</param>
            <param name="translateColumn">>The amount to offset the x-coordinate.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.ToContextWithoutReorder(System.Int32,System.Int32)">
            <summary>
            Returns the target reference of the <see cref="T:GrapeCity.CalcEngine.CellReference"/> object which relates with the context cell
            (specified by <paramref name="contextRow"/> and <paramref name="contextColumn"/>.
            Position state of the <see cref="T:GrapeCity.CalcEngine.CellReference"/> is unchanged.
            </summary>
            <param name="contextRow">An integer indicates the row index of context cell.</param>
            <param name="contextColumn">An integer indicates the column index of context cell.</param>
            
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.Offset(System.Int32,System.Int32)">
            <summary>
            Translates this <seealso cref="T:GrapeCity.CalcEngine.CellReference"/> by the specified amount.
            </summary>
            <param name="translateRow">The amount to offset the y-coordinate.</param>
            <param name="translateColumn">>The amount to offset the x-coordinate.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.SwitchReferenceType">
            <summary>
            Switch the reference type of this <see cref="T:GrapeCity.CalcEngine.CellReference"/>.
            </summary>
            <returns>The new reference type.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReference.SwitchReferenceType(GrapeCity.CalcEngine.CellRelation)">
            <summary>
            Switch the reference type of this <see cref="T:GrapeCity.CalcEngine.CellReference"/> to the specified.
            </summary>
            <param name="newReferenceType">The new reference type.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="source">The reference source whether the cell belong.</param>
            <param name="row">An integer represents the top row index of source range to swap.</param>
            <param name="column">An integer represents the left column index of source range to swap.</param>
            <param name="toRow">An integer represents the top row index of target range to swap.</param>
            <param name="toColumn">An integer represents the left column index of source range to swap.</param>
            <param name="rowCount">An integer represents the total row count to swap.</param>
            <param name="columnCount">An integer represents the total column count to swap.</param>
            <param name="contextRow">An integer represent the row index of cell which contains the expression.</param>
            <param name="contextColumn">An integer represent the column index of cell which contains the expression.</param>
            <param name="contextRefSource">The context reference source where the expression is evaluted.</param>
            <param name="parsingContext">the formula parser.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder,GrapeCity.CalcEngine.CellReference)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
            <param name="cellRef">The cell reference to unparse.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellReferenceExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="source">The reference source whether the cell belong.</param>
            <param name="row">An integer represents the top row index of source range to swap.</param>
            <param name="column">An integer represents the left column index of source range to swap.</param>
            <param name="toRow">An integer represents the top row index of target range to swap.</param>
            <param name="toColumn">An integer represents the left column index of source range to swap.</param>
            <param name="rowCount">An integer represents the total row count to swap.</param>
            <param name="columnCount">An integer represents the total column count to swap.</param>
            <param name="contextRow">An integer represent the row index of cell which contains the expression.</param>
            <param name="contextColumn">An integer represent the column index of cell which contains the expression.</param>
            <param name="contextRefSource">The context reference source where the expression is evaluted.</param>
            <param name="parsingContext">the formula parser.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellAbsoluteReferenceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder,GrapeCity.CalcEngine.CellReference)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
            <param name="cellRef">The cell reference to unparse.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.CellCoverReferenceExpression">
            <summary>
            Represents an invalid <see cref="T:GrapeCity.CalcEngine.CellReferenceExpression"/>.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.CellReferenceExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.CellCoverReferenceExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.CellCoverReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellCoverReferenceExpression.#ctor">
            <summary>
            Represents a cover reference for #REF!
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellCoverReferenceExpression.IsRefExpression">
            <summary>
            Determines whether this expression is a cover of #REF!.
            </summary>
            <returns><c>true</c> if this expression is a cover of #REF!; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.CellValue">
            <summary>
            Specifies a cell value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CellValue.Invalid">
            <summary>
            Represents an invalid cell value.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.GetNumber(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets numeric value from the <see cref="T:GrapeCity.CalcEngine.Value"/> object.
            </summary>
            <param name="context">The evaluation context.</param>
            <returns>The numeric value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.Equals(GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.CellValue"/> value is equal to another <see cref="T:GrapeCity.CalcEngine.CellValue"/> value.
            </summary>
            <param name="other">A <see cref="T:GrapeCity.CalcEngine.CellValue"/> value to compare with this <see cref="T:GrapeCity.CalcEngine.CellValue"/> value.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.Equals(GrapeCity.CalcEngine.CellValue)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.CellValue"/> value is equal to another <see cref="T:GrapeCity.CalcEngine.CellValue"/> value.
            </summary>
            <param name="other">A <see cref="T:GrapeCity.CalcEngine.CellValue"/> value to compare with this <see cref="T:GrapeCity.CalcEngine.CellValue"/> value.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.IsValid">
            <summary>
            Determines whether this cell value is valid.
            </summary>
            <returns><c>true</c> if this cell value is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellValue.Number">
            <summary>
            Gets the <see cref="T:System.Double"/> value.
            </summary>
            <value>A <see cref="T:System.Double"/> value represents the numeric value.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.GetText(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets the <see cref="T:System.String"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellValue.Logical">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value represents the boolean value.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellValue.Error">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.CalcError"/> value.
            </summary>
            <value>A <see cref="T:GrapeCity.CalcEngine.CalcError"/> value represents the error.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellValue.DateTime">
            <summary>
            Gets the <see cref="P:GrapeCity.CalcEngine.CellValue.DateTime"/> value.
            </summary>
            <value>A <see cref="P:GrapeCity.CalcEngine.CellValue.DateTime"/> value represents the date.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellValue.TimeSpan">
            <summary>
            Gets the <see cref="P:GrapeCity.CalcEngine.CellValue.TimeSpan"/> value.
            </summary>
            <value>A <see cref="P:GrapeCity.CalcEngine.CellValue.TimeSpan"/> value represents the time span.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellValue.Text">
            <summary>
            Gets the <see cref="T:System.String"/> value.
            </summary>
            <value>A <see cref="T:System.String"/> value represents the text.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellValue.Object">
            <summary>
            Gets the <see cref="T:System.Object"/> value.
            </summary>
            <value>An <see cref="T:System.Object"/> value represents the value.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellValue.Type">
            <summary>
            Gets a <see cref="T:GrapeCity.CalcEngine.CellValueType"/> value that indicates the value type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.CellValue.Type2">
            <summary>
            Gets a <see cref="T:GrapeCity.CalcEngine.ValueType"/> value that indicates the value type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.Reset">
            <summary>
            Resets this cell value to <c>null</c>.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.Box">
            <summary>
            Returned the boxed value of this cell value.
            </summary>
            <returns>An <see cref="T:System.Object"/> instance represents the boxed value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.SetValue(System.Double)">
            <summary>
            Sets a number without checking value.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.SetIntegerValue(System.Int32)">
            <summary>
            The function is used by some features like RichData. Calculation Engine should never process integer but actual number (double)
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.SetValue(GrapeCity.CalcEngine.EvaluationContext,System.Double)">
            <summary>
            Sets a number with checking value.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.SetValue(System.Boolean)">
            <summary>
            Set a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.SetValue(System.TimeSpan)">
            <summary>
            Set a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.SetValue(System.DateTime)">
            <summary>
            Set a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.SetValue(System.String)">
            <summary>
            Sets a string without checking value.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.SetValue(GrapeCity.CalcEngine.EvaluationContext,System.String)">
            <summary>
            Sets a string with checking value.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.SetValue(System.Object,System.Boolean)">
            <summary>
            Sets the <see cref="T:System.Object" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to set.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CellValue.SetArrayValues(System.Array)">
            <summary>
            Sets array of values as <see cref="T:GrapeCity.CalcEngine.ArrayConstants"/> type.
            </summary>
            <returns><c>true</c> if the array is set successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.SpilledValueType">
            <summary>
            Specifies the type of a cell value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.SpilledValueType.Number">
            <summary>
            Specifies a double precision floating point number.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.SpilledValueType.Logical">
            <summary>
            Specifies a logical (boolean) value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.SpilledValueType.Error">
            <summary>
            Specifies a <see cref="T:GrapeCity.CalcEngine.CalcError"/>. 
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.SpilledValueType.Text">
            <summary>
             Specifies text.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.SpilledValueType.DateTime">
            <summary>
            Specifies a <see cref="F:GrapeCity.CalcEngine.SpilledValueType.DateTime"/> value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.SpilledValueType.TimeSpan">
            <summary>
            Specifies a <see cref="F:GrapeCity.CalcEngine.SpilledValueType.TimeSpan"/> value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.SpilledValueType.Empty">
            <summary>
            Specifies an empty (<c>null</c>) value.
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.CellValueType">
            <summary>
            Specifies the type of a cell value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CellValueType.Number">
            <summary>
            Specifies a double precision floating point number.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CellValueType.Logical">
            <summary>
            Specifies a logical (boolean) value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CellValueType.Error">
            <summary>
            Specifies a <see cref="T:GrapeCity.CalcEngine.CalcError"/>. 
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CellValueType.Text">
            <summary>
             Specifies text.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CellValueType.DateTime">
            <summary>
            Specifies a <see cref="F:GrapeCity.CalcEngine.CellValueType.DateTime"/> value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CellValueType.TimeSpan">
            <summary>
            Specifies a <see cref="F:GrapeCity.CalcEngine.CellValueType.TimeSpan"/> value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CellValueType.Empty">
            <summary>
            Specifies an empty (<c>null</c>) value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CellValueType.Object">
            <summary>
            Specifies a general object.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstantsExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstantsExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstantsExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstantsExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstantsExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstantsExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstantsExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BooleanExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.BooleanExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.BooleanExpression.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.BooleanExpression"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BooleanExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BooleanExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BooleanExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BooleanExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BooleanExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntegerExpression.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.IntegerExpression"/> class.
            </summary>
            <param name="value">An integer value indicates the constant.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntegerExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.IntegerExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntegerExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntegerExpression.Create(System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:GrapeCity.CalcEngine.IntegerExpression"/> object from the specified value.
            </summary>
            <param name="value">An integer value indicates the constant.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.IntegerExpression"/> value represents the new created <see cref="T:GrapeCity.CalcEngine.IntegerExpression"/> object.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntegerExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntegerExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntegerExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntegerExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntegerExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleExpression.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.DoubleExpression"/> class.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value indicates the constant double value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.ErrorExpression">
            <summary>
            Represents an error expression.
            </summary>
            <seealso cref="!:GrapeCity.CalcEngine.ConstantExpression&lt;GrapeCity.CalcEngine.CalcError&gt;" />
        </member>
        <member name="M:GrapeCity.CalcEngine.ErrorExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.ErrorExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.ErrorExpression.#ctor(GrapeCity.CalcEngine.CalcError)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ErrorExpression"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ErrorExpression.Get(GrapeCity.CalcEngine.CalcError)">
            <summary>
            Gets the error expression via the specified CalcError.
            </summary>
            <param name="error">The CalcError value.</param>
            <returns>A <see cref="!:ErrorExpression."/> value represents the error expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ErrorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ErrorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ErrorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ErrorExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ErrorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StringExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.StringExpression"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StringExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StringExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StringExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StringExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StringExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StringExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EmptyExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.EmptyExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EmptyExpression.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:GrapeCity.CalcEngine.EmptyExpression"/> class from being created.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EmptyExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EmptyExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EmptyExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EmptyExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EmptyExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="F:GrapeCity.CalcEngine.Criteria.Filtering">
            <summary>
            Represents a criteria which allow matching wilcard with any operator.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.Criteria.None">
            <summary>
            Represents a criteria which allow matching wilcard with any operator.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.Criteria.Default">
            <summary>
            Represents a criteria which allow matching wilcard with any operator.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Criteria.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.Criteria"/> struct.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.Criteria._useTextAsNumeric">
            <summary>
            For matching data quickly.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Criteria.IsEmptyMatched">
            <summary>
            Determines whether the empty value matches with this criteria.
            </summary>
            <returns><c>true</c> if the empty value matches with this criteria; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.Criteria.DefaultOperator">
            <summary>
            Represents the default operator should be applied if the condition is just a normal text
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.Criteria.DefaultOperator.Equals">
            <summary>
            FilterOperatorType.Equals should be applied
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.Criteria.DefaultOperator.StartWiths">
            <summary>
            The wildcard [text*] should be aplied
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.CriteriaOperatorType">
            <summary>
              Specifies the operator for custom filtering.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CriteriaOperatorType.Equals">
            <summary>
              Shows results which are equal to the criteria.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CriteriaOperatorType.GreaterThan">
            <summary>
              Shows results which are greater than the criteria.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CriteriaOperatorType.GreaterThanOrEqual">
            <summary>
              Shows results which are greater than or equal to the criteria.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CriteriaOperatorType.LessThan">
            <summary>
              Shows results which are less than the criteria.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CriteriaOperatorType.LessThanOrEqual">
            <summary>
              Shows results which are less than or equal to the criteria.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.CriteriaOperatorType.DoesNotEquals">
            <summary>
              Shows results which are not equal to the criteria.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Wildcard.IsMatch(GrapeCity.CalcEngine.WildcardToken[],System.String,System.Boolean,System.Int32,System.StringComparison)">
            <summary>
              Matches the wilcard string with tokens. It uses non-recursive algorithm to got best performance which it's possible
              in my ability :(
            </summary>
            <param name="tokens">The tokens.</param>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Wildcard.ParseTokens(System.String,System.Boolean)">
            <summary>
            Parses the wildcard tokens.
            </summary>
            <param name="pattern">A string value indicates the wilcard pattern.</param>
            <param name="startsWithTokens">if set to <c>true</c>, the pattern intend to be used for "starts with" comparasion.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.WildcardToken" /> array represents the wilcard tokens.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.WildcardToken">
            <summary>
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.WildcardToken.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.WildcardToken" /> struct.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.WildcardToken.#ctor(System.Char)">
            <summary>
              Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.WildcardToken" /> struct.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DefinedNameExpression.#ctor(GrapeCity.CalcEngine.ExpressionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.DefinedNameExpression"/> class.
            </summary>
            <param name="definedName">Name of the defined.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.DefinedNameExpression.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.DefinedNameExpression.GetDefinedName">
            <summary>
            Gets the defined name which is referred from this <see cref="T:GrapeCity.CalcEngine.DefinedNameExpression"/>.
            </summary>
            <returns>A <see cref="T:GrapeCity.CalcEngine.IDefinedName"/> value represents the defined name referred from this <see cref="T:GrapeCity.CalcEngine.DefinedNameExpression"/>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DefinedNameExpression.ContainsDefinedName(GrapeCity.CalcEngine.IDefinedName)">
            <summary>
            Determines whether this <see cref="T:GrapeCity.CalcEngine.Expression" /> contains the specified <see cref="T:GrapeCity.CalcEngine.IDefinedName" />.
            </summary>
            <param name="definedName">An <see cref="T:GrapeCity.CalcEngine.IDefinedName" /> object indicates the <see cref="T:GrapeCity.CalcEngine.IDefinedName" /> to check.</param>
            <returns><c>true</c> if this <see cref="T:GrapeCity.CalcEngine.Expression" /> contains the specified <see cref="T:GrapeCity.CalcEngine.IDefinedName" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.IDefinedName.Scope">
            <summary>
            Gets the scoped reference source of this <see cref="T:GrapeCity.CalcEngine.IDefinedName"/>.
            </summary>
            <value>A <see cref="T:GrapeCity.CalcEngine.ICalcWorksheet"/> object indicates the scoped reference source of this <see cref="T:GrapeCity.CalcEngine.IDefinedName"/>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IDefinedName.Workbook">
            <summary>
            Gets the workbook which contains this <see cref="T:GrapeCity.CalcEngine.ICalcWorkbook"/>.
            </summary>
            <value>An <see cref="T:GrapeCity.CalcEngine.ICalcWorkbook"/> object which contains this <see cref="T:GrapeCity.CalcEngine.IDefinedName"/>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IDefinedName.Expression">
            <summary>
            Gets the expression which the defined name refers to.
            </summary>
            <value>An <see cref="P:GrapeCity.CalcEngine.IDefinedName.Expression"/> object the expression which the defined name refers to.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IDefinedName.RefersToR1C1">
            <summary>
            Gets or sets the formula in R1C1 format which the defined name refers to.
            </summary>
            <value>The string value represents formula which the defined name refers to.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IDefinedName.Name">
            <summary>
            Gets the name of this <see cref="T:GrapeCity.CalcEngine.IDefinedName"/>.
            </summary>
            <value>A string value indicates the name of this <see cref="T:GrapeCity.CalcEngine.IDefinedName"/>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IDefinedName.IsUndefinedName">
            <summary>
            Determines whether this <see cref="T:GrapeCity.CalcEngine.IDefinedName"/> is an undefined name.
            </summary>
            <returns><c>true</c> if this <see cref="T:GrapeCity.CalcEngine.IDefinedName"/> is an undefined name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IDefinedName.GetScopedExpression(GrapeCity.CalcEngine.FormulaEngine,GrapeCity.CalcEngine.Expression)">
            <summary>
            Gets the correct scoped expression depends on the current context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <param name="refSourceExpr">A <see cref="P:GrapeCity.CalcEngine.IDefinedName.Expression"/> object indicates the left argument expression.</param>
            <returns>A <see cref="P:GrapeCity.CalcEngine.IDefinedName.Expression"/> value represents the correct scoped expression depends on the current context.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IDefinedName.GetDefinedNameExpression">
            <summary>
            Gets the defined name expression for this defined name.
            </summary>
            <returns>A <see cref="T:GrapeCity.CalcEngine.DefinedNameExpression"/> object represents defined name expression of this <see cref="T:GrapeCity.CalcEngine.IDefinedName"/>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GrapeCity.CalcEngine.IDefinedName.IsReferredTo(GrapeCity.CalcEngine.IDefinedName)" -->
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.DynamicArray`1"/> struct.
            </summary>
            <param name="capacity">The initialized capacity of the array.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.DynamicArray`1"/> struct.
            </summary>
            <param name="array">The input array.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.Clear">
            <summary>
            Clears all items from this instance.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.Empty">
            <summary>
            Clears all items from this instance but doesn't release the internal array.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.ClearIfNeeded(System.Int32)">
            <summary>
            Clears all item from this instance. The internal array is released only if it's big enough.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.Add(`0@)">
            <summary>
            Adds the given object to the end of this array. The size of the array is increased by one. 
            If required, the capacity of the array is doubled before adding the new element.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.Add(`0)">
            <summary>
            Adds the given object to the end of this array. The size of the array is increased by one. 
            If required, the capacity of the array is doubled before adding the new element.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the given object to the end of this list. The size of the list is increased by one. 
            If required, the capacity of the list is doubled before adding the new element.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:GrapeCity.CalcEngine.DynamicArray`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:GrapeCity.CalcEngine.DynamicArray`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:GrapeCity.CalcEngine.DynamicArray`1"/>.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:GrapeCity.CalcEngine.DynamicArray`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:GrapeCity.CalcEngine.DynamicArray`1"/>.</param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:GrapeCity.CalcEngine.DynamicArray`1"/>, if found; otherwise, –1.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.ToArray">
            <summary>
            Gets the array of <see cref="!:&lt;T&gt;"/> which contains used items only.
            </summary>
            <returns>A <see cref="!:T[]"/> value represents the array of <see cref="!:&lt;T&gt;"/> which contains used items only.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.Sort``1(``0[],System.Boolean)">
            <summary>
            Sorts elements in a pair of keys and values.
            </summary>
            <typeparam name="TKey">The type of the elements of the key array.</typeparam>
            <param name="keys">The one-dimensional, zero-based array that contains the keys to sort.</param>
            <param name="sortValues">if set to <c>true</c>, all pairs have same key will be sorted by values.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.AddUniqueSorted(`0@,System.Collections.Generic.IComparer{`0})">
            <summary>
            Adds the given object to the this array but keep all items are sorted. 
            If required, the capacity of the array is doubled before adding the new element.
            </summary>
            <remarks>The array must be already sorted before invoke this function.</remarks>
        </member>
        <member name="M:GrapeCity.CalcEngine.DynamicArray`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes elements in range of index from the <see cref="T:GrapeCity.CalcEngine.DynamicArray`1"/>.
            </summary>
            <param name="from">The zero-based index of the first item to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluatedNameExpression.GuessReturnTypeCore">
            <summary>
            Guesses the type of the returned value of the expression.
            </summary>
            <returns>The type of the returned value.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.EvaluationContext">
            <summary>
            Represents a structure which manages all general operations related to expression's arguments or function's parameters.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Today">
            <summary>
            Work same as TODAY function
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Int(System.Double)">
            <summary>
            Work same as INT function
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Ceiling(System.Double,System.Double)">
            <summary>
            Work same as CEILING function
            </summary>
            <param name="number">The number.</param>
            <param name="significance">The significance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.GetValues(GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.RangeReference@,GrapeCity.CalcEngine.ArrayConstants)">
            <summary>
            Gets value from a range of cells to ValuesArray.
            </summary>
            <param name="source">The reference source.</param>
            <param name="rangeRef">The range reference.</param>
            <param name="valuesArray">The values array.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.FactDouble(System.Double)">
            <summary>
            Returns the double factorial of a number.
            </summary>
            <param name="number">The value for which to return the double factorial. If number is not an integer, it is truncated.</param>
            <returns>A double value represents the double factorial of a number.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.MRound(System.Double,System.Double)">
            <summary>
            Returns a number rounded to the desired multiple.
            </summary>
            <param name="number">The value to round.</param>
            <param name="multiple">The multiple to which you want to round number.</param>
            <returns>A double value represents the number rounded to the desired multiple.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.ConfidenceT(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the confidence interval for a population mean, using a Student's t distribution.
            </summary>
            <param name="alpha">The significance level used to compute the confidence level. The confidence level equals 100*(1 - alpha)%, or in other words, an alpha of 0.05 indicates a 95 percent confidence level.</param>
            <param name="stdev">The population standard deviation for the data range and is assumed to be known.</param>
            <param name="size">The sample size.</param>
            <returns>A double value represents the confidence interval for a population mean, using a Student's t distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.GetDay(System.Double)">
            <summary>
            Gets the day of a date, represented by a serial number.
            </summary>
            <param name="days">The date of the day you are trying to find.</param>
            <returns>The day is given as an integer ranging from 1 to 31.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Month(System.Double)">
            <summary>
            Gets the month of a date represented by a serial number.
            </summary>
            <param name="days">The date of the month you are trying to find.</param>
            <returns>The month is given as an integer, ranging from 1 (January) to 12 (December).</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Unicode(System.String)">
            <summary>
            Returns the number (code point) corresponding to the first character of the text.
            </summary>
            <param name="text">The character for which you want the Unicode value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Unichar(System.Int32)">
            <summary>
            Returns the Unicode character that is referenced by the given numeric value.
            </summary>
            <param name="number">Number is the Unicode number that represents the character.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Phi(System.Double)">
            <summary>
            Returns the value of the density function for a standard normal distribution.
            </summary>
            <param name="number">the number for which you want the density of the standard normal distribution.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.PermutationA(System.Double,System.Double)">
            <summary>
            Returns the number of permutations for a given number of objects (with repetitions) that can be selected from the total objects.
            </summary>
            <param name="number">An integer that describes the total number of objects.</param>
            <param name="chosen">An integer that describes the number of objects in each permutation.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.PDuration(System.Double,System.Double,System.Double)">
            <summary>
            Returns the number of periods required by an investment to reach a specified value.
            </summary>
            <param name="rate">Rate is the interest rate per period.</param>
            <param name="pv">Pv is the present value of the investment.</param>
            <param name="fv">Fv is the desired future value of the investment.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Gamma(System.Double)">
            <summary>
            Return the gamma function value.
            </summary>
            <param name="number">An double value indicates the input number.</param>
            <returns>The gamma function value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.GammaLn_Precise(System.Double)">
            <summary>
            Returns the natural logarithm of the gamma function, Γ(x).
            </summary>
            <param name="x">The value for which you want to calculate GAMMALN.PRECISE.</param>
            <returns>A double value represents the natural logarithm of the gamma function, Γ(x).</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.RRI(System.Double,System.Double,System.Double)">
            <summary>
            Returns an equivalent interest rate for the growth of an investment.
            </summary>
            <param name="nper">Nper is the number of periods for the investment.</param>
            <param name="pv">Pv is the present value of the investment.</param>
            <param name="fv">Fv is the future value of the investment.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.IsoWeeknum(System.Double)">
            <summary>
            Returns number of the ISO week number of the year for a given date.
            </summary>
            <param name="number">Date is the date-time code used by Excel for date and time calculation.</param>
            <returns>The ISO week number of the year for a given date</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Binom_Dist(System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            Returns the individual term binomial distribution probability.
            </summary>
            <param name="number_s">The number of successes in trials.</param>
            <param name="trials">The number of independent trials.</param>
            <param name="probability">The probability of success on each trial.</param>
            <param name="cumulative">A logical value that determines the form of the function. If cumulative is TRUE, then BINOM.DIST returns the cumulative distribution function, which is the probability that there are at most number_s successes; if FALSE, it returns the probability mass function, which is the probability that there are number_s successes.</param>
            <returns>A double value represents the individual term binomial distribution probability.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.T_Dist(System.Double,System.Int64,System.Boolean)">
            <summary>
            Returns the Student's left-tailed t-distribution.
            </summary>
            <param name="x">The numeric value at which to evaluate the distribution.</param>
            <param name="deg_freedom">An integer indicating the number of degrees of freedom.</param>
            <param name="cumulative">A logical value that determines the form of the function. If cumulative is TRUE, T.DIST returns the cumulative distribution function; if FALSE, it returns the probability density function.</param>
            <returns>A double value represents the Student's left-tailed t-distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.T_Inv_2T(System.Double,System.Int32)">
            <summary>
            Returns the two-tailed inverse of the Student's t-distribution.
            </summary>
            <param name="probability">The probability associated with the Student's t-distribution.</param>
            <param name="deg_freedom">The number of degrees of freedom with which to characterize the distribution.</param>
            <returns>A double value represents the two-tailed inverse of the Student's t-distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.T_Dist_2T(System.Double,System.Int64)">
            <summary>
            Returns the two-tailed Student's t-distribution.
            </summary>
            <param name="probability">The numeric value at which to evaluate the distribution.</param>
            <param name="deg_freedom">An integer indicating the number of degrees of freedom.</param>
            <returns>A <see cref="T:System.Double"/> value represents the two-tailed Student's t-distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Beta_Inv(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the inverse of the beta cumulative probability density function (BETA.DIST).
            </summary>
            <param name="probability">A probability associated with the beta distribution.</param>
            <param name="alpha">A parameter of the distribution.</param>
            <param name="beta">A parameter the distribution.</param>
            <param name="lowerBound">A lower bound to the interval of x. Default value should be 0.0.</param>
            <param name="upperBound">An upper bound to the interval of x. Default value should be 1.0.</param>
            <returns>A double value represents the inverse of the beta cumulative probability density function.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.ReflectActualReferenceSource(GrapeCity.CalcEngine.IReferenceSource@)">
            <summary>
            Reflects the current <paramref name="source"/> to actual <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object (the corresponding external worksheet)
            </summary>
            <param name="source">The actual <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object to reflect to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Returns the beta distribution.
            </summary>
            <param name="x">The value between A and B at which to evaluate the function.</param>
            <param name="alpha">A parameter of the distribution.</param>
            <param name="beta">A parameter the distribution.</param>
            <param name="cumulative">if set to <c>true</c> [cumulative].</param>
            <param name="lowerBound">A lower bound to the interval of x. Default value should be 0.0.</param>
            <param name="upperBound">An upper bound to the interval of x. Default value should be 1.0.</param>
            <returns>A double value represents the inverse of the beta cumulative probability density function.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.ChiSquaredDistributionCumulative(System.Double,System.Int64)">
            <summary>
            Returns the chi-squared distribution using the cumulative distribution function.
            </summary>
            <param name="x">The value at which you want to evaluate the distribution.</param>
            <param name="deg_freedom">The number of degrees of freedom.</param>
            <returns>A double value represents the cumulative distribution function.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.ChiSquaredDistribution(System.Double,System.Int64)">
            <summary>
            Returns the chi-squared distribution using the probability density function.
            </summary>
            <param name="x">The value at which you want to evaluate the distribution.</param>
            <param name="deg_freedom">The number of degrees of freedom.</param>
            <returns>A double value represents the probability density function.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.InverseChiSquaredDistribution(System.Double,System.Int64)">
            <summary>
            Returns the inverse of the left-tailed probability of the chi-squared distribution.
            </summary>
            <param name="probability">A probability associated with the chi-squared distribution.</param>
            <param name="deg_freedom">The number of degrees of freedom.</param>
            <returns>A double value represents the inverse of the left-tailed probability of the chi-squared distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.GetPercentileQuartile(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Returns the k-th percentile or quartile of values in a range, where k is in the range 0..1, inclusive or exclusive.
            </summary>
            <param name="arrayLength">The total number of items in array or range of data that defines relative standing.</param>
            <param name="k">The percentile value in the range 0..1.</param>
            <param name="quartile">if set to <c>true</c> [quartile].</param>
            <param name="exclusive">if set to <c>true</c>, k-th indicates exclusive percentile or quartile. Otherwise, <c>false</c>.</param>
            <returns>An integer value indicates the k-th percentile or quartile.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.PercentRank(System.Double,System.Int32,System.Boolean)">
            <summary>
            Returns the rank of a value in a data set as a percentage (0..1, inclusive or exclusive) of the data set.
            </summary>
            <param name="value">The value for which you want to know the rank.</param>
            <param name="significance">A value that identifies the number of significant digits for the returned percentage value. If omitted, PERCENTRANK.EXC uses three digits (0.xxx).</param>
            <param name="exclusive">if set to <c>true</c>, the result will be percentage exclusive. Otherwise, inclusive.</param>
            <returns>A double value represents the rank of a value in a data set as a percentage (0..1, inclusive or exclusive) of the data set.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.FDist(System.Double,System.Double,System.Double)">
            <summary>
            Returns the (right-tailed) F probability distribution (degree of diversity) for two data sets.
            </summary>
            <param name="x">The value at which to evaluate the function.</param>
            <param name="numeratorDegrees">The numerator degrees of freedom.</param>
            <param name="denominatorDegrees">The denominator degrees of freedom.</param>
            <returns>A double value represents the (right-tailed) F probability distribution (degree of diversity) for two data sets.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.DollarFr(System.Double,System.Double)">
            <summary>
            Use DOLLARFR to convert decimal numbers to fractional dollar numbers, such as securities prices.
            </summary>
            <param name="decimal_dollar">A decimal number.</param>
            <param name="fraction">The integer to use in the denominator of a fraction.</param>
            <returns>A double value represent the fractional dollar numbers.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.DollarDe(System.Double,System.Double)">
            <summary>
            Converts a dollar price expressed as an integer part and a fraction part, such as 1.02, into a dollar price expressed as a decimal number.
            </summary>
            <param name="fractional_dollar">A number expressed as an integer part and a fraction part, separated by a decimal symbol.</param>
            <param name="fraction">The integer to use in the denominator of the fraction.</param>
            <returns>A double value represent the dollar price expressed as a decimal number.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Coupncd(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a number that represents the next coupon date after the settlement date.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A double value represents the next coupon date after the settlement date.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Coupdaysnc(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the number of days from the settlement date to the next coupon date.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A double value represents the number of days from the settlement date to the next coupon date.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Couppcd(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a number that represents the previous coupon date before the settlement date.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A double value represents the previous coupon date before the settlement date.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Coupnum(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A double value represents the number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Coupdays(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the number of days in the coupon period that contains the settlement date.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A double value represents the number of days in the coupon period that contains the settlement date.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Coupdaybs(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the number of days from the beginning of a coupon period until its settlement date.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A double value represents the number of days from the beginning of a coupon period until its settlement date.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Duration(System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the Macauley duration for an assumed par value of $100. Duration is defined as the weighted average of the present value of the cash flows and is used as a measure of a bond price's response to changes in yield.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="coupon">The security's annual coupon rate.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="frequency">The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A double value represents the Macauley duration for an assumed par value of $100.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Effect(System.Double,System.Double)">
            <summary>
            Returns the effective annual interest rate, given the nominal annual interest rate and the number of compounding periods per year.
            </summary>
            <param name="nominal_rate">The nominal interest rate.</param>
            <param name="npery">The number of compounding periods per year.</param>
            <returns>A double value represents the effective annual interest rate.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Pmt(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the payment for a loan based on constant payments and a constant interest rate.
            </summary>
            <param name="rate">The interest rate for the loan.</param>
            <param name="nper">The total number of payments for the loan.</param>
            <param name="pv">The total number of payments for the loan.</param>
            <param name="fv">The future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (zero), that is, the future value of a loan is 0.</param>
            <param name="type">The number 0 (zero) or 1 and indicates when payments are due.</param>
            <returns>A double value represents the payment for a loan based on constant payments and a constant interest rate.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.CumIpmt(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the cumulative interest paid on a loan between start_period and end_period.
            </summary>
            <param name="rate">The interest rate.</param>
            <param name="nper">The total number of payment periods.</param>
            <param name="pv">The present value.</param>
            <param name="start_period">The first period in the calculation. Payment periods are numbered beginning with 1.</param>
            <param name="end_period">The last period in the calculation.</param>
            <param name="type">The timing of the payment.</param>
            <returns>A double value represents the cumulative interest paid on a loan between start_period and end_period.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.CumPrinc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the cumulative principal paid on a loan between start_period and end_period.
            </summary>
            <param name="rate">The interest rate.</param>
            <param name="nper">The total number of payment periods.</param>
            <param name="pv">The present value.</param>
            <param name="start_period">The first period in the calculation. Payment periods are numbered beginning with 1.</param>
            <param name="end_period">The last period in the calculation.</param>
            <param name="type">The timing of the payment.</param>
            <returns>A double value represents the cumulative principal paid on a loan between start_period and end_period.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the lognormal distribution of x, where ln(x) is normally distributed with parameters Mean and Standard_dev.
            </summary>
            <param name="x">The value at which to evaluate the function.</param>
            <param name="mean">The mean of ln(x).</param>
            <param name="standard_dev">The standard deviation of ln(x).</param>
            <param name="cumulative">A logical value that determines the form of the function. If cumulative is TRUE, LOGNORM.DIST returns the cumulative distribution function; if FALSE, it returns the probability density function.</param>
            <returns>A double value represents the lognormal distribution of x.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Norm_S_Dist(System.Double,System.Boolean)">
            <summary>
            Returns the standard normal distribution (has a mean of zero and a standard deviation of one).
            </summary>
            <param name="z">The value for which you want the distribution.</param>
            <param name="cumulative"> Cumulative is a logical value that determines the form of the function. If cumulative is TRUE, NORMS.DIST returns the cumulative distribution function; if FALSE, it returns the probability mass function.</param>
            <returns>A double value represents the standard normal distribution (has a mean of zero and a standard deviation of one).</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Days360(System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the total days between <paramref name="start_date"/> and <paramref name="end_date"/>.
            Each year will have a specified 360 days.
            </summary>
            <param name="start_date">A date that represents the start date.</param>
            <param name="end_date">A date that represents the end date.</param>
            <param name="isEuropeanMethod"><c>true</c> to use European method. Otherwise, use U.S. (NASD) method.</param>
            <param name="isDate1904"><c>true</c> if the 1904 date system is using. Otherwise, <c>false</c>.</param>
            <returns>A double value represents the number of days between two dates based on a 360-day year (twelve 30-day months).</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.YearFrac(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the fraction of the year represented by the number of whole days between two dates.
            </summary>
            <param name="start_date">A date that represents the start date.</param>
            <param name="end_date">A date that represents the end date.</param>
            <param name="basis">The type of day count basis to use.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AMorDeGrc(System.Double,System.Int32,System.Int32,System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            Returns the depreciation for each accounting period.
            </summary>
            <param name="cost">The cost of the asset.</param>
            <param name="date_purchased">The date of the purchase of the asset.</param>
            <param name="first_period">The date of the end of the first period.</param>
            <param name="salvage">The salvage value at the end of the life of the asset.</param>
            <param name="period">The period.</param>
            <param name="rate">The rate of depreciation.</param>
            <param name="basis">The year basis to be used.</param>
            <returns>A double value represents the depreciation for each accounting period.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.ACCRINT(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the accrued interest for a security that pays periodic interest.
            </summary>
            <param name="issue">The security's issue date.</param>
            <param name="first_interest">The security's first interest date.</param>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="par">The security's par value. If you omit par, ACCRINT uses $1,000.</param>
            <param name="frequency"> The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.</param>
            <param name="basis">The type of day count basis to use.</param>
            <param name="calc_method">A logical value that specifies the way to calculate the total accrued interest when the date of settlement is later than the date of first_interest. A value of TRUE (1) returns the total accrued interest from issue to settlement. A value of FALSE (0) returns the accrued interest from first_interest to settlement. If you do not enter the argument, it defaults to TRUE.</param>
            <returns>A double value represents the accrued interest for a security that pays periodic interest.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AccrIntM(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the accrued interest for a security that pays interest at maturity.
            </summary>
            <param name="issue">The security's issue date.</param>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="rate">The security's annual coupon rate.</param>
            <param name="par">The security's par value. If you omit par, ACCRINT uses $1,000.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A double value represents the accrued interest for a security that pays interest at maturity.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AMORLINC(System.Double,System.Int32,System.Int32,System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            Returns the depreciation for each accounting period.
            </summary>
            <param name="cost">The cost of the asset.</param>
            <param name="date_purchased">The date of the purchase of the asset.</param>
            <param name="first_period">The date of the end of the first period.</param>
            <param name="salvage">The salvage value at the end of the life of the asset.</param>
            <param name="period">The period.</param>
            <param name="rate">The rate of depreciation.</param>
            <param name="basis">The year basis to be used.</param>
            <returns>A double value represents the depreciation for each accounting period.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.INTRATE(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the interest rate for a fully invested security.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="investment">The amount invested in the security.</param>
            <param name="redemption">The amount to be received at maturity.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A double value represents the interest rate for a fully invested security.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.SQRTPI(System.Double)">
            <summary>
            Returns the square root of (number * pi).
            </summary>
            <param name="number">The number by which pi is multiplied.</param>
            <returns>A double value represents the square root of (number * pi).</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.NOMINAL(System.Double,System.Double)">
            <summary>
            Returns the nominal annual interest rate, given the effective rate and the number of compounding periods per year.
            </summary>
            <param name="effect_rate">The effect_rate.</param>
            <param name="npery">The npery.</param>
            <returns>A double value represents the nominal annual interest rate, given the effective rate and the number of compounding periods per year.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.PRICEDISC(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the price per $100 face value of a discounted security.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="discount">The security's discount rate.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A <see cref="T:System.Double"/> value represents the price per $100 face value of a discounted security.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.PRICEMAT(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the price per $100 face value of a security that pays interest at maturity.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="issue">The security's issue date, expressed as a serial date number.</param>
            <param name="rate">The security's interest rate at date of issue.</param>
            <param name="yld">The security's annual yield.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A <see cref="T:System.Double"/> value represents the price per $100 face value of a security that pays interest at maturity.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.YIELDMAT(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the annual yield of a security that pays interest at maturity.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="issue">The security's issue date, expressed as a serial date number.</param>
            <param name="rate">The security's interest rate at date of issue.</param>
            <param name="pr">The security's price per $100 face value.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A <see cref="T:System.Double"/> value represents the annual yield of a security that pays interest at maturity.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.YIELDDISC(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the annual yield for a discounted security.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="pr">The security's price per $100 face value.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A <see cref="T:System.Double"/> value represents the annual yield for a discounted security.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.DISC(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the discount rate for a security.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="pr">The security's price per $100 face value.</param>
            <param name="redemption">The security's redemption value per $100 face value.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A <see cref="T:System.Double"/> value represents the discount rate for a security.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.TBILLEQ(System.Double,System.Double,System.Double)">
            <summary>
            Returns the bond-equivalent yield for a Treasury bill.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="discount">The Treasury bill's discount rate.</param>
            <returns>A <see cref="T:System.Double"/> value represents the bond-equivalent yield for a Treasury bill.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.TBILLPRICE(System.Double,System.Double,System.Double)">
            <summary>
            Returns the price per $100 face value for a Treasury bill.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="discount">The Treasury bill's discount rate.</param>
            <returns>A <see cref="T:System.Double"/> value represents the price per $100 face value for a Treasury bill.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.TBILLYIELD(System.Double,System.Double,System.Double)">
            <summary>
            Returns the yield for a Treasury bill.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="pr">The Treasury bill's price per $100 face value.</param>
            <returns>A <see cref="T:System.Double"/> value represents the yield for a Treasury bill.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.RECEIVED(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the amount received at maturity for a fully invested security.
            </summary>
            <param name="settlement">The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.</param>
            <param name="maturity">The security's maturity date. The maturity date is the date when the security expires.</param>
            <param name="investment">The amount invested in the security.</param>
            <param name="discount">The security's discount rate.</param>
            <param name="basis">The type of day count basis to use.</param>
            <returns>A <see cref="T:System.Double"/> value represents the amount received at maturity for a fully invested security.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.QUOTIENT(System.Double,System.Double)">
            <summary>
            Returns the integer portion of a division. Use this function when you want to discard the remainder of a division.
            </summary>
            <param name="numerator">The dividend.</param>
            <param name="denominator">The divisor.</param>
            <returns>A <see cref="T:System.Double"/> value represents the integer portion of a division.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.SERIESSUM(System.Double,System.Double,System.Double,GrapeCity.CalcEngine.Value)">
            <summary>
            Returns the sum of a power series.
            </summary>
            <param name="x">The input value to the power series.</param>
            <param name="n">The initial power to which you want to raise x.</param>
            <param name="m">The step by which to increase n for each term in the series.</param>
            <param name="coefficients">A set of coefficients by which each successive power of x is multiplied. The number of values in coefficients determines the number of terms in the power series.</param>
            <returns>A <see cref="T:System.Double"/> value represents the sum of a power series</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.WEEKNUM(System.Double,System.Int32)">
            <summary>
            Returns the week number of a specific date.
            </summary>
            <param name="serial_number">A date within the week.</param>
            <param name="return_type">A number that determines on which day the week begins.</param>
            <returns>A <see cref="T:System.Double"/> value represents the week number of a specific date. </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.NegBinomDist(System.Int32,System.Double,System.Double)">
            <summary>
            Returns the negative binomial distribution. NEGBINOMDIST returns the probability that there will be number_f failures before the number_s-th success, when the constant probability of a success is probability_s.
            </summary>
            <param name="f">The number of failures.</param>
            <param name="s">The threshold number of successes.</param>
            <param name="probability">The probability of a success.</param>
            <returns>A <see cref="T:System.Double"/> value represents the negative binomial distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.NEGBINOM_DIST(System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the negative binomial distribution, the probability that there will be Number_f failures before the Number_s-th success, with Probability_s probability of a success.
            </summary>
            <param name="number_f">The number of failures.</param>
            <param name="number_s">The threshold number of successes.</param>
            <param name="probability_s">The probability of a success.</param>
            <param name="cumulative">A logical value that determines the form of the function. If cumulative is TRUE, NEGBINOM.DIST returns the cumulative distribution function; if FALSE, it returns the probability density function.</param>
            <returns>A <see cref="T:System.Double"/> value represents the negative binomial distribution.</returns>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext.ExcelDateTimeCompatible">
            <summary>
            Processing date time is compatible with Lotus123. It assumes that 1900 is not a leap year.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.EvaluationContext.FullStack">
            <summary>
            Gets or sets a value indicating whether the current calculation chain has full-stack problem.
            </summary>
            <value><c>true</c> if the current calculation chain has full-stack problem; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext.__isCalculatingArrayFormula">
            <summary>
            Indicates that the formula is evaluating inside an array formula.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext._isInDefinedName">
            <summary>
            Indicates that the formula is evaluating inside and defined name.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext._indexesWrappingEnabled">
            <summary>
            Indicate that the range will be wrapped in case out side of the range of reference source.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext._isCalculatingSingleCellFormula">
            <summary>
            In array formula, multi-cells formula means the expression will use just one corresponding cell in the range.
            The offset of that cell is calculated by the distance between current cell and the top-left cell.
            The single-cell formula means the expression will use all cells of the range.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext._isCalculatingCircularReferences">
            <summary>
            Indicates that circular references are calculating.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext._detectingCircularReferences">
            <summary>
            Indicates that detecting circular references are allowed.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext._structuredReferenceThisRowMode">
            <summary>
            Indicates how the #ThisRow (@) will be evaluated
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext._emptyCellEvaluatedValue">
            <summary>
            Indicates the .NET object result when we evaluate empty cell.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext._continueIfCircular">
            <summary>
            Continue evaluating even if the evaluation is processing a circular cell
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> class.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.EvaluationContext.LanguagePackage">
            <summary>
            Gets the current language package for calculation.
            </summary>
            <value>The <see cref="T:GrapeCity.CalcEngine.ICalcEngineLanguagePackage"/> object represents the language package.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.SetValue(GrapeCity.CalcEngine.PrimitiveValue,System.Object,System.Boolean)">
            <summary>
            Sets the specified value to the <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> instance.
            </summary>
            <param name="target">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> instance indicates the target to set.</param>
            <param name="value">An object instance indicates the value to set.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.SynchronizeOptions">
            <summary>
            Synchronize all customizable options of the evaluation context.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.CleanPrecedentCache">
            <summary>
            Cleans cache data for precedent nodes.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.EvaluationContext.Date1904">
            <summary>
            Gets whether the date system used to convert a date to a serial value starts in 1904.
            </summary>
            <value><c>true</c>, if the date system starts in 1904; otherwise, <c>false</c>. Default is <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AddNumbers(GrapeCity.CalcEngine.IValue,GrapeCity.CalcEngine.GettingNumberOptions@)">
            <summary>
            Adds double values from the specified <see cref="T:GrapeCity.CalcEngine.Value" /> object to the internal DoubleArray of the evaluation context.
            </summary>
            <param name="value">The specified <see cref="T:GrapeCity.CalcEngine.Value" /> object to add double values.</param>
            <param name="options">A <see cref="T:GrapeCity.CalcEngine.GettingNumberOptions"/> value indicates which data will be received.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AddNumbersWithRepeatCount(GrapeCity.CalcEngine.IValue,GrapeCity.CalcEngine.GettingNumberOptions@)">
            <summary>
            Adds double values from the specified <see cref="T:GrapeCity.CalcEngine.Value" /> object to the internal DoubleArray of the evaluation context.
            The repeat count of each number will be tracked.
            </summary>
            <param name="value">The specified <see cref="T:GrapeCity.CalcEngine.Value" /> object to add double values.</param>
            <param name="options">A <see cref="T:GrapeCity.CalcEngine.GettingNumberOptions"/> value indicates which data will be received.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.EvaluationContext.LastValueIndex">
            <summary>
            Indicates the last used index in re-used <see cref="T:GrapeCity.CalcEngine.Value"/> array.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.EvaluationContext.MaximumRowCount">
            <summary>
            Gets the maximum row count supported by current calculation engine.
            </summary>
            <value>An integer value represents the maximum row count supported by current calculation engine.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.EvaluationContext.MaximumColumnCount">
            <summary>
            Gets the maximum column count supported by current calculation engine.
            </summary>
            <value>An integer value represents the maximum column count supported by current calculation engine.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.EvaluationContext.Culture">
            <summary>
            Gets or sets the current culture.
            </summary>
            <value>A <see cref="T:System.Globalization.CultureInfo"/> object represents the current culture.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.SetErrorDirect(GrapeCity.CalcEngine.CalcError)">
            <summary>
            Sets the specified <see cref="T:GrapeCity.CalcEngine.CalcError"/> value to the evaluation context directly.
            </summary>
            <param name="calcError">The calculation error.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.EvaluationContext.GrapeCity#CalcEngine#IEvaluationContext#ContextRow">
            <summary>
            Gets the row index of the cell whose formula is being evaluated.
            </summary>
            <value>An zero-based integer indicates the row index of the cell.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.EvaluationContext.GrapeCity#CalcEngine#IEvaluationContext#ContextColumn">
            <summary>
            Gets the column index of the cell whose formula is being evaluated.
            </summary>
            <value>An zero-based integer indicates the column index of the cell.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.EvaluationContext.GrapeCity#CalcEngine#IEvaluationContext#ReferenceSource">
            <summary>
            Gets the reference source where the formula is being evaluated.
            </summary>
            <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object represents where the formula is being evaluated.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Backup(GrapeCity.CalcEngine.EvaluationContext.ContextData@)">
            <summary>
            Backups current state of this evaluation context to the specified context data.
            </summary>
            <param name="contextData">A <see cref="T:GrapeCity.CalcEngine.EvaluationContext.ContextData"/> value indicates the context data entry.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.EnterContext(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
            <summary>
            Enters the specified evaluating context.
            </summary>
            <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object which is using formula.</param>
            <param name="contextRow">An integer value indicates the context row index.</param>
            <param name="contextColumn">An integer value indicates the context column index.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.EnterContextless(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
            <summary>
            Enters the specified evaluating context without backing up the previous evaluating context. 
            </summary>
            <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object which is using formula.</param>
            <param name="contextRow">An integer value indicates the context row index.</param>
            <param name="contextColumn">An integer value indicates the context column index.</param>
            <remarks>This function is specially used when we're rebuilding dependencies via CalculateRebuild. Don't use it anywhere else.</remarks>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.ExitContext">
            <summary>
            Exits from the current evaluating context back to the previous evaluating context.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.GetReferenceSource(System.Int32)">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object at the specified index.
            </summary>
            <param name="sheetIndex">An integer value indicates the specified index of the <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object.</param>
            <returns>The <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object at the specified index.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.GrapeCity#CalcEngine#IEvaluationContext#AllocValue">
            <summary>
            Allocates a new <see cref="T:GrapeCity.CalcEngine.IValue" /> object.
            </summary>
            <returns>The new allocated <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.GrapeCity#CalcEngine#IEvaluationContext#GetValue(System.Int32)">
            <summary>
            Get the <see cref="T:GrapeCity.CalcEngine.IValue" /> object at the specified index.
            </summary>
            <param name="index">The zero-based integer indicates the index of <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</param>
            <returns>IValue.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.GrapeCity#CalcEngine#IEvaluationContext#Evaluate(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.IValue)">
            <summary>
            Evaluates the specified expression and returns the evaluated result via <paramref name="result" /> parameter.
            </summary>
            <param name="expression">The expression to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.IValue" /> object to keep evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AllocValue">
            <summary>
            Allocates a new <see cref="T:GrapeCity.CalcEngine.Value" /> object.
            </summary>
            <returns>The new allocated <see cref="T:GrapeCity.CalcEngine.Value" /> object.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AllocBoolArray(System.Int32,System.Int32@)">
            <summary>
            Allocate a boolean array segment.
            </summary>
            <param name="length">An integer value indicates the length of the boolean array segment.</param>
            <param name="startIndex">An integer value indicates the start index of the boolean array segment.</param>
            <returns>A <see cref="!:System.Boolean[]"/> value represents the allocated boolean array.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.DeallocBoolArray(System.Int32)">
            <summary>
            Deallocate a boolean array segment.
            </summary>
            <param name="length">An integer value indicates the length of the boolean array segment.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AllocValue(System.Int32)">
            <summary>
            Allocates multiple <see cref="T:GrapeCity.CalcEngine.IValue" /> objects.
            </summary>
            <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.IValue" /> objects to allocate.</param>
            <returns>An zero-based integer indicates the index of first allocated <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.DeallocValue">
            <summary>
            Deallocates the last created <see cref="T:GrapeCity.CalcEngine.Value" /> object.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.DeallocValue(System.Int32)">
            <summary>
            Deallocates the last created <see cref="T:GrapeCity.CalcEngine.Value" /> objects.
            </summary>
            <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.Value" /> objects to deallocate.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.GetValue(System.Int32)">
            <summary>
            Get the <see cref="T:GrapeCity.CalcEngine.Value" /> object at the specified index.
            </summary>
            <param name="index">The zero-based integer indicates the index of <see cref="T:GrapeCity.CalcEngine.IValue" /> object.</param>
            <returns>IValue.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.TryConvertToDouble(System.String,System.Double@)">
            <summary>
            Tries the convert the text to double. Error status won't be changed.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.TryConvertToDouble(System.String,System.Globalization.CultureInfo,System.Double@)">
            <summary>
            Tries the convert the text to double. Error status won't be changed.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.CreateIdentityValuesArray(System.Int32)">
            <summary>
            Creates the identity matrix (sometimes ambiguously called a unit matrix) for the specified dimension.
            </summary>
            <param name="dimension">Dimension is an integer specifying the dimension of the unit matrix that you want to return. It returns an array. The dimension has to be greater than zero.</param>
            <returns>The identity matrix</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.TryConvertToDateTime(System.String,System.Double@)">
            <summary>
            Tries the convert the text to date time. Error status won't be changed.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.ConvertToString(System.Double)">
            <summary>
            Converts double to string.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.SwapArrayOffsets">
            <summary>
            Swaps the array column offset and array row offset.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.IsValidReference(GrapeCity.CalcEngine.RangeReference@,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Determines whether the specified <see cref="T:GrapeCity.CalcEngine.RangeReference"/> is value.
            </summary>
            <param name="rangeRef">The range reference to check. Its row/column data represent absolute value (applied context cell) but the relations are kept as they are.</param>
            <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> that contains the specified reference.</param>
            <returns><c>true</c> if the specified <see cref="T:GrapeCity.CalcEngine.RangeReference"/> is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.ApproximateToInt(System.Double)">
            <summary>
            Rounds a number down to the nearest integer. It works like (int)number.
            </summary>
            <param name="value">The double value.</param>
            <returns>An integer value represents the approximated double value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.CastToLongLossless(System.Double)">
            <summary>
            Casts the specified number to 64-bits integer value. If the result is different than the value, <see cref="F:GrapeCity.CalcEngine.CalcError.Number"/> will be set.
            </summary>
            <param name="value">A decimal value to convert.</param>
            <returns>The coressponding 64-bits integer value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.ProcessNumber(System.Double)">
            <summary>
            Get a processable-numeric value from the specified numeric value. Error will be set to <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> if the specified numeric value is not valid.
            </summary>
            <param name="value">The numeric value to process.</param>
            <returns>A processable-numeric <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext.ContextData.IsInDefinedName">
            <summary>
            Backup IsInDefinedName
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext.ContextData.IndexesWrappingEnabled">
            <summary>
            Backup flag IndexesWrappingEnabled
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.EvaluationContext.ContextData.IsCalculatingSingleCellFormula">
            <summary>
            Backup flag IsCalculatingSingleCellFormula
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.MarkPrecedentAsAffectNoData(System.Int32)">
            <summary>
            Marks all precedent node from the specified position with <see cref="F:GrapeCity.CalcEngine.PrecedentFlags.AffectNoData"/>.
            </summary>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.MarkPrecedent(System.Int32,GrapeCity.CalcEngine.PrecedentFlags)">
            <summary>
            Marks all precedent node from the specified position with the specified <see cref="T:GrapeCity.CalcEngine.PrecedentFlags"/> value.
            </summary>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.MarkPrecedent(System.Int32,System.Int32,GrapeCity.CalcEngine.PrecedentFlags)">
            <summary>
            Marks all precedent node from the specified position with the specified <see cref="T:GrapeCity.CalcEngine.PrecedentFlags"/> value.
            </summary>
            <param name="index">The starting index.</param>
            <param name="index2Exclusive">The end exclusive index.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AppendPrecedent(System.IComparable)">
            <summary>
            Appends the <paramref name="source"/> as precedent. 
            </summary>
            <param name="source">The source that indicates a calculatable object which is not cell.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AppendAdjustableAbsolutePrecedent__(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Appends all precedents.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AppendAdjustableRelativePrecedent__(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Appends all precedents.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AppendAdjustablePrecedent__(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Appends all precedents.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AppendPrecedent__(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Appends all precedents.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AppendPrecedent__(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
            <summary>
            Appends all precedents.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AppendAdjustableRelativePrecedent__(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
            <summary>
            Appends all precedents.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AppendAdjustablePrecedent__(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
            <summary>
            Appends all precedents.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AppendAdjustableAbsolutePrecedent__(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
            <summary>
            Appends all precedents.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AppendPrecedent(GrapeCity.CalcEngine.Value)">
            <summary>
            Appends all precedents.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.AppendAbsolutePrecedent(GrapeCity.CalcEngine.Value)">
            <summary>
            Appends all precedents.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.EvaluationContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:GrapeCity.CalcEngine.GettingNumberOptions.AllowRowAxisVisibilityOnly">
            <summary>
            Indicates that the hidden of rows is affected by axis only
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.GettingNumberOptions.AllowLogical">
            <summary>
            Allows logical values.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.GettingNumberOptions.AllowText">
            <summary>
            Allows text values.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.GettingNumberOptions.AllowEmpty">
            <summary>
            Allows empty values.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.GettingNumberOptions.ThrowError">
            <summary>
            Indicates whether the error is set if there is un-accepted data.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.GettingNumberOptions.AllowOnlyReference">
            <summary>
            Allows only Reference, MultiReference and Reference3D. Others return Error.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.GettingNumberOptions.ProcessSingleCellAsDirectValue">
            <summary>
            If reference is 1 cell, Excel see it like input value directly
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.GettingNumberOptions.UnacceptedValuesArrayError">
            <summary>
            Indicates the error value if there is an unaccepted data type from values array.
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.Expression">
            <summary>
            Represents a base class for an expression.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.#ctor(GrapeCity.CalcEngine.ExpressionTypes,GrapeCity.CalcEngine.ExpressionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.Expression"/> class.
            </summary>
            <param name="exprType">An <see cref="T:GrapeCity.CalcEngine.ExpressionTypes"/> value indicatse the type of this expression.</param>
            <param name="flags">An <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/> value indicates the state of this expression (including its returned value type if it's possible).</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IsErrorExceptREF">
            <summary>
            Gets a value indicating whether this expression is an error expression but not #REF!.
            </summary>
            <value><c>true</c> if this expression is an error expression but not #REF!; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.UpdateArrayDimensions(GrapeCity.CalcEngine.EvaluationContext,System.Int32@,System.Int32@,GrapeCity.CalcEngine.Value)">
            <summary>
            Updates the array dimensions indicating how large is the <see cref="T:GrapeCity.CalcEngine.ArrayConstants" /> to maintain the whole array formula.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="rowCount">An integer value indicates the row count of <see cref="T:GrapeCity.CalcEngine.ArrayConstants" />.</param>
            <param name="columnCount">An integer value indicates the column count of <see cref="T:GrapeCity.CalcEngine.ArrayConstants" />.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value" /> object indicates the evaluated result of the current argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IsEncodeRequired(System.String)">
            <summary>
            Determines whether the source name should be encoded with single quote (') in the formula text.
            </summary>
            <param name="sourceName">A string value indicates the source name.</param>
            <returns><c>true</c> if the source name should be encoded with single quote (') in the formula text.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.RefreshDefinedName(GrapeCity.CalcEngine.IDefinedName,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.FormulaEngine,System.Boolean,System.Boolean@,System.Boolean)">
            <summary>
            Update defined name expresion in this expression by a new created defined name.
            </summary>
            <param name="definedName">A <see cref="T:GrapeCity.CalcEngine.IDefinedName" /> object indicates the new created defined name.</param>
            <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object indicates the reference source.</param>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula engine.</param>
            <param name="allDefinedName">if set to <c>false</c>, only undefined name will be adjusted.</param>
            <param name="movedToUntouch">if set to <c>true</c>, the dependencies should be rebuilt..</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.OnRemovedDefinedName(GrapeCity.CalcEngine.IDefinedName,GrapeCity.CalcEngine.IDefinedName,GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Update defined name expresion in this expression after a defined name was removed.
            </summary>
            <param name="removedDefinedName">A <see cref="!:DefinedName"/> object indicates the removed defined name.</param>
            <param name="replacedDefinedName">A <see cref="!:DefinedName"/> object indicates a defined name which has same name with removed defined name.</param>
            <param name="parsingContext">A <see cref="!:ParsingContext" /> object indicates the formula parser.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsUndefinedName">
            <summary>
            Determines whether the expression contains an undefined name.
            </summary>
            <returns><c>true</c> if the expression contains an undefined name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsStructuredReferenceDirect">
            <summary>
            Determines whether the expression contains structured reference expression directly.
            </summary>
            <returns><c>true</c> if the expression contains structured reference expression directly; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.UpdateBubbleFlags(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Update _exprFlags of current Expression following its children
            </summary>
            <returns>current expression bubbling flags for its parent execute recursively.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsReference">
            <summary>
            Gets a value indicating whether the expression contains reference.
            </summary>
            <value><c>true</c> if the expression contains reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsMixedReference">
            <summary>
            Gets a value indicating whether the expression contains both of relative reference and absolute reference.
            </summary>
            <value><c>true</c> if the expression contains both of relative reference and absolute reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsRelativeReference">
            <summary>
            Gets a value indicating whether the expression contains relative reference.
            </summary>
            <value><c>true</c> if the expression contains relative reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsAbsoluteReference">
            <summary>
            Gets a value indicating whether the expression contains relative reference.
            </summary>
            <value><c>true</c> if the expression contains relative reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsDefinedName(GrapeCity.CalcEngine.IDefinedName)">
            <summary>
            Determines whether this <see cref="T:GrapeCity.CalcEngine.Expression"/> contains the specified <see cref="T:GrapeCity.CalcEngine.IDefinedName"/>.
            </summary>
            <param name="definedName">An <see cref="T:GrapeCity.CalcEngine.IDefinedName"/> object indicates the <see cref="T:GrapeCity.CalcEngine.IDefinedName"/> to check.</param>
            <returns><c>true</c> if this <see cref="T:GrapeCity.CalcEngine.Expression"/> contains the specified <see cref="T:GrapeCity.CalcEngine.IDefinedName"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsHyperlink">
            <summary>
            Determines whether this expression contains hyper-link function.
            </summary>
            <returns><c>true</c> if this instance contains hyper-link function; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IsRequiredSingleCell(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Value,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified expression argument must be performed as single-cell formula.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="expr">The specified expression which is used as the argument.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value"/> object which store the result.</param>
            <param name="expressionIndex">Index of the expression.</param>
            <returns><c>true</c> if the specified expression argument must be performed as single-cell formula.; otherwise, <c>false</c>.</returns>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IsSingleCellAllowable(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <param name="firstArgResultIndex">An integer value indicates the index of the first argument's evaluated result.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IsAlwaysEvaluatedAsArrayFormula(System.Int32)">
            <summary>
            Determines whether the specified argument is passed as array/reference and the function is always evaluated as array formula (FILTER, SEQUENCE..).
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the specified argument is passed as array/reference and the function is always evaluated as array formula; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IsEnforedVector(System.Int32)">
            <summary>
            Determines whether the expression at specified index must be evaluated as in single cell evaluation mode.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            An example that argument will be enfored as (single cell) vector as the second argument of LOOKUP function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression must be evaluated as in single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ShouldReevaluateInSingleCell(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Shoulds the reevaluate in single cell.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <returns><c>true</c> if expression should be reevaluated in each row, column , <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ToAbsoluteExpression(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Converts all relative reference inside this expression to absolute reference.
            </summary>
            <returns>A <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.AddImplicitIntersectionOperatorIfNeeded(GrapeCity.CalcEngine.FormulaEngine,GrapeCity.CalcEngine.Expression)">
            <summary>
            Converts the expression to implicit intersection operator expression for back-ward compatibility if needed.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.GuessReturnTypeCore">
            <summary>
            Guesses the type of the returned value of the expression.
            </summary>
            <returns>The type of the returned value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.GuessReturnType">
            <summary>
            Guesses the type of the returned value of the expression.
            </summary>
            <returns>The type of the returned value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.AddDependentRangeReference(GrapeCity.CalcEngine.PrecedentNode[]@,System.Int32@,System.Int32)">
            <summary>
            Adds an "AffectNoData" dependent node of the specified dependent node.
            </summary>
            <param name="rangeRefs">The <see cref="T:GrapeCity.CalcEngine.PrecedentNode" /> array to store precedents.</param>
            <param name="length">An integer value indicates the length of references to add.</param>
            <param name="precedentNodeIndex">An integer value indicates the index of the specified precedent node.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.AppendPrecendent(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value,System.Int32)">
            <summary>
            Appends the precendent(s) for the specified argument.
            </summary>
            <param name="context">The context.</param>
            <param name="exprIndex">The argument's index.</param>
            <param name="result">The result.</param>
            <param name="precedentNodeLength">Indicates the precedent node length right after we evaluate the <paramref name="exprIndex"/> argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ReturnedType">
            <summary>
            Gets the expected data type of the returned result via <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/>.
            </summary>
            <value>The type of the returned.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.Expression.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsAggregateFunction">
            <summary>
            Gets a value indicating whether the expression contains SUBTOTAL or AGGREGATE function.
            </summary>
            <value><c>true</c> if the expression contains SUBTOTAL or AGGREGATE function; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsDefinedName">
            <summary>
            Gets a value indicating whether the expression contains a defined name.
            </summary>
            <value><c>true</c> ifthe expression contains a defined name; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsUnobviouslyVolatile">
            <summary>
            Gets a value indicating whether contain an indirect function.
            </summary>
            <value><c>true</c> if contain indirect; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression.</param>
            <returns>The expression at the specified location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IncreaseRefCount">
            <summary>
            Increases the internal reference count, which is used by interning logic, by 1.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IncreaseRefCount(System.Int32)">
            <summary>
            Increases the internal reference count, which is used by interning logic, by a specified amount.
            </summary>
            <param name="refCount">An integer vaule indicates the amount of reference count.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.DecreaseRefCount">
            <summary>
            Decreases the internal reference count which is used by interning logic.
            </summary>
            <returns>An integer value indicates that count of references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.DecreaseRefCount(System.Int32)">
            <summary>
            Decreases the internal reference count which is used by interning logic.
            </summary>
            <returns>An integer value indicates that count of references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.GetReferenceCount">
            <summary>
            Gets the total count of range references used by current <see cref="T:GrapeCity.CalcEngine.Expression"/>.
            </summary>
            <returns>An integer value indicates that total count of range references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression"/> to the formula text.
            </summary>
            <param name="engine">The formula engine.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IsDirectReferenceExpression(System.Boolean)">
            <summary>
            Gets a boolean value indicates whether the expression represents a (range/cell) refernece expression.
            </summary>
            <param name="includeUnionOperator"><c>true</c> if Union operator included; otherwise, Union operator expression will return <c>false</c>.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="obj">An <see cref="T:GrapeCity.CalcEngine.Expression" /> to compare with this instance.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.EqualsOptimized(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="obj">An <see cref="T:GrapeCity.CalcEngine.Expression" /> to compare with this instance.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.GetCachableHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ClearCachedHashCode">
            <summary>
            Clears the cached hash code.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (shallow clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the shallow cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.AddImplicitIntersectionOperator">
            <summary>
            Converts the expression to implicit intersection operator expression for back-ward compatibility if needed.
            </summary>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IsAppliedImplicitIntersection(GrapeCity.CalcEngine.Expression)">
            <summary>
            Determines whether the expression will be applied implicit intersection in old calculation engine, which doesn't support dynamic array.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the expression will be applied implicit intersection in old calculation engine; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.IsImplicitIntersectionOperatorAdded">
            <summary>
            Determine implicit intersection operator expression for back-ward compatibility is added.
            Use when export to determine any children of current expression need to be added @.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.AddImplicitIntersectionOperatorIfNeeded(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Converts the expression to implicit intersection operator expression for back-ward compatibility if needed.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.RemoveImplicitIntersectionOperatorIfNoNeeded(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Converts the implicit intersection operator expression to expression for back-ward compatibility if no needed.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.UpdateDefinedNameExpressionFlags">
            <summary>
            Update all bubble-able expression flags from defined name expression.
            </summary>
            <returns>An <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/> value represents the new bubble expression flags.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.SetReference(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.Value)">
            <summary>
            Set an evaluated reference to the specified <see cref="T:GrapeCity.CalcEngine.Value"/> object.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="source">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object indicates the current reference source.</param>
            <param name="rangeRef">The evaluated range reference.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value"/> object to store the evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.SetAdjustableReference(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.RangeReference@,GrapeCity.CalcEngine.Value)">
            <summary>
            Set an evaluated reference to the specified <see cref="T:GrapeCity.CalcEngine.Value"/> object.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="source">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object indicates the current reference source.</param>
            <param name="rangeRef">The evaluated range reference.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value"/> object to store the evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.SetAbsoluteReference(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.Value)">
            <summary>
            Set an evaluated reference to the specified <see cref="T:GrapeCity.CalcEngine.Value"/> object.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="source">The reference source.</param>
            <param name="_rangeRef">The evaluated range reference.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value"/> object to store the evaluated result..</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.SetAdjustableAbsoluteReference(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.RangeReference@,GrapeCity.CalcEngine.Value)">
            <summary>
            Set an evaluated reference to the specified <see cref="T:GrapeCity.CalcEngine.Value"/> object.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="source">The reference source.</param>
            <param name="_rangeRef">The evaluated range reference.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value"/> object to store the evaluated result..</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsOtherSheetReference(GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Determines whether the expression contains the reference to other sheet.
            </summary>
            <param name="refSource">The reference source.</param>
            <returns><c>true</c> if the expression contains the reference to other sheet; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.NotContainsSheetReference(GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Determines whether the expression not contains the reference to other sheet.
            </summary>
            <param name="refSource">The reference source.</param>
            <returns><c>true</c> if the expression contains the reference to other sheet; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ContainsSheetReference(GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Determines whether the expression contains the reference to other sheet.
            </summary>
            <param name="refSource">The reference source.</param>
            <returns><c>true</c> if the expression contains the reference to other sheet; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.RefersToWorkbook(GrapeCity.CalcEngine.ICalcWorkbook)">
            <summary>
            Determines whether the expression contains the reference to other sheet.
            </summary>
            <param name="refSource">The reference source.</param>
            <returns><c>true</c> if the expression contains the reference to other sheet; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <param name="isFromCell"><c>true</c> indicates that the number format is detected from a cell.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.StartEvaluatingFormulaArray(GrapeCity.CalcEngine.IEvaluationContext,System.Int32@)">
            <summary>
            Starts evaluating multiple cells as formula array.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="startIndex">The started index of evaluated arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.FinishEvaluatingFormularray(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,GrapeCity.CalcEngine.Arguments)">
            <summary>
            Finishs evaluating multiple cells as formula array.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="startIndex">The started index of evaluated arguments.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.Expression.CharIndex">
            <summary>
            Gets an integer value indicates the start position of this expression inside the formula.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.Expression.CharIndex2">
            <summary>
            Gets an integer value indicates the end position of this expression inside the formula.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.Expression.CharLength">
            <summary>
            Gets an integer value indicates the length of this expression inside the formula.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ShouldExportAsArray(GrapeCity.CalcEngine.Expression,System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Expression.ShouldExportAsArray(System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="contextRow">The row index of the context cell.</param>
            <param name="contextColumn">The column index of the context cell.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.#ctor(`0,GrapeCity.CalcEngine.ExpressionTypes,GrapeCity.CalcEngine.ExpressionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ConstantExpression`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="exprType">An <see cref="T:GrapeCity.CalcEngine.ExpressionTypes"/> value indicatse the type of this expression.</param>
            <param name="flags">An <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/> value indicates the state of this expression (including its returned value type if it's possible).</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.#ctor(`0@,GrapeCity.CalcEngine.ExpressionTypes,GrapeCity.CalcEngine.ExpressionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ConstantExpression`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="exprType">An <see cref="T:GrapeCity.CalcEngine.ExpressionTypes"/> value indicatse the type of this expression.</param>
            <param name="flags">An <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/> value indicates the state of this expression (including its returned value type if it's possible).</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.ConstantExpression`1.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Sets the expression.
            </summary>
            <param name="i">The i.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression.</param>
            <returns>The expression at the specified location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
            <remarks>This function is slow and the inherited class should override it.</remarks>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.IsImplicitIntersectionOperatorAdded">
            <summary>
            Determine implicit intersection operator expression for back-ward compatibility is added.
            Use when export to determine any children of current expression need to be added @.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.AddImplicitIntersectionOperatorIfNeeded(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Converts the expression to SINGLE function for back-ward compatibility if needed.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConstantExpression`1.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.ChangingSource">
            <summary>
            The Worksheet which is changed data (move, swap, insert, remove, clear, target of copy)
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.TargetSource">
            <summary>
            For Move action, it's the worksheet which data will be copied to.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.CellSource">
            <summary>
            The Worksheet contains the cell which has the formula
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.ReferenceSource">
            <summary>
            The Worksheet where the reference refers to.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.RemovedDefinedName">
            <summary>
            The defined name which is removed
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.ReplacedDefinedName">
            <summary>
            The defined name which will be used as replacement of removed defined name or the new created defined name.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.Row">
            <summary>
            An integer represents the top row index of source range
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.Column">
            <summary>
            An integer represents the left column index of source range.
            </summary>
            <remarks>
            For removing worksheet, it's the worksheet's index.
            </remarks>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.ToRow">
            <summary>
            An integer represents the top row index of target range
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.ToColumn">
            <summary>
            An integer represents the left column index of target range
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.RowCount">
            <summary>
            An integer represents the total row count to change
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.ColumnCount">
            <summary>
            >An integer represents the total column count to change
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.ContextColumn">
            <summary>
            An integer represent the column index of cell which contains the expression
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.ContextRow">
            <summary>
            An integer represent the row index of cell which contains the expression
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.EvaluationContext">
            <summary>
            the formula parser
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.IsInDefinedName">
            <summary>
            Indicates that the adjuting logic is performed inside a defined name.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.values">
            <summary>
            A boolean value indicates whether the evaluated value should be kept
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.IgnoreColumnRelative">
            <summary>
            A boolean value indicates whether the column relative won't be adjusted
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.IgnoreRowRelative">
            <summary>
             boolean value indicates whether the row relative won't be adjusted
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.NeedAddToUntouchCalNode">
            <summary>
            Used to notify that the Expression after adjusting need move to untouch node of FormulaManager. It help the Dependency update correctly even the expression is not changed.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.NeedSetDirty">
            <summary>
            Used to notify that the formula data should be marked as Dirty.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustExpressionData.AdjustBothSourceAndTargetRange">
            <summary>
            Used to notify that expressions in both source range and dest range need to be adjust. Example use in case toggle table's total rows.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.AdjustExpressionData.TargetSourceExpression">
            <summary>
            Gets the target source expression.
            </summary>
            <value>The target source expression.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.AdjustExpressionData.ChangingSourceExpression">
            <summary>
            Gets the target source expression.
            </summary>
            <value>The target source expression.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.AdjustExpressionData.Row2">
            <summary>
            An integer represents the bottom row index of source range
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.AdjustExpressionData.Column2">
            <summary>
            An integer represents the right column index of source range
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.AdjustExpressionData.ToRow2">
            <summary>
            An integer represents the bottom row index of target range
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.AdjustExpressionData.ToColumn2">
            <summary>
            An integer represents the right column index of target range
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.AdjustExpressionData.TranslatedColumns">
            <summary>
            Gets an integer value indicates how many columns from source to targer.
            </summary>
            <value>An integer value represents the translated columns.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.AdjustExpressionData.TranslatedRows">
            <summary>
            Gets an integer value indicates how many rows from source to targer.
            </summary>
            <value>An integer value represents the translated rows.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsMovingColumn">
            <summary>
            Determines whether the moving happens with the whole column.
            </summary>
            <returns><c>true</c> if the moving happens with the whole column; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsMovingRow">
            <summary>
            Determines whether the moving happens with the whole row.
            </summary>
            <returns><c>true</c> if the moving happens with the whole row; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsContextCellMoved">
            <summary>
            Gets a value indicating whether the context cell is moved.
            </summary>
            <value><c>true</c> if the context cell is moved; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsContextCellMoved(System.Int32,System.Int32)">
            <summary>
            Gets a value indicating whether the context cell, which belong to the specified row range, is moved.
            </summary>
            <param name="row">An integer value indicates the start row index.</param>
            <param name="row2">An integer value indicates the end row index.</param>
            <value><c>true</c> if the context cell is moved; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsContextCellInSource">
            <summary>
            Determines whether the context cell belongs to the source cell range.
            </summary>
            <returns><c>true</c> if the context cell belongs to the source cell range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsCellInSource(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified cell belongs to the source cell range.
            </summary>
            <param name="row">An integer value indicates the row index.</param>
            <param name="column">An integer value indicates the column index.</param>
            <returns><c>true</c> if the specified cell belongs to the source cell range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsCellInTarget(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified cell belongs to the target cell range.
            </summary>
            <param name="row">An integer value indicates the row index.</param>
            <param name="column">An integer value indicates the column index.</param>
            <returns><c>true</c> if the specified cell belongs to the target cell range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsRangeInSource(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Determines whether the specified cell range belongs to the source cell range.
            </summary>
            <param name="rangeRef">The range reference.</param>
            <returns><c>true</c> if the specified cell range belongs to the source cell range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsRangeInSource(GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Determines whether the specified cell range belongs to the source cell range.
            </summary>
            <param name="rangeRef">The range reference.</param>
            <returns><c>true</c> if the specified cell range belongs to the source cell range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsRangeIntersectWithSource(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified cell range intersect with the source cell range.
            </summary>
            <param name="rangeRef">The range reference.</param>
            <returns><c>true</c> if the specified cell range intersect with the source cell range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsRangeIntersectWithSource(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Determines whether the specified cell range intersect with the source cell range.
            </summary>
            <param name="rangeRef">The range reference.</param>
            <returns><c>true</c> if the specified cell range intersect with the source cell range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsRangeInTarget(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Determines whether the specified cell range belongs to the target cell range.
            </summary>
            <param name="rangeRef">The range reference.</param>
            <returns><c>true</c> if the specified cell range belongs to the target cell range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.SwitchSourceAndTarget">
            <summary>
            Switches the source and target.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.IsRangeIntersectWithTarget(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Determines whether the specified cell range intersect with the target cell range.
            </summary>
            <param name="rangeRef">The range reference.</param>
            <returns><c>true</c> if the specified cell range intersect with the target cell range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AdjustExpressionData.ReloadDependentDefinedNames(GrapeCity.CalcEngine.DynamicArray{GrapeCity.CalcEngine.DependentDefinedName}@)">
            <summary>
            Re-parse all dependent defined names to make sure that the new created/undo objects are updated
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredObjectAction.ExternalBookOpened">
            <summary>
            The external book is opened. Any external table, which associates to the external book, should be replace by the actual table
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustType.StructuredReferenceChanged">
            <summary>
            Update structure references only
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustType.SyncStructuredReferences">
            <summary>
            Update structure references and Synchronize references which are fitted with table columns only
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustType.RemoveDefinedName">
            <summary>
            A defined name was removed
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustType.DefinedNameCreated">
            <summary>
            The defined name is created
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustType.MoveWorksheet">
            <summary>
            Moves the worksheet to another position
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustType.RemoveWorksheet">
            <summary>
            Removes the worksheet
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustType.CopyWorksheet">
            <summary>
            Copies the worksheet to the specified position
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.AdjustType.AddWorksheet">
            <summary>
            New worksheet is added
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.SingleCell">
            <summary>
            Indicates whether the function process array formula as single-cell formulas.
            Some functions like SUM, COUNT... will process array formula as single-cell formulas.
            Others will process array formula as multi-cell formulas.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Volatile">
            <summary>
            The function is volatile.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Constant">
            <summary>
            The function represents a constant value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Async">
            <summary>
            The function contains asynchronous function
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Visual">
            <summary>
            The data visualization function visualize cell value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Boolean">
            <summary>
            Indicates that the function will return boolean result.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Number">
            <summary>
            Indicates that the function will return numeric result.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Date">
            <summary>
            Indicates that the function will return date result.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Time">
            <summary>
            Indicates that the function will return timespan result.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Text">
            <summary>
            Indicates that the function will return string result.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Error">
            <summary>
            Indicates that the function will return CalcError result.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Reference">
            <summary>
            Indicates that the function will return reference result.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Array">
            <summary>
            Indicates that the function will return array result.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionAttributes.Variant">
            <summary>
            Indicates that the function will return variant result.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.IsSingleCellFormula">
            <summary>
            Indicates whether the function process array formula as single-cell formulas.
            Some functions like SUM, COUNT... will process array formula as single-cell formulas.
            Others will process array formula as multi-cell formulas.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Volatile">
            <summary>
            The expression is volatile.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Constant">
            <summary>
            The expression represents a constant value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.RelativeReference">
            <summary>
            The expression contains relative reference
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.AbsoluteReference">
            <summary>
            The expression contains absolute reference
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.MixedReference">
            <summary>
            The expression contains both of relative and absolute reference
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.UnobviouslyVolatile">
            <summary>
            The expression is not obviously volatile but it may be volatile when the evaluation context is changed (context cell is moved for example).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Reference3D">
            <summary>
            The expression contains 3D-Reference
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.DefinedName">
            <summary>
            The expression contains defined name function.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Hyperlink">
            <summary>
            The expression contains HYPERLINK function.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.AggregateFunctions">
            <summary>
            The expression contains SUBTOTAL or AGGREGATE function.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.DataReferenceSource">
            <summary>
            The expression contains a specified worksheet reference like Sheet1!A1
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Async">
            <summary>
            The expression contains asynchronous function
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.StructuredReference">
            <summary>
            The expression contains structured reference.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.ExternalReference">
            <summary>
            The expression contains external reference (from external book)
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.ContainsDependency">
            <summary>
            The expression contains a dependency (may be from INDIRECT, INDEX...)
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.UndefinedName">
            <summary>
            The expression contains an undefined name
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.ReferenceOperators">
            <summary>
            The expression contains reference operators (such as unions, intersections, and ranges)
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.RangeOperator">
            <summary>
            The expression contains range operator
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.ExternalVariable">
            <summary>
            The expression contains a external variable
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.ArrayConstants">
            <summary>
            The expression contains an array constants
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.StructuredWorksheetReference">
            <summary>
            The expression contains worksheet structured reference like Sheet1[[#RowHeaders], B1]
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.XlwsFunction">
            <summary>
            The expression contains a XLWS function
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.DynamicArray">
            <summary>
            The expression counld return multi-cell ranges or arrays (spilled array)
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Visual">
            <summary>
            The expression is a visual function expression
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.AutoFormatting">
            <summary>
            The cell may be formatted with an auto-detected number format
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.InvalidSyntax">
            <summary>
            The expression contains an invalid syntax formula
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Detached">
            <summary>
            Indicates that the function is detached from the workbook set
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.BubbleableFlagsMask">
            <summary>
            Indicates all flags which will notify parent expression to have same ExpressionFlags as child expression
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.ValueTypeMask">
            <summary>
            Mask for all possible data types
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Boolean">
            <summary>
            The expression will return boolean value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Number">
            <summary>
            The expression will return numeric value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Text">
            <summary>
            The expression will return string value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Error">
            <summary>
            The expression will return <see cref="T:GrapeCity.CalcEngine.CalcError"/> value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Date">
            <summary>
            The expression will return <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Time">
            <summary>
            The expression will return <see cref="T:System.TimeSpan"/> value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Reference">
            <summary>
            The expression will return a single reference.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Array">
            <summary>
            The expression will return array constants.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.Variant">
            <summary>
            The expression will return a variant value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.ReferenceSource">
            <summary>
            The expression will return an <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.MultiReference">
            <summary>
            The expression will return multi-references.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ExpressionFlags.SpilledArray">
            <summary>
            Spilled reference or Spilled array
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Function.#ctor(System.String,System.Int32,System.Int32,GrapeCity.CalcEngine.FunctionAttributes)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.Function"/> class.
            </summary>
            <param name="functionName">A string value represents the function name.</param>
            <param name="minArgs">An integer values indicates the minimum argument count.</param>
            <param name="maxArgs">An integer values indicates the maximum argument count.</param>
            <param name="attributes">A <see cref="T:GrapeCity.CalcEngine.FunctionAttributes"/> value indicates attributes of the function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Function.IsValidName(System.Char*,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determines whether the specified name is valid for using as function name.
            </summary>
            <param name="name">The char pointer to function name.</param>
            <param name="startIndex">The index of the start character of the function name.</param>
            <param name="length">The length of the function name.</param>
            <param name="usingFunctionAlias">if set to <c>true</c>, the function aliases is using; otherwise, English functions are using.</param>
            <returns><c>true</c> if the name is valid function name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.Function.Name">
            <summary>
            Gets the function name.
            </summary>
            <value>A <see cref="T:System.String"/> value indictes the function name.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.Function.MinArgs">
            <summary>
            Gets the minimum argument count of the function.
            </summary>
            <value>An integer value inciates the minimum argument count.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.Function.MaxArgs">
            <summary>
            Gets the maximum argument count of the function.
            </summary>
            <value>An integer value inciates the maximum argument count.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.Function.IsAttached">
            <summary>
            Gets a value indicating whether this function is attached to the workbookset.
            </summary>
            <value><c>true</c> if this function is attached to the workbookset; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Function.Clone">
            <summary>
            Clones this function.
            </summary>
            <returns>A <see cref="T:GrapeCity.CalcEngine.Function"/> object represents the cloned function.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Function.IsAcceptedArgumentCount(System.Int32)">
            <summary>
            Determines whether the argument count is acceptable for this function.
            </summary>
            <param name="argsCount">An integer value indicates the arguments count.</param>
            <returns><c>true</c> if the argument count is acceptable for this function; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Function.Evaluate(GrapeCity.CalcEngine.IArguments,GrapeCity.CalcEngine.IValue)">
            <summary>
            Evaluates the function based on specified arguments and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="arguments">The <see cref="T:GrapeCity.CalcEngine.IArguments"/> object indicates set of arguments.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.IValue" /> object to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Function.EvaluateCore(GrapeCity.CalcEngine.Arguments,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the function based on specified arguments and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="arguments">The <see cref="T:GrapeCity.CalcEngine.Arguments"/> object indicates set of arguments.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> object to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Function.StartEvaluatingFormulaArray(GrapeCity.CalcEngine.IArguments)">
            <summary>
            Starts evaluating multiple cells as formula array.
            </summary>
            <param name="arguments">The <see cref="T:GrapeCity.CalcEngine.Arguments"/> object indicates set of arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Function.FinishEvaluatingFormularray(GrapeCity.CalcEngine.IArguments)">
            <summary>
            Finishs evaluating multiple cells as formula array.
            </summary>
            <param name="arguments">The <see cref="T:GrapeCity.CalcEngine.Arguments"/> object indicates set of arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Function.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Function.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Function.Equals(GrapeCity.CalcEngine.Function)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.FunctionType">
            <summary>
            Represents the actual type of the function
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionType.Normal">
            <summary>
            The normal function
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionType.Xlfn">
            <summary>
            The future function
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FunctionType.Xlws">
            <summary>
            The ??? function
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.Volatility.None">
            <summary>
            The function always returns same result for a given arguments.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.Volatility.Volatile">
            <summary>
            The volatile function must be recalculated at least once every time the workbook set is recalculated.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.Volatility.VolatileInstance">
            <summary>
            The volatile function must be recalculated for every instance.
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.BuiltinFunction">
            <summary>
            Represents all supported built-in functions.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.FunctionExpression.Function">
            <summary>
            Gets the function which is represented by this expression.
            </summary>
            <value>A <see cref="P:GrapeCity.CalcEngine.FunctionExpression.Function"/> object indicates the function.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.ShouldExportAsArray(System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="contextRow">The row index of the context cell.</param>
            <param name="contextColumn">The column index of the context cell.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.ShouldReevaluateInSingleCell(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Should the reevaluate in single cell.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <returns><c>true</c> if expression should be reevaluated in each row, column , <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.ShouldWrapBySingleFunction(System.Int32)">
            <summary>
            Determines whether the expression at specified index accept single cell evaluation mode. So, it'll be wrapped by SINGLE function during import old file.
            <c>true</c> means each cells of the argument will be evaluated separatly using EvaluteAsMultiCells function.
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the expression at specified index accept single cell evaluation mode; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.ProcessValue(GrapeCity.CalcEngine.EvaluationContext,System.Double)">
            <summary>
            Processes a double value from a set of double values.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="value">A double value indicate the value to process.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.ProcessValue(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Processes a double value from a set of double values.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="value">A <see cref="T:GrapeCity.CalcEngine.Value"/> object indicate the value to process.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.GetProcessedValueType(GrapeCity.CalcEngine.Value)">
            <summary>
            Gets the processed type of the value.
            </summary>
            <param name="value">The multi-data-type <see cref="T:GrapeCity.CalcEngine.Value"/> object.</param>
            <returns>A <see cref="!:ValueType."/> value represents the actual data type will be processed.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.IsValueTypeAccepted(GrapeCity.CalcEngine.ValueType)">
            <summary>
            Determines whether value type is accepted by this expression or not
            </summary>
            <param name="valuetype">The valuetype.</param>
            <returns><c>true</c> if value type is accepted by this expression; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.IsNaNTextAccepted">
            <summary>
            Indicates that if the text cannnot be converted to number, it won't cause Error.
            </summary>
            <returns><c>true</c> if if the text cannnot be converted to number, it won't cause Error; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FunctionExpression.GetAutoFormattingCore(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.SelcalFunctionExpression">
            <summary>
            Represents a self-calculation function.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.FunctionExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.SelcalFunctionExpression.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression.</param>
            <returns>The expression at the specified location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.AddImplicitIntersectionOperatorIfNeeded(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Converts the expression to SINGLE function for back-ward compatibility if needed.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.IsImplicitIntersectionOperatorAdded">
            <summary>
            Determine implicit intersection operator expression for back-ward compatibility is added.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">The parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SelcalFunctionExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression"/> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function"/> instance indicates the evaluating function.</param>
            <param name="args">An <see cref="T:GrapeCity.CalcEngine.Expression"/> array indicates the arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.ShouldReevaluateInSingleCell(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Should the reevaluate in single cell.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <returns><c>true</c> if expression should be reevaluated in each row, column , <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.ProcessArgumentPrecedents(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value,System.Int32,System.Int32)">
            <summary>
            Processes the argument's precedent(s) during evaluating with <see cref="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.EvaluateAsSingleCell(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)"/>
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="argIndex">Index of the argument.</param>
            <param name="argumentResult">The evaluated result of the argument.</param>
            <param name="fromIndex">The start index of the arguemnt's precedent(s).</param>
            <param name="toIndexExclusive">The end exclusive index of the argument's precedent(s).</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.IsValidArguments(GrapeCity.CalcEngine.EvaluationContext,System.Int32)">
            <summary>
            Check if the passed arguments are valid to evaluate.
            </summary>
            <param name="context">The evaluation context</param>
            <param name="startIndex">The start evaluated result index of arguments.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.EvaluateAsSingleCellWithPostProcess(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated results of the argument expressions in value array mode.
            It means if one argument is a ValuesArray or reference, the ValuesArray will be returned instead of single value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="startIndex">An integer value indicates the index of the first argument in shared Value array of the <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/>.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value"/> object indicates the evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.UpdateArrayDimensions(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Update the dimensions of target dynamic evaluated array.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.EvaluateAsSingleCell(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated results of the argument expressions in value array mode.
            It means if one argument is a ValuesArray or reference, the ValuesArray will be returned instead of single value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="startIndex">An integer value indicates the index of the first argument in shared Value array of the <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/>.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value"/> object indicates the evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluated arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression.</param>
            <returns>The expression at the specified location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiArgumentsFunctionExpression.GuessReturnTypeFromArgs(System.Int32)">
            <summary>
            Guesses the type of the returned value of the expression.
            </summary>
            <param name="startArgIndex">The start checking index of the arguments.</param>
            <returns>The type of the returned value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PostProcessMultiArgumentsFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PostProcessMultiArgumentsFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PostProcessMultiArgumentsFunctionExpression.IsRequiredSynchronizeSize(System.Int32)">
            <summary>
            Determines whether the size of the argument must be synchronized with other argument(s).
            </summary>
            <param name="argumentIndex">Index of the argument.</param>
            <returns><c>true</c> if the size of the argument must be synchronized with other argument(s); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PostProcessMultiArgumentsFunctionExpression.EvaluateAsSingleCellWithPostProcess(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated results of the argument expressions in value array mode.
            It means if one argument is a ValuesArray or reference, the ValuesArray will be returned instead of single value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="startEvaluatedArgsIndex">An integer value indicates the index of the first argument in shared Value array of the <see cref="T:GrapeCity.CalcEngine.EvaluationContext" />.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value" /> object indicates the evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PostProcessMultiArgumentsFunctionExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PostProcessMultiArgumentsFunctionExpression.CanProcessStep(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value[],System.Int32,System.Int32)">
            <summary>
            Process step by step by input from stepArgs
            </summary>
            <param name="context"></param>
            <param name="stepArgs"></param>
            <param name="index">index of the processing row in source array</param>
            <param name="count">number of columns in processing row</param>
            <param name="result"></param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.UnknownFunctionExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="source">The reference source whether the cell belong.</param>
            <param name="row">An integer represents the top row index of source range to swap.</param>
            <param name="column">An integer represents the left column index of source range to swap.</param>
            <param name="toRow">An integer represents the top row index of target range to swap.</param>
            <param name="toColumn">An integer represents the left column index of source range to swap.</param>
            <param name="rowCount">An integer represents the total row count to swap.</param>
            <param name="columnCount">An integer represents the total column count to swap.</param>
            <param name="contextRow">An integer represent the row index of cell which contains the expression.</param>
            <param name="contextColumn">An integer represent the column index of cell which contains the expression.</param>
            <param name="contextRefSource">The context reference source where the expression is evaluted.</param>
            <param name="parsingContext">the formula parser.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnknownFunctionExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CustomFunctionExpression.StartEvaluatingFormulaArray(GrapeCity.CalcEngine.IEvaluationContext,System.Int32@)">
            <summary>
            Starts evaluating multiple cells as formula array.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="startIndex">The started index of evaluated arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CustomFunctionExpression.FinishEvaluatingFormularray(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,GrapeCity.CalcEngine.Arguments)">
            <summary>
            Finishs evaluating multiple cells as formula array.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="startIndex">The started index of evaluated arguments.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CustomFunctionExpression.EvaluateAsSingleCell(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated results of the argument expressions in value array mode.
            It means if one argument is a ValuesArray or reference, the ValuesArray will be returned instead of single value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="startIndex">An integer value indicates the index of the first argument in shared Value array of the <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/>.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value"/> object indicates the evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.OneArgumentFunctionExpression"/> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function"/> object indicates the corresponding function.</param>
            <param name="arg">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the argument of this function expression.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.ShouldReevaluateInSingleCell(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Shoulds the reevaluate in single cell.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <returns><c>true</c> if expression should be reevaluated in each row, column , <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.EvaluateAsSingleCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Value" /> object which indicate the evaluated result of the argument expression in value array mode.
            It means if the argument is a ValuesArray or reference, the ValuesArray will be returned instead of single value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="result">The evaluated result of the argument. It also store the evaluated result of this operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">Contains evaluated result of the expression. After evaluated, result will be assigned to this value too.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.OneArgumentFunctionExpression.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression.</param>
            <returns>The expression at the specified location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.OneArgumentFunctionExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression"/> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function"/> instance indicates the evaluating function.</param>
            <param name="firstArg">An <see cref="T:GrapeCity.CalcEngine.Expression"/> instance indicates the first argument.</param>
            <param name="secondArg">An <see cref="T:GrapeCity.CalcEngine.Expression"/> instance indicates the second argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.EvaluateAsSingleCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,System.Int32)">
            <summary>
            Evaluates <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated results of the argument expressions in value array mode.
            It means if one argument is a ValuesArray or reference, the ValuesArray will be returned instead of single value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="resultAndOperand1">The evaluated result of the left expression. It also store the evaluated result.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value"/> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value"/> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this function.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression.</param>
            <returns>The expression at the specified location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.TwoArgumentsFunctionExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.#ctor(GrapeCity.CalcEngine.Function,GrapeCity.CalcEngine.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression" /> class.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.Function" /> instance indicates the evaluating function.</param>
            <param name="firstArg">An <see cref="T:GrapeCity.CalcEngine.Expression" /> instance indicates the first argument.</param>
            <param name="secondArg">An <see cref="T:GrapeCity.CalcEngine.Expression" /> instance indicates the second argument.</param>
            <param name="thirdArg">An <see cref="T:GrapeCity.CalcEngine.Expression" /> instance indicates the third argument.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression.</param>
            <returns>The expression at the specified location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.EvaluateAsSingleCells(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated results of the argument expressions in value array mode.
            It means if one argument is a ValuesArray or reference, the ValuesArray will be returned instead of single value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="startIndex">An integer value indicates the index of the first argument in shared Value array of the <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/>.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value"/> object indicates the evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.EvaluateAsMultiCellsCore(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates a cell's value using evaluated arguments.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="startIndex">The start index of evaluted arguments.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object to set result value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (shallow clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the shallow cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ThreeArgumentsFunctionExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayHelper.Clone``1(``0[],System.Int32)">
            <summary>
            Clones the specified array to a new array.
            </summary>
            <typeparam name="T">The type of element in array.</typeparam>
            <param name="source">The array source to clone.</param>
            <param name="length">An integer value indicates the number of elements to clone.</param>
            <returns>A <see cref="!:T[]"/> value represents the cloned array.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayHelper.Clone``1(``0[],System.Int32,System.Int32)">
            <summary>
            Clones the specified array to a new array.
            </summary>
            <typeparam name="T">The type of element in array.</typeparam>
            <param name="source">The array source to clone.</param>
            <param name="index">An integer value indicates the start element index to clone.</param>
            <param name="length">An integer value indicates the number of elements to clone.</param>
            <returns>A <see cref="!:T[]"/> value represents the cloned array.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayHelper.Clone``1(``0[])">
            <summary>
            Clones the specified array to a new array.
            </summary>
            <typeparam name="T">The type of element in array.</typeparam>
            <param name="source">The array source to clone.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayHelper.Clone``2(``0[])">
            <summary>
            Clones the specified array to a new array.
            </summary>
            <typeparam name="T1">The type of element in source array.</typeparam>
            <typeparam name="T2">The type of element in destination array.</typeparam>
            <param name="source">The array source to clone.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.DoubleArray">
            <summary>
            Represents a shared double array.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.DoubleArray.SegmentLength">
            <summary>
            Gets the length of the current segment.
            </summary>
            <value>The length of the current segment.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleArray.AddValue(System.Double)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">A double value indicates the value to add.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleArray.FillValue(System.Double,System.Int32)">
            <summary>
            Fills a specified numbers of the specified value.
            </summary>
            <param name="value">A double value indicates the value to fill.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleArray.Sort">
            <summary>
            Sorts the current segment.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleArray.Sort(GrapeCity.CalcEngine.DoubleArray.State@)">
            <summary>
            Sorts the specified segmenet.
            </summary>
            <param name="state">A <see cref="T:GrapeCity.CalcEngine.DoubleArray.State"/> object indicates the specified segment.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleArray.AddRepeatedValue(System.Double)">
            <summary>
            Adds the specified value and maintenance its repeat count.
            </summary>
            <param name="value">A double value indicates the value to add.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleArray.AddRepeatedValue(System.Double,System.Int32)">
            <summary>
            Adds the specified value and maintenance its repeat count.
            </summary>
            <param name="value">A double value indicates the value to add.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleArray.AddSortedUnrepeatedValue(System.Double)">
            <summary>
            Adds the specified value in ascending order. The value is unique.
            </summary>
            <param name="value">A double value indicates the value to add.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleArray.StartNewSegment">
            <summary>
            Starts manipulating a new segment.
            </summary>
            <returns>A <see cref="T:GrapeCity.CalcEngine.DoubleArray.State"/> object which represents data of the previous segment.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DoubleArray.Restore(GrapeCity.CalcEngine.DoubleArray.State@)">
            <summary>
            Restores the specified <see cref="T:GrapeCity.CalcEngine.DoubleArray.State"/> object which represents data of a segment.
            </summary>
            <param name="state">The <see cref="T:GrapeCity.CalcEngine.DoubleArray.State"/> object which represents data of a segment.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.DoubleArray.State">
            <summary>
            Represents data of a segment in <see cref="T:GrapeCity.CalcEngine.DoubleArray"/>.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.DoubleArray.State.SegmentLength">
            <summary>
            Gets the length of the current segment.
            </summary>
            <value>The length of the current segment.</value>
        </member>
        <member name="T:GrapeCity.CalcEngine.CalcHelper">
            <summary>
            Contains util functions for calculation.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.GetDaysInMonth(System.Int32,System.Int32)">
            <summary>
            Gets the total days in the specified month.
            </summary>
            <param name="year">An integer value indicates the year.</param>
            <param name="month">An integer value indicates the month.</param>
            <returns>An integer value represents the total days in the specified month.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.GetDaysFrom1900(System.Int32)">
            <summary>
            Gets the total days of the specified year from the year 1900.
            </summary>
            <param name="year">An integer value indicates the year.</param>
            <returns>An integer value represents the total days of the specified year from the year 1900.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.GetDaysFromBaseDate(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the total days of the specified year from the year 1900.
            </summary>
            <param name="year">An integer value indicates the year.</param>
            <param name="month">An integer value indicates the month.</param>
            <param name="day">An integer value indicates the day.</param>
            <param name="isDate1904">if set to <c>true</c> the 1904 date system is using. Otherwise, <c>false</c>.</param>
            <param name="is19Century">if set to <c>true</c>, the year belong to the 19th century. Otherwise, <c>false</c>.</param>
            <returns>An integer value represents the total days of the specified year from the year 1900.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.IsDateValid(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified date is valid.
            </summary>
            <param name="days">A double value indicates the date serial.</param>
            <param name="isDate1904">if set to <c>true</c> the 1904 date system is using. Otherwise, <c>false</c>.</param>
            <returns><c>true</c> if the specified date is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.IsDateValid(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified date is valid.
            </summary>
            <param name="year">An integer value indicates the year.</param>
            <param name="month">An integer value indicates the month.</param>
            <param name="day">An integer value indicates the day.</param>
            <param name="isDate1904">if set to <c>true</c> the 1904 date system is using. Otherwise, <c>false</c>.</param>
            <returns><c>true</c> if the specified date is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.ToDate(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Converts date serial to <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">A double value indicates the date serial.</param>
            <param name="isDate1904">if set to <c>true</c>, the 1904 date system is using.</param>
            <returns>A double value represents the date serial.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.RoundSecond(System.Double)">
            <summary>
            Rounds the specified date serial to a date serial which doesn't contains mili-second.
            </summary>
            <param name="value">A double value indicates the date serial.</param>
            <returns>A double value represents the rounded date serial.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.ToNumber(System.TimeSpan)">
            <summary>
            Convert timeSpan to number.
            </summary>
            <param name="date">The <see cref="T:System.TimeSpan"/> value.</param>    
            <returns>A double value represents the timespan serial.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.ToTimeSpan(System.Double)">
            <summary>
            Returns a TimeSpan that represents a specified number of days, where the specification is accurate to the nearest millisecond.
            </summary>
            <param name="value">A number of days, accurate to the nearest millisecond.</param>
            <returns>An <see cref="T:System.TimeSpan"/> value that represents <paramref name="value"/>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.ToNumber(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Convert DateTime to number.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/> value.</param>
            <param name="isDate1904">if set to <c>true</c>, the 1904 date system is using.</param>
            <returns>A double value represents the date serial.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.ToNumber(System.Int64,System.Boolean)">
            <summary>
            Convert DateTime (in ticks) to number.
            </summary>
            <param name="ticks">The date time ticks.</param>
            <returns>A double value represents the date serial.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.ToExcelNumber(System.Int64)">
            <summary>
            Convert DateTime (in ticks) to number.
            </summary>
            <param name="ticks">The date time ticks.</param>
            <returns>A double value represents the date serial.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.TryConvertRomanNumeralToDecimal(System.String,System.Int32@)">
            <summary>
            Tries the convert roman numeral to decimal.
            </summary>
            <param name="text">The roman text which have limitted characters as 255 like Excel.</param>
            <param name="number">An integer value indicates the converted result.</param>
            <returns><c>true</c> if the text is valid roman numeral, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.ConvertToString(System.Double,System.Globalization.CultureInfo)">
            <summary>
            Converts double to string.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.TryConvertToNumber(System.String,System.Int32,System.Double@)">
            <summary>
            Converts the string value to its number equivalent string representation in a specified base.
            </summary>
            <param name="text">The string value to convert.</param>
            <param name="fromBase">The base of the return value, which must be greater than 1 and less than 37.</param>
            <returns><c>true</c> if the text can be converted to number successful. Otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.WrapReference(GrapeCity.CalcEngine.RangeReference@,System.Int32,System.Int32)">
            <summary>
            Correct the reference by wrapping invalid indexes to the other side of worksheet.
            </summary>
            <param name="rangeRef">The range reference.</param>
            <param name="source">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.WrapReference(GrapeCity.CalcEngine.CellReference@,System.Int32,System.Int32)">
            <summary>
            Correct the reference by wrapping invalid indexes to the other side of worksheet.
            </summary>
            <param name="rangeRef">The range reference.</param>
            <param name="source">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.IsNumeric(GrapeCity.CalcEngine.PrimitiveValue)">
            <summary>
            Check if the value should be processed as numeric (Number, DateTime, TimeSpan)
            </summary>
            <param name="value">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object indicates the value.</param>
            <returns><c>true</c> if the value should be processed as numeric.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.CalcHelper.IsNumericValue(System.Object)">
            <summary>
            Gets a boolean value indicating whether the specified value is numeric.
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> if the specified value is numeric; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.Complex">
            <summary>
            Represents a complex number.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.Complex.Real">
            <summary>
            The real component
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.Complex.Imaginary">
            <summary>
            The imaginary component
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.Complex.SuffixType">
            <summary>
            The type of complex number
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.#ctor(System.Double,System.Double,GrapeCity.CalcEngine.Complex.ComplexTypes)">
            <summary>
            Constructs a complex number.
            </summary>
            <param name="real">The real component of the complex number.</param>
            <param name="imaginary">The imaginary component of the complex number.</param>
            <param name="suffixType">The type of the complex number.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a complex number with the type as Undefined.
            </summary>
            <param name="real">The real component of the complex number.</param>
            <param name="imaginary">The imaginary component of the complex number.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Constructs a complex number.
            </summary>
            <param name="real">The real component of the complex number.</param>
            <param name="imaginary">The imaginary component of the complex number.</param>
            <param name="suffixType">The type of the complex number.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.Complex.Magnitude">
            <summary>
            Gets the magnitude (or absolute value) of a complex number.
            </summary>
            <value>The magnitude of the current instance.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.Complex.Phase">
            <summary>
            Gets the phase of a complex number.
            </summary>
            <value>The phase of a complex number, in radians.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.ToString(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Returns the string representation of this complex number.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.TryParse(System.String,System.Globalization.CultureInfo,System.Double@,System.Double@,GrapeCity.CalcEngine.Complex.ComplexTypes@,System.Boolean,System.Boolean)">
            <summary>
            Converts the string representation of a complex number to its complex number equivalent. A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="outReal">When this method returns, contains the double value equivalent of the real component number contained in s, if the conversion succeeded.</param>
            <param name="outImag">When this method returns, contains the double value equivalent of the imaginary component number contained in s, if the conversion succeeded.</param>
            <param name="suffix">When this method returns, contains the type equivalent of the complex number contained in s, if the conversion succeeded.</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.TryParse(System.String,System.Globalization.CultureInfo,GrapeCity.CalcEngine.Complex@,System.Boolean,System.Boolean)">
            <summary>
            Converts the string representation of a complex number to its complex number equivalent. A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="complex">When this method returns, contains the value equivalent of the complex number contained in s, if the conversion succeeded.</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.TryParse(System.String,System.Globalization.CultureInfo,System.Double@,System.Double@,System.Boolean,System.Boolean)">
            <summary>
            Converts the string representation of a complex number to its complex number equivalent. A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="real">When this method returns, contains the double value equivalent of the real component number contained in s, if the conversion succeeded.</param>
            <param name="imaginary">When this method returns, contains the double value equivalent of the imaginary component number contained in s, if the conversion succeeded.</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Abs(GrapeCity.CalcEngine.Complex)">
            <summary>
            Gets the absolute value (or magnitude) of a complex number.
            </summary>
            <param name="value">The complex value.</param>
            <returns>The absolute value of a complex number.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Acos(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the angle that is the arc cosine of the specified complex number.
            </summary>
            <param name="value">A complex number that represents a cosine.</param>
            <returns>The angle, measured in radians, which is the arc cosine of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Asin(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the angle that is the arc sine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The angle which is the arc sine of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Atan(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the angle that is the arc tangent of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The angle that is the arc tangent of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Conjugate(GrapeCity.CalcEngine.Complex)">
            <summary>
            Computes the conjugate of a complex number and returns the result.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The conjugate of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Cos(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the cosine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The cosine of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Cosh(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the hyperbolic cosine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The hyperbolic cosine of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Sec(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the secant of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The secant of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Sech(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the hyperbolic secant of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The hyperbolic secant of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Exp(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns e raised to the power specified by a complex number.
            </summary>
            <param name="value">A complex number that specifies a power.</param>
            <returns>The number e raised to the power value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.FromPolarCoordinates(System.Double,System.Double,GrapeCity.CalcEngine.Complex.ComplexTypes)">
            <summary>
            Creates a complex number from a point's polar coordinates.
            </summary>
            <param name="magnitude">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</param>
            <param name="phase">The phase, which is the angle from the line to the horizontal axis, measured in radians.</param>
            <returns>A complex number.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Log(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the natural (base e) logarithm of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The natural (base e) logarithm of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Log(GrapeCity.CalcEngine.Complex,System.Double)">
            <summary>
            Returns the logarithm of a specified complex number in a specified base.
            </summary>
            <param name="value">A complex number.</param>
            <param name="baseValue">The base of the logarithm.</param>
            <returns>The logarithm of value in base baseValue.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Log10">
            <summary>
            Returns the base-10 logarithm of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The base-10 logarithm of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Equality(GrapeCity.CalcEngine.Complex,GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns a value that indicates whether two complex numbers are equal.
            </summary>
            <param name="left">The first complex number to compare.</param>
            <param name="right">The second complex number to compare.</param>
            <returns>true if the left and right parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Inequality(GrapeCity.CalcEngine.Complex,GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns a value that indicates whether two complex numbers are not equal.
            </summary>
            <param name="left">The first complex number to compare.</param>
            <param name="right">The second complex number to compare.</param>
            <returns>true if left and right are not equal; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Explicit(System.Decimal)~GrapeCity.CalcEngine.Complex">
            <summary>
            Defines an explicit conversion of a Decimal value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>A complex number that has a real component equal to value and an imaginary component equal to zero.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Implicit(System.Byte)~GrapeCity.CalcEngine.Complex">
            <summary>
            Defines an explicit conversion of a byte value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>A complex number that has a real component equal to value and an imaginary component equal to zero.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Implicit(System.Double)~GrapeCity.CalcEngine.Complex">
            <summary>
            Defines an explicit conversion of a double value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>A complex number that has a real component equal to value and an imaginary component equal to zero.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Implicit(System.Int16)~GrapeCity.CalcEngine.Complex">
            <summary>
            Defines an explicit conversion of a short value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>A complex number that has a real component equal to value and an imaginary component equal to zero.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Implicit(System.Int32)~GrapeCity.CalcEngine.Complex">
            <summary>
            Defines an explicit conversion of a int value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>A complex number that has a real component equal to value and an imaginary component equal to zero.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Implicit(System.Int64)~GrapeCity.CalcEngine.Complex">
            <summary>
            Defines an explicit conversion of a long value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>A complex number that has a real component equal to value and an imaginary component equal to zero.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Implicit(System.SByte)~GrapeCity.CalcEngine.Complex">
            <summary>
            Defines an explicit conversion of a sbyte value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>A complex number that has a real component equal to value and an imaginary component equal to zero.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Implicit(System.Single)~GrapeCity.CalcEngine.Complex">
            <summary>
            Defines an explicit conversion of a float value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>A complex number that has a real component equal to value and an imaginary component equal to zero.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Implicit(System.UInt16)~GrapeCity.CalcEngine.Complex">
            <summary>
            Defines an explicit conversion of a ushort value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>A complex number that has a real component equal to value and an imaginary component equal to zero.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Implicit(System.UInt32)~GrapeCity.CalcEngine.Complex">
            <summary>
            Defines an explicit conversion of a uint value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>A complex number that has a real component equal to value and an imaginary component equal to zero.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Implicit(System.UInt64)~GrapeCity.CalcEngine.Complex">
            <summary>
            Defines an explicit conversion of a ulong value to a complex number.
            </summary>
            <param name="value">The value to convert to a complex number.</param>
            <returns>A complex number that has a real component equal to value and an imaginary component equal to zero.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Addition(GrapeCity.CalcEngine.Complex,GrapeCity.CalcEngine.Complex)">
            <summary>
            Adds two complex numbers.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>The sum of left and right.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Multiply(GrapeCity.CalcEngine.Complex,GrapeCity.CalcEngine.Complex)">
            <summary>
            Multiplies two specified complex numbers.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>The product of left and right.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Subtraction(GrapeCity.CalcEngine.Complex,GrapeCity.CalcEngine.Complex)">
            <summary>
            Subtracts a complex number from another complex number.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
            <returns>The result of subtracting right from left.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_Division(GrapeCity.CalcEngine.Complex,GrapeCity.CalcEngine.Complex)">
            <summary>
            Divides a specified complex number by another specified complex number.
            </summary>
            <param name="left">The value to be divided.</param>
            <param name="right">The value to divide by.</param>
            <returns>The result of dividing left by right.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.op_UnaryNegation(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the additive inverse of a specified complex number.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>The result of the Real and Imaginary components of the value parameter multiplied by -1.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Pow(GrapeCity.CalcEngine.Complex,System.Double)">
            <summary>
            Returns a specified complex number raised to a power specified by a complex number.
            </summary>
            <param name="value">A complex number to be raised to a power.</param>
            <param name="power">A complex number that specifies a power.</param>
            <returns>The complex number value raised to the power power.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Pow(GrapeCity.CalcEngine.Complex,GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns a specified complex number raised to a power specified by a double-precision floating-point number.
            </summary>
            <param name="value">A complex number to be raised to a power.</param>
            <param name="power">A double-precision floating-point number that specifies a power.</param>
            <returns>The complex number value raised to the power power.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Reciprocal(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the multiplicative inverse of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The reciprocal of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Sin(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the sine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The sine of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Sinh(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the hyperbolic sine of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The hyperbolic sine of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Csc(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the cosecant of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The cosecant of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Csch(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the hyperbolic cosecant of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The hyperbolic cosecant of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Sqrt(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the square root of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The square root of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Tan(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the tangent of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The tangent of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Cot(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the cotangent of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The cotangent of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Tanh(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the hyperbolic tangent of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The hyperbolic tangent of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Coth(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns the hyperbolic cotangent of the specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The hyperbolic cotangent of value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Equals(GrapeCity.CalcEngine.Complex)">
            <summary>
            Returns a value that indicates whether the current instance and a specified complex number have the same value.
            </summary>
            <param name="value">The complex number to compare.</param>
            <returns><c>true</c> if this complex number and value have the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Complex.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.Complex.ComplexTypes">
            <summary>
            Represents the type of complex number.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.BinomialCumulative(System.Int32,System.Int32,System.Double)">
            <summary>
            Returns the individual term binomial distribution probability using the cumulative distribution function.
            </summary>
            <param name="number_s">The number of successes in trials.</param>
            <param name="trials">The number of independent trials.</param>
            <param name="probability_s">The probability of success on each trial.</param>
            <returns>A double value represents the individual term binomial distribution probability.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.Binomial(System.Int32,System.Int32,System.Double)">
            <summary>
            Returns the individual term binomial distribution probability using the probability mass function.
            </summary>
            <param name="number_s">The number of successes in trials.</param>
            <param name="trials">The number of independent trials.</param>
            <param name="probability_s">The probability of success on each trial.</param>
            <returns>A double value represents the individual term binomial distribution probability.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.BinomialRange(System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the probability of a trial result using a binomial distribution.
            </summary>
            <param name="trials">The number of independent trials. Must be greater than or equal to 0.</param>
            <param name="probability">The probability of success in each trial. Must be greater than or equal to 0 and less than or equal to 1.</param>
            <param name="lowerBound">The number of successes in trials. Must be greater than or equal to 0 and less than or equal to <paramref name="trials"/>.</param>
            <param name="upperBound">If provided, returns the probability that the number of successful <paramref name="trials"/> will fall between <paramref name="lowerBound"/> and <paramref name="upperBound"/>. Must be greater than or equal to <paramref name="lowerBound"/> and less than or equal to <paramref name="trials"/>.</param>
            <returns>A double value represents the probability of a trial result using a binomial distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.GetDensityStandartNormalDistribution(System.Double)">
            <summary>
            Returns the value of the density function for a standard normal distribution.
            </summary>
            <param name="x">The number for which you want the density of the standard normal distribution.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.NormDist(System.Double,System.Double,System.Double)">
            <summary>
            Returns the normal distribution (using probability mass function) for the specified mean and standard deviation
            </summary>
            <param name="x">The value for which you want the distribution.</param>
            <param name="mean">The mean.</param>
            <param name="stdev">The stdev.</param>
            <returns>A double value represents the normal distribution (using probability mass function) for the specified mean and standard deviation.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.StandardNormalCumulativeDistribution(System.Double)">
            <summary>
            Returns the standard normal distribution (has a mean of zero and a standard deviation of one) using the cumulative distribution function.
            </summary>
            <param name="z">The value for which you want the distribution.</param>
            <returns>A double value represents the standard normal distribution (has a mean of zero and a standard deviation of one).</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.FProbabilityDensityFunction(System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the F probability density function.
            </summary>
            <param name="x">The value at which to evaluate the function.</param>
            <param name="numeratorDegrees">The numerator degrees of freedom.</param>
            <param name="denominatorDegrees">The denominator degrees of freedom.</param>
            <returns>A double value represents the F probability density function.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.StudentLeftTailedTDistributionCumulative(System.Double,System.Double)">
            <summary>
            Returns the Student's left-tailed t-distribution using the cumulative distribution function.
            </summary>
            <param name="x">The numeric value at which to evaluate the distribution.</param>
            <param name="deg_freedom">An integer indicating the number of degrees of freedom.</param>
            <returns>A double value represents the Student's left-tailed t-distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.StudentLeftTailedTDistribution(System.Double,System.Double)">
            <summary>
            Returns the Student's left-tailed t-distribution using the probability density function.
            </summary>
            <param name="x">The numeric value at which to evaluate the distribution.</param>
            <param name="deg_freedom">An integer indicating the number of degrees of freedom.</param>
            <returns>A double value represents the Student's left-tailed t-distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.TailedStudentTDistribution(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the Percentage Points (probability) for the Student t-distribution 
            where a numeric value (x) is a calculated value of t for which the Percentage Points are to be computed. 
            The t-distribution is used in the hypothesis testing of small sample data sets. 
            Use this function in place of a table of critical values for the t-distribution.
            </summary>
            <param name="x">The x.</param>
            <param name="degrees">The degrees.</param>
            <param name="tails">The tails.</param>
            <returns>A <see cref="T:System.Double"/> value represents </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.BetaDistributionCumulative(System.Double,System.Double,System.Double)">
            <summary>
            Returns the beta distribution using the cumulative distribution function.
            </summary>
            <param name="x">The value between A and B at which to evaluate the function.</param>
            <param name="alpha">A parameter of the distribution.</param>
            <param name="beta">A parameter of the distribution.</param>
            <returns>A double value represents the beta distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.BetaDistribution(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the beta distribution using the probability density function.
            </summary>
            <param name="x">The value between A and B at which to evaluate the function.</param>
            <param name="alpha">A parameter of the distribution.</param>
            <param name="beta">A parameter of the distribution.</param>
            <param name="lowerBound">A lower bound to the interval of x.</param>
            <param name="upperBound">An upper bound to the interval of x.</param>
            <returns>A double value represents the beta distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.InverseBetaCumulative(System.Double,System.Double,System.Double)">
            <summary>
            Returns the inverse of the beta cumulative probability density function (BETA.DIST).
            </summary>
            <param name="probability">A probability associated with the beta distribution.</param>
            <param name="alpha">A parameter of the distribution.</param>
            <param name="beta">A parameter the distribution.</param>
            <returns>A double value represents the inverse of the beta cumulative probability density function.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.BetaDistributionSolver.Calculate(System.Double)">
            <summary>
            Returns the beta distribution using the cumulative distribution function.
            </summary>
            <param name="x">The value between A and B at which to evaluate the function.</param>
            <param name="alpha">A parameter of the distribution.</param>
            <param name="beta">A parameter of the distribution.</param>
            <returns>A double value represents the beta distribution.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.BetaDistributionSolver.CalculateInverse(System.Double)">
            <summary>
            Returns the inverse of the beta cumulative probability density function (BETA.DIST).
            </summary>
            <param name="probability">A probability associated with the beta distribution.</param>
            <returns>A double value represents the inverse of the beta cumulative probability density function.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Distribution.BetaDistributionSolver.BetaDistributionCharacteristicFunction(System.Double,System.Double,System.Double)">
            <summary>
            Returns the beta distribution characteristic function.
            </summary>
            <param name="x">The value between A and B at which to evaluate the function.</param>
            <param name="alpha">A parameter of the distribution.</param>
            <param name="beta">A parameter of the distribution.</param>
            <returns>A double value represents the beta distribution characteristic function.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.Extensions">
            <summary>
            Contains extension methods for calculation engine assembly.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Extensions.Reverse(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Reverses the specified range in <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> object to reverse.</param>
            <param name="index">An integer value indicates the start index of range to reverse.</param>
            <param name="length">An integer value indicates the length of range to reverse.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Extensions.GetValue(GrapeCity.CalcEngine.IReadonlyPrimitiveValue,GrapeCity.CalcEngine.IEvaluationContext,System.Boolean)">
            <summary>
            Gets the value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance as object.
            </summary>
            <param name="value">The value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance.</param>
            <param name="context">The evaluation context to get value from reference.</param>
            <returns>An object represents the value of an <see cref="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue" /> instance.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MathOptimizer.MultiplyBy10Exp(System.Double@,System.Int32)">
            <summary>
            Multiply the number by (10 ^ exponent).
            </summary>
            <param name="number">A double value indicate the number.</param>
            <param name="exponent">An integer value indicates the exponent.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MathOptimizer.ApproxEqual(System.Double,System.Double)">
            <summary>
            Compares this instance to a specified double-precision floating-point number and 
            returns an integer that indicates whether the value of this instance is less than, 
            equal to, or greater than the value of the specified double-precision floating-point number.
            </summary>
            <param name="d1">A double-precision floating-point origin number.</param>
            <param name="d2">A double-precision floating-point number to compare.</param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MathOptimizer.ApproxCeiling(System.Double)">
            <summary>
            A ceiling method taking ApproxEqual into account.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.MathOptimizer.ApproxFloor(System.Double)">
            <summary>
            A floor method taking ApproxEqual into account.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.MathOptimizer.DivRem(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.
            </summary>
            <param name="a">The dividend.</param>
            <param name="b">The divisor.</param>
            <param name="remainder">The remainder.</param>
            <returns>The quotient of the specified numbers.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MathOptimizer.DivRem(System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
            Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.
            </summary>
            <param name="a">The dividend.</param>
            <param name="b">The divisor.</param>
            <param name="remainder">The remainder.</param>
            <returns>The quotient of the specified numbers.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MathOptimizer.CalculateFnvHashCode(GrapeCity.CalcEngine.RangeReference[])">
            <summary>
            Calculates hash code of an integer array using FNV-1a algorithm (http://www.isthe.com/chongo/tech/comp/fnv/)
            </summary>
            <param name="refs">An array contains integer values.</param>
            <returns>An integer value represents the hash code of an integer array.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MathOptimizer.ComputeHash(System.Int32)">
            <summary>
            Computes the hash.
            </summary>
            <param name="number">The number.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MathOptimizer.ComputeHash(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the hash.
            </summary>
            <param name="number1">The number1.</param>
            <param name="number2">The number2.</param>
            <param name="number3">The number3.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MathOptimizer.ComputeHash(System.Int32,System.Int32)">
            <summary>
            Computes the hash.
            </summary>
            <param name="number1">The number1.</param>
            <param name="number2">The number2.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MathOptimizer.Power(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="power"></param>
            <returns>Return double.PositiveInfinitive for CalcError.Number, double.NegativeInfinitive for CalcError.DivideByZero.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.StringBuilderCache">
            <summary>
            Provide a cached reusable instance of stringbuilder per thread.
            It's an optimisation that reduces the number of instances constructed and collected.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.StringBuilderCache.Acquire(System.Int32)">
            <summary>
            Get a string builder to use of a particular size.  It can be called any number of times, 
            if a stringbuilder is in the cache then it will be returned and the cache emptied.
            subsequent calls will return a new stringbuilder.
            </summary>
            <param name="capacity">The capacity.</param>
            <returns>A StringBuilder instance is cached in Thread Local Storage and so there is one per thread</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>
            ToString() the stringbuilder, Release it to the cache and return the resulting string
            </summary>
            <param name="sb">The string builder.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StringBuilderCache.Release(System.Text.StringBuilder)">
            <summary>
            Place the specified builder in the cache if it is not too big.
            The stringbuilder should not be used after it has been released.
            Unbalanced Releases are perfectly acceptable.  It will merely cause the runtime to create a new stringbuilder next time Acquire is called.
            </summary>
            <param name="sb">The string builder.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.IArguments">
            <summary>
            Represents a set of arguments which are passed to a function.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.IArguments.EvaluationContext">
            <summary>
            Gets an <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> instance indicates the evaluation context.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.IArguments.Count">
            <summary>
            Gets the total count of arguments.
            </summary>
            <value>An integer value indicates the total count of arguments.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IArguments.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.IValue"/> argument at the specified index.
            </summary>
            <param name="index">An integer value indicates the index of argument.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.IValue"/> instance indicates value of the specified argument.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IArguments.GetArrayValue(System.Int32,System.Int32,System.Int32,GrapeCity.CalcEngine.IPrimitiveValue)">
            <summary>
            Gets the value of an item in the array argument.
            </summary>
            <param name="index">An integer value indicates the index of argument.</param>
            <param name="row">An integer value indicates the row array index of item.</param>
            <param name="column">An integer value indicates the column array index of item.</param>
            <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> instance to store value of the specified item in the array argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IArguments.AllocSharedValue(System.Int32)">
            <summary>
            Allocates multiple <see cref="T:GrapeCity.CalcEngine.IValue"/> objects.
            </summary>
            <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.IValue"/> objects to allocate.</param>
            <returns>An zero-based interger indicates the index of first allocated <see cref="T:GrapeCity.CalcEngine.IValue"/> object.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IArguments.DeallocSharedValue">
            <summary>
            Deallocates the last created <see cref="T:GrapeCity.CalcEngine.IValue"/> objects.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.IArguments.SharedValueIndex">
            <summary>
            Gets the first allocated value index.
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.Arguments">
            <summary>
            Represents an implementation of <see cref="T:GrapeCity.CalcEngine.IArguments"/> interface.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Arguments.#ctor(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.Arguments"/> struct.
            </summary>
            <param name="context">The context.</param>
            <param name="expressions">The expressions.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.Arguments.SharedValueIndex">
            <summary>
            Gets the first allocated value index.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Arguments.AllocSharedValue(System.Int32)">
            <summary>
            Allocates multiple <see cref="T:GrapeCity.CalcEngine.IValue"/> objects.
            </summary>
            <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.IValue"/> objects to allocate.</param>
            <returns>An zero-based interger indicates the index of first allocated <see cref="T:GrapeCity.CalcEngine.IValue"/> object.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Arguments.DeallocSharedValue">
            <summary>
            Deallocates the last created <see cref="T:GrapeCity.CalcEngine.IValue"/> objects.
            </summary>
            <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.IValue"/> objects to deallocate.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.Arguments.GrapeCity#CalcEngine#IArguments#EvaluationContext">
            <summary>
            Gets the evaluation context.
            </summary>
            <value>The evaluation context.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.Arguments.EvaluationContext">
            <summary>
            Gets the evaluation context.
            </summary>
            <value>The evaluation context.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.Arguments.Item(System.Int32)">
            <summary>
            Gets the value of the specified argument.
            </summary>
            <param name="index">An integer value indicates the index of argument.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.IValue" /> instance indicates value of the specified argument.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.Arguments.Count">
            <summary>
            Gets the arguments count.
            </summary>
            <value>The arguments count.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Arguments.GetArrayValue(System.Int32,System.Int32,System.Int32,GrapeCity.CalcEngine.IPrimitiveValue)">
            <summary>
            Gets the value of an item in the array argument.
            </summary>
            <param name="index">An integer value indicates the index of argument.</param>
            <param name="row">An integer value indicates the row array index of item.</param>
            <param name="column">An integer value indicates the column array index of item.</param>
            <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> instance to store value of the specified item in the array argument.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GrapeCity.CalcEngine.IEvaluationContext">
            <summary>
            An interface which the evaluation-enabled class must derived from.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.IEvaluationContext.LanguagePackage">
            <summary>
            Gets the current language package for calculation.
            </summary>
            <value>The <see cref="T:GrapeCity.CalcEngine.ICalcEngineLanguagePackage"/> object represents the language package.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ExcelDateTimeCompatible">
            <summary>
            Processing date time is compatible with Lotus123. It assumes that 1900 is not a leap year.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ContextRow">
            <summary>
            Gets the row index of the cell whose formula is being evaluated.
            </summary>
            <value>An zero-based integer indicates the row index of the cell.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ContextColumn">
            <summary>
            Gets the column index of the cell whose formula is being evaluated.
            </summary>
            <value>An zero-based integer indicates the column index of the cell.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IEvaluationContext.ReferenceSource">
            <summary>
            Gets the reference source where the formula is being evaluated.
            </summary>
            <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object represents where the formula is being evaluated.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IEvaluationContext.AllocValue">
            <summary>
            Allocates a new <see cref="T:GrapeCity.CalcEngine.IValue"/> object.
            </summary>
            <returns>The new allocated <see cref="T:GrapeCity.CalcEngine.IValue"/> object.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IEvaluationContext.AllocValue(System.Int32)">
            <summary>
            Allocates multiple <see cref="T:GrapeCity.CalcEngine.IValue"/> objects.
            </summary>
            <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.IValue"/> objects to allocate.</param>
            <returns>An zero-based interger indicates the index of first allocated <see cref="T:GrapeCity.CalcEngine.IValue"/> object.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IEvaluationContext.DeallocValue">
            <summary>
            Deallocates the last created <see cref="T:GrapeCity.CalcEngine.IValue"/> object.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.IEvaluationContext.DeallocValue(System.Int32)">
            <summary>
            Deallocates the last created <see cref="T:GrapeCity.CalcEngine.IValue"/> objects.
            </summary>
            <param name="count">The total number of <see cref="T:GrapeCity.CalcEngine.IValue"/> objects to deallocate.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IEvaluationContext.GetValue(System.Int32)">
            <summary>
            Get the <see cref="T:GrapeCity.CalcEngine.IValue"/> object at the specified index.
            </summary>
            <param name="index">The zero-based integer indicates the index of <see cref="T:GrapeCity.CalcEngine.IValue"/> object.</param>
            <returns>IValue.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.IEvaluationContext.Error">
            <summary>
            Gets or sets the calculation error.
            </summary>
            <value>The calculation error value.</value>
            <remarks>The first calculation error will has highest priority. It will be kept until the calculation error is clear.</remarks>
        </member>
        <member name="M:GrapeCity.CalcEngine.IEvaluationContext.EnterContext(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
            <summary>
            Enters the specified evaluating context.
            </summary>
            <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object which is using formula.</param>
            <param name="contextRow">An integer value indicates the context row index.</param>
            <param name="contextColumn">An integer value indicates the context column index.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IEvaluationContext.ExitContext">
            <summary>
            Exits from the current evaluating context back to the previous evaluating context.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.IEvaluationContext.Evaluate(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.IValue)">
            <summary>
            Evaluates the specified expression and returns the evaluated result via <paramref name="result"/> parameter.
            </summary>
            <param name="expression">The expression to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.IValue"/> object to keep evaluated result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IEvaluationContext.CastToInt(System.Double)">
            <summary>
            Casts the specified <see cref="T:System.Double"/> value to <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value.</param>
            <returns>The corresponding <see cref="T:System.Int32"/> value. <see cref="P:GrapeCity.CalcEngine.IEvaluationContext.Error"/> will be set to <see cref="F:GrapeCity.CalcEngine.CalcError.Number"/> if the <see cref="T:System.Double"/> value cannot be casted.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IEvaluationContext.CastToLong(System.Double)">
            <summary>
            Casts the specified <see cref="T:System.Double"/> value to <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value.</param>
            <returns>The corresponding <see cref="T:System.Int64"/> value. <see cref="P:GrapeCity.CalcEngine.IEvaluationContext.Error"/> will be set to <see cref="F:GrapeCity.CalcEngine.CalcError.Number"/> if the <see cref="T:System.Double"/> value cannot be casted.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.IReferenceSource">
            <summary>
            Indicates the source of a cell reference or range reference
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.IReferenceSource.Name">
            <summary>
            Gets the name of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/>.
            </summary>
            <value>A string value represents the name of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IReferenceSource.Supports3DReference">
            <summary>
            Gets a value indicating whether this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object supports 3D-Reference.
            </summary>
            <value><c>true</c> if this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object supports 3D-Reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IReferenceSource.Date1904">
            <summary>
            Gets whether the date system used to convert a date to a serial value starts in 1904.
            </summary>
            <value><c>true</c>, if the date system starts in 1904; otherwise, <c>false</c>. Default is <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReferenceSource.EnsureCalculated(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Make sure that all cells in the specified range are calculated.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="row">An integer value indicates the top row index of the 2-dimensions matrix.</param>
            <param name="column">An integer value indicates the left column index of the 2-dimensions matrix.</param>
            <param name="row2">An integer value indicates the bottom row index of the 2-dimensions matrix.</param>
            <param name="column2">An integer value indicates the right column index of the 2-dimensions matrix.</param>
            <param name="enableSpilledArray">if set to <c>true</c> [enable spilled array].</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReferenceSource.Get3DReferenceIndex">
            <summary>
            Get the 3D-Reference index of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object.
            </summary>
            <returns>An integer value indicates the 3D-Reference index of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,GrapeCity.CalcEngine.IPrimitiveValue)">
            <summary>
            Gets the value at the specified location of the 2-dimensions matrix.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="row">An integer value indicates the row index of the 2-dimensions matrix.</param>
            <param name="column">An integer value indicates the column index of the 2-dimensions matrix.</param>
            <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object represents the value at the specified location.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,System.Int32,System.Int32,GrapeCity.CalcEngine.IValuesArray,System.Boolean)">
            <summary>
            Gets the values at the specified range of the 2-dimensions matrix.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="row">An integer value indicates the top row index of the 2-dimensions matrix.</param>
            <param name="column">An integer value indicates the left column index of the 2-dimensions matrix.</param>
            <param name="row2">An integer value indicates the bottom row index of the 2-dimensions matrix.</param>
            <param name="column2">An integer value indicates the right column index of the 2-dimensions matrix.</param>
            <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object represents the values at the specified range.</param>
            <param name="keepEmptyValue">Boolean value represents keeping empty values as empty or not.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,System.Int32,System.Int32,GrapeCity.CalcEngine.CellValue[],System.Int32)">
            <summary>
            Gets the values at the specified range of the 2-dimensions matrix.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="row">An integer value indicates the top row index of the 2-dimensions matrix.</param>
            <param name="column">An integer value indicates the left column index of the 2-dimensions matrix.</param>
            <param name="row2">An integer value indicates the bottom row index of the 2-dimensions matrix.</param>
            <param name="column2">An integer value indicates the right column index of the 2-dimensions matrix.</param>
            <param name="result">An <see cref="T:GrapeCity.CalcEngine.CellValue" /> array represents the values at the specified range.</param>
            <param name="index">The start item index to write data.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Gets the value at the specified location of the 2-dimensions matrix.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="row">An integer value indicates the row index of the 2-dimensions matrix.</param>
            <param name="column">An integer value indicates the column index of the 2-dimensions matrix.</param>
            <param name="result">An <see cref="T:GrapeCity.CalcEngine.CellValue" /> object represents the value at the specified location.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.IReferenceSource.RowCount">
            <summary>
            Gets the number of rows in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/>.
            </summary>
            <value>An integer value represents the number of rows in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IReferenceSource.ColumnCount">
            <summary>
            Gets the number of columns in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/>.
            </summary>
            <value>An integer value represents the number of columns in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetReferenceExpression(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Gets the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.
            </summary>
            <param name="formulaEngine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula engine.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReferenceSource.GetReferenceExpression(GrapeCity.CalcEngine.FormulaEngine,GrapeCity.CalcEngine.IStructuredObject,GrapeCity.CalcEngine.StructuredItemSpecifiers,System.Int32,System.Int32)">
            <summary>
            Gets the reference expression to evaluate the specified <see cref="T:GrapeCity.CalcEngine.IStructuredObject" />.
            </summary>
            <param name="formulaEngine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula engine.</param>
            <param name="structuredObject">An <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/> object indicates the structured object.</param>
            <param name="itemSpecifiers">A <see cref="T:GrapeCity.CalcEngine.StructuredItemSpecifiers"/> value indicates the item specifiers.</param>
            <param name="columnId">An integer value indicates the first column.</param>
            <param name="columnId2">An integer value indicates the second column.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReferenceSource.IsUndefined">
            <summary>
            Determines whether this reference source is undefined.
            </summary>
            <returns><c>true</c> if this reference source is undefined; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.ICalcWorkbook">
            <summary>
            Represents the interface for a worksheet.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.ICalcWorkbook.GetActiveSheetExpresion">
            <summary>
            Gets the active sheet reference expresion.
            </summary>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the active sheet reference expression.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorkbook.ActiveSheet">
            <summary>
            Gets the active sheet object.
            </summary>
            <returns>An <see cref="T:GrapeCity.CalcEngine.ICalcWorksheet"/> object represents the active sheet.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorkbook.AssociatedWorkbook">
            <summary>
            Gets the associated workbook.
            </summary>
            <value>The associated workbook.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorkbook.FormulaEngine">
            <summary>
            Gets the formula engine of this workbook.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorkbook.EvaluationContext">
            <summary>
            Gets the evaluation context of this workbook;
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.ICalcWorkbook.TryGetDefinedName(GrapeCity.CalcEngine.ICalcWorksheet,System.String,GrapeCity.CalcEngine.IDefinedName@)">
            <summary>
            Gets the specified defined name from the workbook.
            </summary>
            <param name="worksheet">The worksheet indicates the scope of the defined name.</param>
            <param name="name">A string value indicates the defined name.</param>
            <param name="definedName">An <see cref="T:GrapeCity.CalcEngine.IDefinedName"/> object represents the found defined name.</param>
            <returns><c>true</c> if the defined name existed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.ICalcWorksheet">
            <summary>
            Represents the interface for a worksheet.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorksheet.Name">
            <summary>
            Gets the name of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/>.
            </summary>
            <value>A string value represents the name of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorksheet.ColumnHeader">
            <summary>
            Gets the column header of the worksheet as a reference source.
            </summary>
            <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object represents the column header.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorksheet.RowHeader">
            <summary>
            Gets the row header of the worksheet as a reference source.
            </summary>
            <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object represents the row header.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorksheet.ColumnFooter">
            <summary>
            Gets the column footer of the worksheet as a reference source.
            </summary>
            <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object represents the column footer.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorksheet.OwnerWorksheet">
            <summary>
            Get the owner which contains this worksheet.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorksheet.Workbook">
            <summary>
            Gets the owner workbook of this worksheet.
            </summary>
            <value>An <see cref="T:GrapeCity.CalcEngine.ICalcWorkbook"/> object represents the owner workbook.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.ICalcWorksheet.IsReferredTo(GrapeCity.CalcEngine.ICalcWorksheet)">
            <summary>
            Determines whether the current worksheet refers to the specified worksheet for evaluation.
            </summary>
            <param name="worksheet">The worksheet to verify.</param>
            <returns><c>true</c> if the current worksheet refers to the specified worksheet for evaluation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ICalcWorksheet.IsExternal">
            <summary>
            Determines whether the current worksheet is an external worksheet.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.ICalcWorksheet.GetSpilledArrayReference(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Gets the spilled array value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="row">An integer value indicates the row index of the 2-dimensions matrix.</param>
            <param name="column">An integer value indicates the column index of the 2-dimensions matrix.</param>
            <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object represents the value at the specified location.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorksheet.AssociatedWorksheet">
            <summary>
            Gets the associated worksheet.
            </summary>
            <value>The associated worksheet.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.ICalcWorksheet.Visible">
            <summary>
            Gets a value indicating whether this <see cref="T:GrapeCity.CalcEngine.ICalcWorksheet"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:GrapeCity.CalcEngine.UndefinedReferenceSource">
            <summary>
            Represents an undefined reference source.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.UndefinedReferenceSource"/> class.
            </summary>
            <param name="name">A string value indicates the reference source name.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.UndefinedReferenceSource.Name">
            <summary>
            Gets the name of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.
            </summary>
            <value>A string value represents the name of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.UndefinedReferenceSource.GrapeCity#CalcEngine#IReferenceSource#Supports3DReference">
            <summary>
            Gets a value indicating whether this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object supports 3D-Reference.
            </summary>
            <value><c>true</c> if this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object supports 3D-Reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.UndefinedReferenceSource.GrapeCity#CalcEngine#IReferenceSource#RowCount">
            <summary>
            Gets the number of rows in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.
            </summary>
            <value>An integer value represents the number of rows in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.UndefinedReferenceSource.GrapeCity#CalcEngine#IReferenceSource#ColumnCount">
            <summary>
            Gets the number of columns in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.
            </summary>
            <value>An integer value represents the number of columns in this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSource.GrapeCity#CalcEngine#IReferenceSource#Get3DReferenceIndex">
            <summary>
            Get the 3D-Reference index of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object.
            </summary>
            <returns>An integer value indicates the 3D-Reference index of this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSource.GrapeCity#CalcEngine#IReferenceSource#GetReferenceExpression(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Gets the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.
            </summary>
            <param name="formulaEngine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula engine.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSource.GrapeCity#CalcEngine#IReferenceSource#GetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,GrapeCity.CalcEngine.IPrimitiveValue)">
            <summary>
            Gets the value at the specified location of the 2-dimensions matrix.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="row">An integer value indicates the row index of the 2-dimensions matrix.</param>
            <param name="column">An integer value indicates the column index of the 2-dimensions matrix.</param>
            <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object represents the value at the specified location.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSource.GrapeCity#CalcEngine#IReferenceSource#GetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Int32,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Gets the value at the specified location of the 2-dimensions matrix.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="row">An integer value indicates the row index of the 2-dimensions matrix.</param>
            <param name="column">An integer value indicates the column index of the 2-dimensions matrix.</param>
            <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object represents the value at the specified location.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSource.GrapeCity#CalcEngine#IReferenceSource#IsUndefined">
            <summary>
            Determines whether this reference source is undefined.
            </summary>
            <returns><c>true</c> if this reference source is undefined; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSource.GrapeCity#CalcEngine#IReferenceSource#GetReferenceExpression(GrapeCity.CalcEngine.FormulaEngine,GrapeCity.CalcEngine.IStructuredObject,GrapeCity.CalcEngine.StructuredItemSpecifiers,System.Int32,System.Int32)">
            <summary>
            Gets the reference expression to evaluate the specified <see cref="T:GrapeCity.CalcEngine.IStructuredObject" />.
            </summary>
            <param name="formulaEngine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula engine.</param>
            <param name="structuredObject">An <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/> object indicates the structured object.</param>
            <param name="itemSpecifiers">A <see cref="T:GrapeCity.CalcEngine.StructuredItemSpecifiers"/> value indicates the item specifiers.</param>
            <param name="columnId">An integer value indicates the first column.</param>
            <param name="columnId2">An integer value indicates the second column.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the reference expression to evaluate this <see cref="T:GrapeCity.CalcEngine.IReferenceSource" />.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.IReadonlyPrimitiveValue">
            <summary>
            Represents an interfaces for a calculated primitive value of calculation engine.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.ValueType">
            <summary>
            Gets the value type of this <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> instance.
            </summary>
            <value>The type of the data of the <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> instance.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetNumber(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:System.Double"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetText(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:System.String"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetLogical(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetError(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.CalcError"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.CalcError"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetDate(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetTime(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.TimeSpan"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IReadonlyPrimitiveValue.GetObject(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:System.Object"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.Object"/> value.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.IPrimitiveValue">
            <summary>
            Represents an interfaces for a calculated primitive value of calculation engine.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Double)">
            <summary>
            Sets the <see cref="T:System.Double" /> value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="value">The <see cref="T:System.Double" /> value to set.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.Object,System.Boolean)">
            <summary>
            Sets the <see cref="T:System.Object" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to set.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(GrapeCity.CalcEngine.CalcError)">
            <summary>
            Sets the <see cref="T:GrapeCity.CalcEngine.CalcError"/> value.
            </summary>
            <param name="value">The <see cref="T:GrapeCity.CalcEngine.CalcError"/> value to set.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(GrapeCity.CalcEngine.IEvaluationContext,System.String)">
            <summary>
            Sets the <see cref="T:System.String" /> value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="value">The <see cref="T:System.String" /> value to set.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.Boolean)">
            <summary>
            Sets the <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to set.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.DateTime)">
            <summary>
            Sets the <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to set.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.SetValue(System.TimeSpan)">
            <summary>
            Sets the <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to set.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.Reset">
            <summary>
            Resets this <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> object to empty.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.IPrimitiveValue.CompareTo(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IPrimitiveValue)">
            <summary>
            Compares this instance to a specified <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> object and returns an indication of their relative values.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="value">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> object idnicates the value to compare with.</param>
            <returns>A signed number indicating the relative values of this instance and value.Return Value Description Less than zero This instance is less than value. Zero This instance is equal to value. Greater than zero This instance is greater than value.-or- value is null.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.IValue">
            <summary>
            Represents an interfaces for a calculated value of calculation engine.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.IPrimitiveValue" />
        </member>
        <member name="P:GrapeCity.CalcEngine.IValue.ReferenceCount">
            <summary>
            Gets the reference count.
            </summary>
            <value>An integer values represents the reference count.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IValue.ReferenceSourceCount">
            <summary>
            Gets the reference source count.
            </summary>
            <value>An integer values represents the reference source count.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.GetReferenceSource(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the reference source.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> value indicates the evaluation context.</param>
            <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> objects indicates the reference source.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.GetReferenceSource2(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the end reference source.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> value indicates the evaluation context.</param>
            <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> objects indicates the end reference source.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.GetReferenceSource(GrapeCity.CalcEngine.IEvaluationContext,System.Int32)">
            <summary>
            Gets the reference source at the specified position.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> value indicates the evaluation context.</param>
            <param name="sourceIndex">An integer value indicates the position of the reference source.</param>
            <value>An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> objects indicates the reference source.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.GetReference(GrapeCity.CalcEngine.IEvaluationContext,System.Int32)">
            <summary>
            Gets the reference at the specified position.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> value indicates the evaluation context.</param>
            <param name="index">An integer value indicates the position in the array.</param>
            <returns>A <see cref="!:RangeReference."/> value represents the reference at the specified position.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.GetRowCount(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the row count of the evaluated range reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <returns>An integer value represents the row count of the evaluated range reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.GetColumnCount(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the column count of the evaluated range reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <returns>An integer value represents the column count of the evaluated range reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.CopyReferenceTo(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference[],System.Int32)">
            <summary>
            Copies all references to an array at the specified position.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> value indicates the evaluation context.</param>
            <param name="array">The array to copy to.</param>
            <param name="index">An integer value indicates the position in the array.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue"/> to the specified cell reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> value indicates the evaluation context.</param>
            <param name="cellRef">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the cell reference.</param>
            <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> value indicates the reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue"/> to the specified reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> value indicates the evaluation context.</param>
            <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value indicates the range reference.</param>
            <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> value indicates the reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference[],GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue"/> to the specified reference array.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> value indicates the evaluation context.</param>
            <param name="rangeRefs">An array of <see cref="T:GrapeCity.CalcEngine.RangeReference"/> represents the range references.</param>
            <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> value indicates the reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue"/> to the specified 3D-reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext"/> value indicates the evaluation context.</param>
            <param name="rangeRefs">An array of <see cref="T:GrapeCity.CalcEngine.RangeReference"/> represents the range references.</param>
            <param name="startRefSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> value indicates the start reference source.</param>
            <param name="endRefSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> value indicates the end reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.SetValue(GrapeCity.CalcEngine.IValuesArray)">
            <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue"/> to the specified <see cref="T:GrapeCity.CalcEngine.IValuesArray"/>.
            </summary>
            <param name="valuesArray">An <see cref="T:GrapeCity.CalcEngine.IValuesArray"/> value represents the new value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.GetValuesArray">
            <summary>
            Gets the values array value.
            </summary>
            <returns>A <see cref="T:GrapeCity.CalcEngine.IValuesArray"/> value represents the values array value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.CreateValuesArray(System.Int32,System.Int32)">
            <summary>
            Creates a new values array.
            </summary>
            <param name="rowCount">An integer value indicates the row count of values array.</param>
            <param name="columnCount">An integer value indicates the column count of values array.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> value represents the values array value.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.IValue.ValueType">
            <summary>
            Gets the value type of this <see cref="T:GrapeCity.CalcEngine.IValue"/> instance.
            </summary>
            <value>The type of the data of the <see cref="T:GrapeCity.CalcEngine.IValue"/> instance.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValue.GetPrimitiveValue(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Get primitive value from this <see cref="T:GrapeCity.CalcEngine.IValue"/> object.
            </summary>
            <returns>An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> instance referred by this <see cref="T:GrapeCity.CalcEngine.IValue"/> object.</returns>
            <remarks>After this function is invoked, there is no guarranty that this object keeps unchanged.</remarks>
        </member>
        <member name="T:GrapeCity.CalcEngine.PrimitiveValueType">
            <summary>
            Represents the type of evaluated primitive value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Empty">
            <summary>
            Indicates there is no value returned.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Error">
            <summary>
            Indicates the value type is calculation error.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Logical">
            <summary>
            Indicates the value type is boolean.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Text">
            <summary>
            Indicates the value type is string.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Number">
            <summary>
            Indicates the value type is numeric.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.DateTime">
            <summary>
            Indicates the value type is DateTime which is introduced from Excel 2010.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.TimeSpan">
            <summary>
            Indicates the value type is TimeSpan.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrimitiveValueType.Object">
            <summary>
            Indicates the value type if object.
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.ValueType">
            <summary>
            Represents the type of evaluated value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.Empty">
            <summary>
            Indicates there is no value returned.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.Error">
            <summary>
            Indicates the value type is calculation error.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.Logical">
            <summary>
            Indicates the value type is boolean.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.Text">
            <summary>
            Indicates the value type is string.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.Number">
            <summary>
            Indicates the value type is numeric.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.DateTime">
            <summary>
            Indicates the value type is DateTime which is introduced from Excel 2010.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.TimeSpan">
            <summary>
            Indicates the value type is TimeSpan.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.Integer">
            <summary>
            Indicates the value type is integer number.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.Object">
            <summary>
            Indicates the value type is general object.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.ValuesArray">
            <summary>
            Indicates the value type is array.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.Reference">
            <summary>
            Indicates the value type is reference (declared in the formula or be calculated)
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.AdjustableReference">
            <summary>
            Indicates the value type is reference which is declared in the formula
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.MultiReference">
            <summary>
            Indicates the value type is multi-reference.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.ValueType.Reference3D">
            <summary>
            Indicates the value type is 3D-Reference.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine._ICalcEngineLanguagePackage.IsJapanese">
            <summary>
            Gets a value indicating whether this language package is Japanese.
            </summary>
            <value><c>true</c> if this language package is Japanese; otherwise, <c>false</c>.</value>
            <remarks>This property is to optimize performance for Japanese release.</remarks>
        </member>
        <member name="P:GrapeCity.CalcEngine._ICalcEngineLanguagePackage.IsEnglish">
            <summary>
            Gets a value indicating whether this language package is English.
            </summary>
            <value><c>true</c> if this language package is English; otherwise, <c>false</c>.</value>
            <remarks>This property is to optimize performance for English release.</remarks>
        </member>
        <member name="M:GrapeCity.CalcEngine._ICalcEngineLanguagePackage.GetBuiltinFunction(System.String)">
            <summary>
            Gets the builtin function.
            </summary>
            <param name="name">The function name.</param>
            <returns>The <see cref="T:GrapeCity.CalcEngine.BuiltinFunction"/> value or -1.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine._ICalcEngineLanguagePackage.GetFunctionName(GrapeCity.CalcEngine.Function)">
            <summary>
            Gets the localized name of the function.
            </summary>
            <param name="function">A <see cref="T:GrapeCity.CalcEngine.BuiltinFunction"/> value indicates the built-in function.</param>
            <returns>A string value represents the localized name of the function.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine._ICalcEngineLanguagePackage.WriteStructuredItemSpecifier(System.Text.StringBuilder,GrapeCity.CalcEngine.StructuredItemSpecifiers_,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Writes the structured item specifier.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="itemSpecifiers">The <see cref="T:GrapeCity.CalcEngine.StructuredItemSpecifiers_"/> value.</param>
            <param name="listSeparator">The list separator character.</param>
            <param name="fullSyntax">if set to <c>true</c>, the formula should be written with full data.</param>
            <param name="multiSpecifiersBracket">if set to <c>true</c>, "[]" should be used to cover for multiple-item-specifiers.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.ICalcEngineLanguagePackage">
            <summary>
            Represents a language package for formulas.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.ICalcEngineLanguagePackage.GetFunctionParameter(GrapeCity.CalcEngine.Function,System.String)">
            <summary>
            Get the English parameter value of the specified localized parameter.
            </summary>
            <param name="function">The function that is processing</param>
            <param name="localizedParam">The localized parameter.</param>
            <returns>The English parameter value of the specified localized parameter.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.AddOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.CreateWhenAdjusting(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Creates a new expression when child expression is adjusted.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="adjustData">The adjust data.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddLeftConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddLeftConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddLeftConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddLeftConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddLeftConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddLeftConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddRightConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AddOperatorExpression.AddRightConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddRightConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddRightConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddRightConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddRightConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddRightConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddRightConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AddOperatorExpression.AddConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddConstantOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddErrorOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddErrorOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddErrorOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddErrorOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddErrorOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddErrorOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.AddErrorOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AddOperatorExpression.ReturnedType">
            <summary>
            Gets the expected data type of the returned result via <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/>.
            </summary>
            <value>The type of the returned.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.ExpressionTypes,GrapeCity.CalcEngine.ExpressionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ReferenceOperatorExpression" /> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> indicates the left argument.</param>
            <param name="rightExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> indicates the right argument.</param>
            <param name="exprType">An <see cref="T:GrapeCity.CalcEngine.ExpressionTypes"/> value indicatse the type of this expression.</param>
            <param name="flags">An <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/> value indicates the state of this expression (including its returned value type if it's possible).</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.ShouldExportAsArray(System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="contextRow">The row index of the context cell.</param>
            <param name="contextColumn">The column index of the context cell.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.LeftExpression">
            <summary>
            Gets or sets the left expression.
            </summary>
            <value>The left expression.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.RightExpression">
            <summary>
            Gets or sets the right expression.
            </summary>
            <value>The right expression.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.BinaryOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.ReplaceExpressions(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces all expressions of this expression.
            </summary>
            <param name="leftExpr">The first expression to replace.</param>
            <param name="rightExpr">The second expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression.</param>
            <returns>The expression at the specified location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.CreateWhenAdjusting(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Creates a new expression when child expression is adjusted.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="adjustData">The adjust data.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="source">The reference source where the expression is evaluted.</param>
            <param name="index">An integer represent the start inserted column index.</param>
            <param name="count">An integer represent how many columns are inserted.</param>
            <param name="contextColumn">An integer represent the column index of cell which contains the expression.</param>
            <param name="contextRefSource">The context reference source  where the cell belong.</param>
            <param name="referenceSource">The reference range  where the cell refer to.</param>
            <param name="parsingContext">the formula parser.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.OnRemovedDefinedName(GrapeCity.CalcEngine.IDefinedName,GrapeCity.CalcEngine.IDefinedName,GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Update defined name expresion in this expression after a defined name was removed.
            </summary>
            <param name="removedDefinedName">A <see cref="!:DefinedName" /> object indicates the removed defined name.</param>
            <param name="replacedDefinedName">A <see cref="!:DefinedName" /> object indicates a defined name which has same name with removed defined name.</param>
            <param name="engine">The parser.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.EvaluateAsSingleCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated results of the argument expressions in value array mode.
            It means if one argument is a ValuesArray or reference, the ValuesArray will be returned instead of single value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="resultAndOperand1">The evaluated result of the left expression. It also store the evaluated result of this operator.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.BinaryOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.BinaryOperatorExpression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ConcatOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.ConcatOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.CreateWhenAdjusting(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Creates a new expression when child expression is adjusted.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="adjustData">The adjust data.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatLeftConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatLeftConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatLeftConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatLeftConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatLeftConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatLeftConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatLeftConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatLeftConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatRightConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatRightConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatRightConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatRightConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatRightConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatRightConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatRightConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatRightConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatConstantOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ConcatConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ConcatOperatorExpression.ReturnedType">
            <summary>
            Gets the expected data type of the returned result via <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/>.
            </summary>
            <value>The type of the returned.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.DivideOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.CreateWhenAdjusting(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Creates a new expression when child expression is adjusted.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="adjustData">The adjust data.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.Create(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates the specified parser.
            </summary>
            <param name="parser">The parser.</param>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <returns>A <see cref="!:DivideOperatorExpression."/> value represents </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideLeftConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.DivideOperatorExpression.DivideLeftConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideLeftConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideLeftConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideLeftConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideLeftConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideLeftConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideLeftConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideRightConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.DivideOperatorExpression.DivideRightConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideRightConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideRightConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideRightConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideRightConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideRightConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideRightConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.DivideOperatorExpression.DivideConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideConstantOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideErrorOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.CalcError)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.DivideOperatorExpression.DivideErrorOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideErrorOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideErrorOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideErrorOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideErrorOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideErrorOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideErrorOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.DivideErrorOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DivideOperatorExpression.ReturnedType">
            <summary>
            Gets the expected data type of the returned result via <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/>.
            </summary>
            <value>The type of the returned.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.ExponentOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.CreateWhenAdjusting(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Creates a new expression when child expression is adjusted.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="adjustData">The adjust data.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Create(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates the specified parser.
            </summary>
            <param name="parser">The parser.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <returns>A <see cref="!:ExponentOperatorExpression."/> value represents </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentErrorOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.CalcError)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentErrorOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentErrorOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentErrorOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentErrorOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentErrorOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentErrorOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentErrorOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentConstantOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent2OperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent2OperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent2OperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent2OperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent2OperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent2OperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent2OperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent2OperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent3OperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent3OperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent3OperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent3OperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent3OperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent3OperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent3OperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent3OperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent0_5OperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent0_5OperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent0_5OperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent0_5OperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent0_5OperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent0_5OperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent0_5OperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.Exponent0_5OperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentPowerConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentPowerConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="power">The power.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentPowerConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentPowerConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentPowerConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentPowerConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentPowerConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentPowerConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentValueConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentValueConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentValueConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentValueConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentValueConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentValueConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentValueConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ExponentValueConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ExponentOperatorExpression.ReturnedType">
            <summary>
            Gets the expected data type of the returned result via <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/>.
            </summary>
            <value>The type of the returned.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (shallow clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the shallow cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Value" /> object which indicate the evaluated result of the argument expression.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">The evaluated result of this unary operator.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.UnaryOperatorExpression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.IsImplicitIntersectionOperatorAdded">
            <summary>
            Determine implicit intersection operator expression for back-ward compatibility is added.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.AddImplicitIntersectionOperatorIfNeeded(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Converts the expression to implicit intersection operator expression for back-ward compatibility if needed.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.AddImplicitIntersectionOperator">
            <summary>
            Converts the expression to implicit intersection operator expression for back-ward compatibility if needed.
            </summary>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.RemoveImplicitIntersectionOperatorIfNoNeeded(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Converts the implicit intersection operator expression to expression for back-ward compatibility if no needed.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ImplicitIntersectionOperatorExpression.ShouldExportAsArray(System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="contextRow">The row index of the context cell.</param>
            <param name="contextColumn">The column index of the context cell.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.IntersectOperatorExpression">
            <summary>
            Represent intersect operator expression.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.ReferenceOperatorExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.IntersectOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.IntersectOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.Create(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates the specified parser.
            </summary>
            <param name="parser">The parser.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.IntersectOperatorExpression"/> instance which is created from the two expressions.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.GetIntersectedList(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.IReferenceSource@)">
            <summary>
            Gets the intersected reference list between two list of references.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="result">A <see cref="T:GrapeCity.CalcEngine.Value"/> object contains the first reference list.</param>
            <param name="result2">A <see cref="T:GrapeCity.CalcEngine.Value"/> object contains the second reference list.</param>
            <param name="source">The same <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> of two reference lists.</param>
            <returns>The intersected reference list between two list of references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectErrorOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.CalcError)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.IntersectErrorOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectErrorOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectErrorOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectErrorOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectErrorOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectErrorOperatorExpression.GetReferenceCount">
            <summary>
            Gets the total count of range references used by current <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <returns>An integer value indicates that total count of range references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectErrorOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectErrorOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.IntersectConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="rangeReference">The range reference.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IntersectConstantOperatorExpression.GetReferenceCount">
            <summary>
            Gets the total count of range references used by current <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <returns>An integer value indicates that total count of range references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.LogicalOperatorExpression`1"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.LogicalOperatorExpression`1"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.LogicalOperatorExpression`1.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.Create(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates the specified parser.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="rightExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.LogicalOperatorExpression`1"/> value represents </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.CreateWhenAdjusting(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Creates a new expression when child expression is adjusted.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="adjustData">The adjust data.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalErrorOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.CalcError)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalErrorOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalErrorOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalErrorOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalErrorOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalErrorOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalErrorOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalConstantOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftDoubleConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftDoubleConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftDoubleConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftDoubleConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftDoubleConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftDoubleConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftDoubleConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftDoubleConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightDoubleConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightDoubleConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightDoubleConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightDoubleConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightDoubleConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightDoubleConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightDoubleConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightDoubleConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftBooleanConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftBooleanConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftBooleanConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftBooleanConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftBooleanConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftBooleanConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftBooleanConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftBooleanConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightBooleanConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightBooleanConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightBooleanConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightBooleanConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightBooleanConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightBooleanConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightBooleanConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightBooleanConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftStringConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftStringConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftStringConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftStringConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftStringConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftStringConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftStringConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalLeftStringConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightStringConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightStringConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightStringConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightStringConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightStringConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightStringConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightStringConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.LogicalRightStringConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.LogicalOperatorExpression`1.ReturnedType">
            <summary>
            Gets the expected data type of the returned result via <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/>.
            </summary>
            <value>The type of the returned.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.MissingOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.MissingOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression" /> indicates the left argument.</param>
            <param name="rightExpr">An <see cref="T:GrapeCity.CalcEngine.Expression" /> indicates the right argument.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.MissingOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.MissingOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MissingOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MissingOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MissingOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MissingOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MissingOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.MultiplyOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.Create(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates the specified parser.
            </summary>
            <param name="parser">The parser.</param>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <returns>A <see cref="!:MultiplyOperatorExpression."/> value represents </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.CreateWhenAdjusting(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Creates a new expression when child expression is adjusted.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="adjustData">The adjust data.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyLeftConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyLeftConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyLeftConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyLeftConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyLeftConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyLeftConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyLeftConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyLeftConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyRightConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyRightConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyRightConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyRightConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyRightConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyRightConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyRightConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyRightConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyConstantOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyErrorOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.CalcError)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyErrorOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyErrorOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyErrorOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyErrorOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyErrorOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyErrorOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyErrorOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.MultiplyErrorOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.MultiplyOperatorExpression.ReturnedType">
            <summary>
            Gets the expected data type of the returned result via <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/>.
            </summary>
            <value>The type of the returned.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.NegateOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.Create(GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates the specified parser.
            </summary>
            <param name="parser">The parser.</param>
            <param name="expr">The expr.</param>
            <returns>A <see cref="!:NegateOperatorExpression."/> value represents </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.UnaryOperatorExpression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.NegateConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.NegateOperatorExpression.NegateConstantOperatorExpression"/> class.
            </summary>
            <param name="expr">The expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.NegateConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.NegateConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.NegateConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.NegateConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.NegateConstantOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.NegateOperatorExpression.NegateConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.PercentageOperatorExpression"/> class.
            </summary>
            <param name="expr">The expr.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.PercentageOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.Create(GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates the specified parser.
            </summary>
            <param name="parser">The parser.</param>
            <param name="expr">The expr.</param>
            <returns>A <see cref="!:PercentageOperatorExpression."/> value represents </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.UnaryOperatorExpression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.PercentageConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.PercentageOperatorExpression.PercentageConstantOperatorExpression"/> class.
            </summary>
            <param name="expr">The expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.PercentageConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the core.
            </summary>
            <param name="context">The context.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.PercentageConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.PercentageConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.PercentageConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.PercentageConstantOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.PercentageConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PercentageOperatorExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.PlusOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.Create(GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates the specified parser.
            </summary>
            <param name="parser">The parser.</param>
            <param name="expr">The expr.</param>
            <returns>A <see cref="!:PlusOperatorExpression."/> value represents </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.UnaryOperatorExpression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.PlusConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.PlusOperatorExpression.PlusConstantOperatorExpression"/> class.
            </summary>
            <param name="expr">The expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.PlusConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.PlusConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.PlusConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.PlusConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.PlusConstantOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PlusOperatorExpression.PlusConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.RangeOperatorExpression">
            <summary>
            Represents a <see cref="T:GrapeCity.CalcEngine.RangeOperatorExpression"/> operator expression (:).
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.ReferenceOperatorExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeOperatorExpression" /> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.RangeOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeOperatorExpression.GetReferenceCount">
            <summary>
            Gets the total count of range references used by current <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <returns>An integer value indicates that total count of range references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeOperatorExpression.Create(GrapeCity.CalcEngine.FormulaEngine,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Boolean)">
            <summary>
            Creates the specified <see cref="T:GrapeCity.CalcEngine.Expression"/> expression.
            </summary>
            <param name="engine">The formula parser.</param>
            <param name="parsingContext">A <see cref="!:ParsingContext"/> object indicates the formula parser.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="highlightSyntax"><c>true</c> if the character position need to be kept for highlighting syntax.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.Expression"/> expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.RangeErrorOperatorExpression">
            <summary>
            Represents a <see cref="T:GrapeCity.CalcEngine.RangeOperatorExpression"/> operator expression which must return <see cref="T:GrapeCity.CalcEngine.CalcError"/> result.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.RangeOperatorExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeErrorOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.CalcError)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeErrorOperatorExpression" /> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeErrorOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeErrorOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeErrorOperatorExpression.GetReferenceCount">
            <summary>
            Gets the total count of range references used by current <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <returns>An integer value indicates that total count of range references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeErrorOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeErrorOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeErrorOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeErrorOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeErrorOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeErrorOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.ExpressionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ReferenceOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="type">The type of the expression.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.ExpressionTypes,GrapeCity.CalcEngine.ExpressionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ReferenceOperatorExpression" /> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="type">The type of the expression.</param>
            <param name="flags">An <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/> value indicates the state of this expression (including its returned value type if it's possible).</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceOperatorExpression.IsImplicitIntersectionOperatorAdded">
            <summary>
            Determine implicit intersection operator expression for back-ward compatibility is added.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceOperatorExpression.AddImplicitIntersectionOperatorIfNeeded(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Converts the expression to implicit intersection operator expression for back-ward compatibility if needed.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.Reference3DOperatorExpression">
            <summary>
            Represents a <see cref="T:GrapeCity.CalcEngine.Reference3DOperatorExpression"/> operator expression (:).
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.ReferenceOperatorExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.Reference3DOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.Create(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates the specified <see cref="T:GrapeCity.CalcEngine.Expression"/> expression.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.Reference3DOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Reference3DOperatorExpression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.Unparse(GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Reference3DOperatorExpression" /> to the formula text.
            </summary>
            <param name="firstSource">The first <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object.</param>
            <param name="secondSource">The second  <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.SourceOperatorExpression">
            <summary>
            Represents a <see cref="T:GrapeCity.CalcEngine.SourceOperatorExpression"/> operator expression (!).
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.ReferenceOperatorExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.SourceOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.SourceOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.GetReferenceCount">
            <summary>
            Gets the total count of range references used by current <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <returns>An integer value indicates that total count of range references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.Create(GrapeCity.CalcEngine.FormulaEngine,GrapeCity.CalcEngine.Expression@,GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates the specified <see cref="T:GrapeCity.CalcEngine.SourceOperatorExpression"/> expression.
            </summary>
            <param name="engine">The formula parser.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <returns>
            A <see cref="T:GrapeCity.CalcEngine.RangeOperatorExpression"/> expression.
            <c>null</c> if we should keep the current parsing context but replace the left and right expression in output queue.
            </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceOperatorExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceErrorOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceErrorOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceErrorOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceErrorOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceErrorOperatorExpression.GetReferenceCount">
            <summary>
            Gets the total count of range references used by current <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <returns>An integer value indicates that total count of range references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceErrorOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceErrorOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.SourceConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="source">The source.</param>
            <param name="rangeRef">The range reference.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.GetReferenceCount">
            <summary>
            Gets the total count of range references used by current <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <returns>An integer value indicates that total count of range references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SourceConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AbsoluteSourceConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.AbsoluteSourceConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="source">The source.</param>
            <param name="rangeRef">The range reference.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AbsoluteSourceConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AbsoluteSourceConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AbsoluteSourceConstantOperatorExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.AbsoluteSourceConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.AbsoluteSourceConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DefinedNameScopedExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.DefinedNameScopedExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="rightExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DefinedNameScopedExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DefinedNameScopedExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.DefinedNameScopedExpression.ContainsDefinedName(GrapeCity.CalcEngine.IDefinedName)">
            <summary>
            Determines whether this <see cref="T:GrapeCity.CalcEngine.Expression" /> contains the specified <see cref="T:GrapeCity.CalcEngine.IDefinedName" />.
            </summary>
            <param name="definedName">An <see cref="T:GrapeCity.CalcEngine.IDefinedName" /> object indicates the <see cref="T:GrapeCity.CalcEngine.IDefinedName" /> to check.</param>
            <returns><c>true</c> if this <see cref="T:GrapeCity.CalcEngine.Expression" /> contains the specified <see cref="T:GrapeCity.CalcEngine.IDefinedName" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DefinedNameScopedExpression.RefreshDefinedName(GrapeCity.CalcEngine.IDefinedName,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.FormulaEngine,System.Boolean,System.Boolean@,System.Boolean)">
            <summary>
            Update defined name expresion in this expression by a new created defined name.
            </summary>
            <param name="definedName">A <see cref="T:GrapeCity.CalcEngine.IDefinedName" /> object indicates the new created defined name.</param>
            <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> object indicates the reference source.</param>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <param name="allDefinedName">if set to <c>false</c>, only undefined name will be adjusted.</param>
            <param name="movedToUntouch">if set to <c>true</c>, the dependencies should be rebuilt..</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DefinedNameScopedExpression.OnRemovedDefinedName(GrapeCity.CalcEngine.IDefinedName,GrapeCity.CalcEngine.IDefinedName,GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Update defined name expresion in this expression after a defined name was removed.
            </summary>
            <param name="removedDefinedName">A <see cref="!:DefinedName" /> object indicates the removed defined name.</param>
            <param name="replacedDefinedName">A <see cref="!:DefinedName" /> object indicates a defined name which has same name with removed defined name.</param>
            <param name="parsingContext">A <see cref="!:ParsingContext" /> object indicates the formula parser.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DefinedNameScopedExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.DefinedNameScopedExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression">
            <summary>
            Represents a <see cref="T:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression"/> operator expression which return the specified <see cref="T:GrapeCity.CalcEngine.RangeReference"/> result.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.RangeOperatorExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReferenceExpression" /> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="rangeRef">The range reference.</param>
            <param name="startSource">The start source.</param>
            <param name="endSource">The end source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Reference3DRangeConstantOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SpilledAnchorOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SpilledAnchorOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (shallow clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the shallow cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SpilledAnchorOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SpilledAnchorOperatorExpression.ShouldExportAsArray(System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="contextRow">The row index of the context cell.</param>
            <param name="contextColumn">The column index of the context cell.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SpilledAnchorOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.UnaryOperatorExpression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SpilledAnchorOperatorExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.SubtractOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.CreateWhenAdjusting(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Creates a new expression when child expression is adjusted.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="adjustData">The adjust data.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.Create(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates the specified parser.
            </summary>
            <param name="parser">The parser.</param>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <returns>A <see cref="!:SubtractOperatorExpression."/> value represents </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractLeftConstantOperatorExpression">
            <summary>
            Class SubtractLeftConstantOperatorExpression. This class cannot be inherited.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.SubtractOperatorExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractLeftConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractLeftConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractLeftConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractLeftConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractLeftConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractLeftConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractLeftConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractLeftConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractRightConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractRightConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractRightConstantOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractRightConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractRightConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractRightConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractRightConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractRightConstantOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractConstantOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractConstantOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractErrorOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractErrorOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractErrorOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractErrorOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractErrorOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractErrorOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.SubtractErrorOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SubtractOperatorExpression.ReturnedType">
            <summary>
            Gets the expected data type of the returned result via <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/>.
            </summary>
            <value>The type of the returned.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.ShouldExportAsArray(System.Int32,System.Int32)">
            <summary>
            Indicates that even if the function doesn't return array, it should be export as array to prevent adding @ automatically
            </summary>
            <param name="contextRow">The row index of the context cell.</param>
            <param name="contextColumn">The column index of the context cell.</param>
            <returns><c>true</c> if the expression should be exported as array, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.ShouldReevaluateInSingleCell(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Shoulds the reevaluate in single cell.
            </summary>
            <param name="context">The context.</param>
            <returns><c>true</c> if expression should be reevaluated in each row, column , <c>false</c> otherwise.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.UnaryOperatorExpression.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Value"/> object which indicate the evaluated result of the argument expression.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="operand">The evaluated result of the argument expression.</param>
            <param name="result">The evaluated result of this unary operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.EvaluateAsSingleCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Value" /> object which indicate the evaluated result of the argument expression in value array mode.
            It means if the argument is a ValuesArray or reference, the ValuesArray will be returned instead of single value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context.</param>
            <param name="result">The evaluated result of the argument. It also store the evaluated result of this operator.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression.</param>
            <returns>The expression at the specified location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.UnaryOperatorExpression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" /> is equal to another <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" /> is equal to the other <see cref="P:GrapeCity.CalcEngine.UnaryOperatorExpression.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="source">The reference source where the expression is evaluted.</param>
            <param name="index">An integer represent the start inserted column index.</param>
            <param name="count">An integer represent how many columns are inserted.</param>
            <param name="contextColumn">An integer represent the column index of cell which contains the expression.</param>
            <param name="contextRefSource">The context reference source  where the cell belong.</param>
            <param name="referenceSource">The reference range  where the cell refer to.</param>
            <param name="parsingContext">the formula parser.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnaryOperatorExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.UnionOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.UnionOperatorExpression.Symbol">
            <summary>
            Gets the symbol of the operator.
            </summary>
            <value>A string value indicates the symbol of the operator.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.Create(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates expression from specified expresions.
            </summary>
            <param name="parser">The parser.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <returns>A <see cref="!:UnionOperatorExpression."/> value represents </returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.EvaluateCoreInternal(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.EvaluateAsMultiCells(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.Value,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Evaluates two <see cref="T:GrapeCity.CalcEngine.Value" /> objects which indicate the evaluated result of the left expression and the right expression.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="operand1">The evaluated result of the left expression.</param>
            <param name="operand2">The evaluated result of the right expression.</param>
            <param name="result">The evaluated result of this binary operator.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionErrorOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionErrorOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionErrorOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionErrorOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionErrorOperatorExpression.GetReferenceCount">
            <summary>
            Gets the total count of range references used by current <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <returns>An integer value indicates that total count of range references.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionErrorOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionErrorOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.#ctor(GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.RangeReference[],GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression"/> class.
            </summary>
            <param name="leftExpr">The left expr.</param>
            <param name="rightExpr">The right expr.</param>
            <param name="rangeReferences">The range references.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UnionOperatorExpression.UnionConstantOperatorExpression.GetReferenceCount">
            <summary>
            Gets the total count of range references used by current <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <returns>An integer value indicates that total count of range references.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.ParenthesesExpression">
            <summary>
            Represents an expression for parentheses symbol. External library can use this class to create wrapper for expressions.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.ParenthesesExpression.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression.</param>
            <returns>The expression at the specified location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="parsingContext">the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine" /> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.IsAppliedImplicitIntersection(System.Int32)">
            <summary>
            Determines whether the implicit intersection operator can be removed (for export) because it'll be added automatically (when import)
            </summary>
            <param name="expressionIndex">An integer value indicates the index of the expression.</param>
            <returns><c>true</c> if the implicit intersection operator can be removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ParenthesesExpression.ReturnedType">
            <summary>
            Gets the expected data type of the returned result via <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/>.
            </summary>
            <value>The type of the returned.</value>
        </member>
        <member name="T:GrapeCity.CalcEngine.FormulaEngine">
            <summary>
            Represents the formula engine. 
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine._requiredQuoteSingle">
            <summary>
            Indicate that the reference source should be add quote single character when un-parse.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.IndexesWrappingEnabled">
            <summary>
            Indicate that the range will be wrapped in case out side of the range of reference source.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.ContextRow">
            <summary>
            An integer represent the row index of cell which contains the expression.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.ContextColumn">
            <summary>
            An integer represent the column index of cell which contains the expression.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.IsColumnFooterExported">
            <summary>
            Indicates whether the column header/footer and row header are exported
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.IsColumnHeaderExported">
            <summary>
            Indicates whether the column header/footer and row header are exported
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.IsRowHeaderExported">
            <summary>
            Indicates whether the column header/footer and row header are exported
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine._contextTranslatedRowCount">
            <summary>
            Indicates the translated row/column count of current reference source when we unparses the expression to formula.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine._contextTranslatedColumnCount">
            <summary>
            Indicates the translated row/column count of current reference source when we unparses the expression to formula.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine._cellExportedWorksheet">
            <summary>
            Indicates the reference source that contains cell. Used by translated cells when export with column/row headers
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.CellTranslatedRowCount">
            <summary>
            Indicates the translated row/column count of the reference source (that contains cell formula) when we unparse the expression to formula.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.CellTranslatedColumnCount">
            <summary>
            Indicates the translated row/column count of the reference source (that contains cell formula) when we unparse the expression to formula.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.TranslatedRowCount">
            <summary>
            Indicates the translated row/column count when unparse references.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.TranslatedColumnCount">
            <summary>
            Indicates the translated row/column count when unparse references.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.AbsTranslatedRowCount">
            <summary>
            Indicates the translated row/column count when unparse references. It's applied for absolute row/column only.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.AbsTranslatedColumnCount">
            <summary>
            Indicates the translated row/column count when unparse references. It's applied for absolute row/column only.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine._isA1Reference">
            <summary>
            <c>true</c> indicates that the formula is in A1 format. Otherwise, it's in R1C1 format.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine._isExportProcessing">
            <summary>
            <c>true</c> indicates that the context is in exporting process.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.FormulaEngine.IsImportProcessing">
            <summary>
            <c>true</c> indicates that the context is in importing process.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.IsUnsupportedWorkbookDefinedName">
            <summary>
            Indicates that the workbook defined name (book1!name) is not supported. It's for Excel 2003 export and should be removed when we have time
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.AllowReferenceReorder">
            <summary>
            Indicates that the row and column may be re-ordered.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine.AutoDetectStructuredReferenceObject">
            <summary>
            Indicates that the structured reference object can be detected automatically from the context cell.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine._isUnboundR1C1RangeAsRef">
            <summary>
            Indicates that all unbound range will be parsed as #REF! when we parse in R1C1 reference style.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.FormulaEngine._isProcessingDefinedName">
            <summary>
            Indicates that parsing and unparse are specified for defined names
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.Clone(GrapeCity.CalcEngine.Expression)">
            <summary>
            Clones the specified expression.
            </summary>
            <param name="expression">The expression to clone.</param>
            <returns>The new clone expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.GetLanguagePackage">
            <summary>
            Gets the active language package.
            </summary>
            <value>The language package is currently used.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.SetLanguagePackage(GrapeCity.CalcEngine.ICalcEngineLanguagePackage)">
            <summary>
            Sets the language package.
            </summary>
            <param name="languagePackage">The new language package.</param>
            <returns>The old language package.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.SetDefaultLanguagePackage(GrapeCity.CalcEngine._ICalcEngineLanguagePackage)">
            <summary>
            Sets the default language package.
            </summary>
            <param name="languagePackage">The language package.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.FormulaEngine.IsExportProcessing">
            <summary>
            Gets or sets a value indicating whether the context is in exporting process.
            </summary>
            <value><c>true</c> if the context is in exporting process; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.StartExportProcessing(GrapeCity.CalcEngine.ICalcWorksheet)">
            <summary>
            Starts the export processing that requires normalized syntax formula.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.StopExportProcessing(System.Boolean)">
            <summary>
            Stops the export processing.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.FormulaEngine.ContextTranslatedRowCount">
            <summary>
            Gets or sets the translated row count of current reference source when we unparse the expression to formula.
            </summary>
            <value>An integer value represents the context translated row count.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.FormulaEngine.ContextTranslatedColumnCount">
            <summary>
            Gets or sets the translated column count of current reference source when we unparse the expression to formula.
            </summary>
            <value>An integer value represents the context translated column count.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.FormulaEngine.Culture">
            <summary>
            Gets the current <see cref="T:System.Globalization.CultureInfo"/> object for parsing and unparsing process.
            </summary>
            <value>A <see cref="T:System.Globalization.CultureInfo"/> object represent the current culture.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.FormulaEngine.IsA1Reference">
            <summary>
            Gets a value indicating whether the current parsing mode is A1 reference style.
            </summary>
            <value><c>true</c> if the current parsing mode is A1 reference style; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.FormulaEngine.IsProcessingDefinedName">
            <summary>
            Gets a value indicating whether the formula parser is processing defined name.
            </summary>
            <value><c>true</c> if the formula parser is processing defined name; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.StartProcessingDefinedName">
            <summary>
            Starts parsing or unparsing that are specified for defined names.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.StopProcessingDefinedName">
            <summary>
            Stops parsing or unparsing that are specified for defined names.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.StrictR1C1Boundary">
            <summary>
            All unbound ranges will be parsed as #REF! when we parse in R1C1 reference style.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnstrictR1C1Boundary">
            <summary>
            Stops verifying whether the R1C1 reference is unbound or not.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.EnterContext(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
            <summary>
            Enters the specified parsing context.
            </summary>
            <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object which is using formula.</param>
            <param name="contextRow">An integer value indicates the context row index.</param>
            <param name="contextColumn">An integer value indicates the context column index.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.EnterContext(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enters the specified parsing context.
            </summary>
            <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object which is using formula.</param>
            <param name="contextRow">An integer value indicates the context row index.</param>
            <param name="contextColumn">An integer value indicates the context column index.</param>
            <param name="isA1Reference">if set to <c>true</c> the formula is using A1 reference format. Otherwise, it uses R1C1 reference format.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.ExitContext">
            <summary>
            Exits the latest parsing context and restore the previous parsing context.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.Parse(System.String,GrapeCity.CalcEngine.Expression@,System.Boolean)">
            <summary>
            Parses the specified formula text to expression.
            </summary>
            <param name="formulaText">A string indicates the formula text.</param>
            <param name="context">The context which provide addition information for parsing.</param>
            <param name="parsedExpression">The parsed expression.</param>
            <returns><c>true</c> if the formula can be parsed to the <seealso cref="T:GrapeCity.CalcEngine.Expression" /> instance, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.ParseWithEqualSymbol(System.String,GrapeCity.CalcEngine.Expression@)">
            <summary>
            Parses the specified formula text to expression.
            </summary>
            <param name="formulaText">A string indicates the formula text.</param>
            <param name="context">The context which provide addition information for parsing.</param>
            <param name="parsedExpression">The parsed expression.</param>
            <returns><c>true</c> if the formula can be parsed to the <seealso cref="T:GrapeCity.CalcEngine.Expression" /> instance, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.Highlight(System.String,System.Boolean)">
            <summary>
            Parses the specified formula text to expression.
            </summary>
            <param name="formulaText">A string indicates the formula text.</param>
            <param name="detectFormulaSymbol">Determines whether the "=" character should be detected and skipped.</param>
            <returns>The <see cref="T:GrapeCity.CalcEngine.SyntaxHighlight"/> value represents the highlight data.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.Parse(System.Char*,System.Int32,GrapeCity.CalcEngine.Expression@,System.Boolean,System.Boolean)">
            <summary>
            Parses the specified formula text to expression.
            </summary>
            <param name="formula">A character array indicates the formula text.</param>
            <param name="formulaLength">An integer value indicates the formula length.</param>
            <param name="parsedExpression">The parsed expression.</param>
            <param name="highlightSyntax"><c>true</c> if the character position need to be kept for highlighting syntax.</param>
            <returns><c>true</c> if the formula can be parsed to the <seealso cref="T:GrapeCity.CalcEngine.Expression" /> instance, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.IsUnBoundRangeReference(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Determines whether the specified <see cref="T:GrapeCity.CalcEngine.RangeReference"/> is an unbound range reference (doesn't belong to the sheet entirely).
            </summary>
            <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value indicates the range reference.</param>
            <returns><c>true</c> if the specified <see cref="T:GrapeCity.CalcEngine.RangeReference"/> is an unbound range reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.GetUndefinedNameExpression(GrapeCity.CalcEngine.CellReference@,System.String)">
            <summary>
            Gets the undefined name expression from a <see cref="T:GrapeCity.CalcEngine.CellReference"/> value.
            </summary>
            <param name="cellRef">The cell reference.</param>
            <param name="name">The name of undefined name expression.</param>
            <returns>The undefined name expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.PushOperatorExpression(GrapeCity.CalcEngine.Token@,GrapeCity.CalcEngine.Expression[],System.Int32@,GrapeCity.CalcEngine.Token[],System.Int32@,GrapeCity.CalcEngine.FormulaEngine.CellReferenceCover@,System.Boolean@,System.Collections.Generic.Dictionary{System.String,GrapeCity.CalcEngine.FormulaEngine.LetNameArgument}@,System.Boolean)">
            <summary>
            Pushes the operator expression.
            </summary>
            <returns><c>true</c> if we can combine 2 operators with the operator, <c>false</c> if the formula syntax is invalid.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.Unparse(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Unparses the specified expression to formula text.
            </summary>
            <param name="source">The <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object which is using formula.</param>
            <param name="contextRow">An integer value indicates the context row index.</param>
            <param name="contextColumn">An integer value indicates the context column index.</param>
            <param name="expr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the expression.</param>
            <returns>The formula text unparsed from the input expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.Unparse(GrapeCity.CalcEngine.Expression)">
            <summary>
            Unparses the specified expression to formula text.
            </summary>
            <param name="expr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the expression.</param>
            <returns>The formula text unparsed from the input expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.Unparse(GrapeCity.CalcEngine.Expression,System.Char[]@)">
            <summary>
            Unparses the specified expression to formula text.
            </summary>
            <param name="expr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the expression.</param>
            <param name="data">The destination character array.</param>
            <returns>The length of formula text unparsed from the input expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.CreateActiveReferenceSource(GrapeCity.CalcEngine.Expression)">
            <summary>
            Creates an expression which represents the active reference source.
            </summary>
            <returns>A <see cref="T:GrapeCity.CalcEngine.ReferenceSourceExpression"/> object represents the active reference source.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.AddResolver(GrapeCity.CalcEngine.ISymbolResolver)">
            <summary>
            Adds a custom symbol resolver which resolves un-parsed symbols like cell range reference, external reference...
            </summary>
            <param name="resolver">The custom symbol resolver to add.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.RemoveResolver(GrapeCity.CalcEngine.ISymbolResolver)">
            <summary>
            Removes a custom symbol resolver which resolves un-parsed symbols like cell range reference, external reference...
            </summary>
            <param name="resolver">The custom symbol resolver to remove.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.AddResolver(GrapeCity.CalcEngine.IFunctionResolver)">
            <summary>
            Adds the custom function resolver which resolve custom function(s).
            </summary>
            <param name="resolver">The custom function resolver to add.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.RemoveResolver(GrapeCity.CalcEngine.IFunctionResolver)">
            <summary>
            Removes the custom function resolver which resolve custom function(s).
            </summary>
            <param name="resolver">The custom function resolver to remove.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.AddResolver(GrapeCity.CalcEngine.IOperatorResolver)">
            <summary>
            Adds the custom operator resolver which allow overriding standard operators by custom operators.
            </summary>
            <param name="resolver">The custom operator resolver to add.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.RemoveResolver(GrapeCity.CalcEngine.IOperatorResolver)">
            <summary>
            Removes the custom operator resolver which allow overriding standard operators by custom operators.
            </summary>
            <param name="resolver">The custom operator resolver to remove.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.Resolve(System.Char*,System.Int32,System.Int32)">
            <summary>
            Resolves an expression from the sepecified symbol.
            </summary>
            <param name="formula">A character array indicates the formula text.</param>
            <param name="index">An integer value indicates the start index of the symbol.</param>
            <param name="length">An integer value indicates the length of the symbol.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the parsed expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.Resolve(System.String)">
            <summary>
            Resolves an expression from the sepecified symbol.
            </summary>
            <param name="symbol">A string value indicates the symbol name.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the parsed expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.ResolveStructuredObject(GrapeCity.CalcEngine.IStructuredObject)">
            <summary>
            Resolves the structured object from the specified object name.
            </summary>
            <param name="structuredObject">The <paramref name="structuredObject"/> object to find.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the parsed expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.ResolveStructuredObject(System.Char*,System.Int32,System.Int32)">
            <summary>
            Resolves the structured object from the specified object name.
            </summary>
            <param name="formula">A character array indicates the formula text.</param>
            <param name="index">An integer value indicates the start index of the object name.</param>
            <param name="length">An integer value indicates the length of the object name.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the parsed expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.ResolveStructuredObject(System.String)">
            <summary>
            Resolves the structured object from the specified object name.
            </summary>
            <param name="name">The structured object's name.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the structured object expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.Resolve(GrapeCity.CalcEngine.OperatorType,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Resolves the parsing operator.
            </summary>
            <param name="opType">An <see cref="T:GrapeCity.CalcEngine.OperatorType"/> value indicates the operator.</param>
            <param name="leftArg">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument expression.</param>
            <param name="rightArg">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument expression.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.TryParseR1C1ReferenceInternal(System.String,GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Converts the string representation of a range reference in R1C1 format its <see cref="T:GrapeCity.CalcEngine.RangeReference"/> equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="ref">A string containing a range reference to convert.</param>
            <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value represents the parsed range reference.</param>
            <returns><c>true</c> if s was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.TryParseR1C1Reference(System.String,GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Converts the string representation of a range reference in R1C1 format its <see cref="T:GrapeCity.CalcEngine.RangeReference"/> equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="ref">A string containing a range reference to convert.</param>
            <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value represents the parsed range reference.</param>
            <returns><c>true</c> if s was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.TryParseR1C1Reference(System.Char*,System.Int32,GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Converts the string representation of a range reference in R1C1 format its <see cref="T:GrapeCity.CalcEngine.RangeReference"/> equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="characters">A string containing a range reference to convert.</param>
            <param name="length">An integer value indicates the string length.</param>
            <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value represents the parsed range reference.</param>
            <returns><c>true</c> if s was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.TryParseR1C1Number(System.Char*@,System.Char*,System.Int32@,System.Boolean@)">
            <summary>
            Tries the parse r1 c1 number.
            </summary>
            <param name="characters">The characters.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="n">The n.</param>
            <param name="relative">if set to <c>true</c> [relative].</param>
            <returns><c>true</c> if it can parse R1C1 number, <c>false</c> if it has error in that R1C1 reference(number is smaller than 0 and reference is absolute).</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Unparses the range reference in A1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the range reference.</param>
            <returns>A <see cref="T:System.String"/> value represents the range reference in A1 reference style.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Unparses the range reference in A1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the range reference.</param>
            <returns>A <see cref="T:System.String"/> value represents the range reference in A1 reference style.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseReferenceSource(GrapeCity.CalcEngine.IReferenceSource,System.Text.StringBuilder)">
            <summary>
            Unparses the specified reference source
            </summary>
            <param name="source">The reference source to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> object to store the range reference in A1 refrence style.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.RangeReference,System.Text.StringBuilder,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Unparses the range reference in A1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the range reference.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> object to store the range reference in A1 refrence style.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.RangeReference@,System.Text.StringBuilder)">
            <summary>
            Unparses the range reference in A1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the range reference.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> object to store the range reference in A1 refrence style.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Unparses the range reference in R1C1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the range reference.</param>
            <returns>A <see cref="T:System.String"/> value represents the range reference in R1C1 reference style.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Unparses the range reference in R1C1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the range reference.</param>
            <returns>A <see cref="T:System.String"/> value represents the range reference in R1C1 reference style.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.RangeReference,System.Text.StringBuilder,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Unparses the range reference in R1C1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the range reference.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> object to store the range reference in R1C1 refrence style.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.RangeReference,System.Text.StringBuilder)">
            <summary>
            Unparses the range reference in R1C1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the range reference.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> object to store the range reference in R1C1 refrence style.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseError(GrapeCity.CalcEngine.CalcError)">
            <summary>
            Unparses the specified <see cref="T:GrapeCity.CalcEngine.CalcError"/> value.
            </summary>
            <param name="error">A <see cref="T:GrapeCity.CalcEngine.CalcError"/> value indicates the calculation error.</param>
            <returns>A string value represents the calculation error text.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.TryParseA1ReferenceInternal(System.String,System.Int32,System.Int32,GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Converts the string representation of a range reference in A1 format its <see cref="T:GrapeCity.CalcEngine.RangeReference"/> equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="ref">A string containing a range reference to convert.</param>
            <param name="baseRow">An integer value indicates the context row.</param>
            <param name="baseColumn">An integer value indicates the context column.</param>
            <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value represents the parsed range reference.</param>
            <returns><c>true</c> if s was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.TryParseA1Reference(System.String,System.Int32,System.Int32,GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Converts the string representation of a range reference in A1 format its <see cref="T:GrapeCity.CalcEngine.RangeReference"/> equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="ref">A string containing a range reference to convert.</param>
            <param name="baseRow">An integer value indicates the context row.</param>
            <param name="baseColumn">An integer value indicates the context column.</param>
            <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value represents the parsed range reference.</param>
            <returns><c>true</c> if s was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.TryParseA1Reference(System.Char*,System.Int32,System.Int32,System.Int32,GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Converts the string representation of a range reference in A1 format its <see cref="T:GrapeCity.CalcEngine.RangeReference"/> equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="characters">A string containing a range reference to convert.</param>
            <param name="length">An integer value indicates the string length.</param>
            <param name="baseRow">An integer value indicates the context row.</param>
            <param name="baseColumn">An integer value indicates the context column.</param>
            <param name="rangeRef">A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value represents the parsed range reference.</param>
            <returns><c>true</c> if s was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.CellReference@)">
            <summary>
            Unparses the cell reference in A1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the cell reference.</param>
            <returns>A <see cref="T:System.String"/> value represents the cell reference in A1 reference style.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.CellReference)">
            <summary>
            Unparses the cell reference in A1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the cell reference.</param>
            <returns>A <see cref="T:System.String"/> value represents the cell reference in A1 reference style.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.CellReference@)">
            <summary>
            Unparses the cell reference in R1C1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the cell reference.</param>
            <returns>A <see cref="T:System.String"/> value represents the cell reference in R1C1 reference style.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.CellReference)">
            <summary>
            Unparses the cell reference in R1C1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value indicates the cell reference.</param>
            <returns>A <see cref="T:System.String"/> value represents the cell reference in R1C1 reference style.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.CellReference,System.Text.StringBuilder,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Unparses the cell reference in A1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> object to store the cell reference in A1 refrence style.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseA1Reference(GrapeCity.CalcEngine.CellReference@,System.Text.StringBuilder)">
            <summary>
            Unparses the cell reference in A1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> object to store the cell reference in A1 refrence style.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.CellReference,System.Text.StringBuilder,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Unparses the cell reference in R1C1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> object to store the cell reference in R1C1 refrence style.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.UnparseR1C1Reference(GrapeCity.CalcEngine.CellReference@,System.Text.StringBuilder)">
            <summary>
            Unparses the cell reference in R1C1 reference style.
            </summary>
            <param name="cellReference">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> object to store the cell reference in R1C1 refrence style.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.FormulaEngine.CellReferenceCover">
            <summary>
            Represents a structure which deals with the whole row or column (1:1, A:A)
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.CellReferenceCover.#ctor(System.Char*,GrapeCity.CalcEngine.FormulaEngine,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.FormulaEngine.CellReferenceCover" /> struct.
            </summary>
            <param name="formula">The formula text.</param>
            <param name="engine">The formula engine.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.CellReferenceCover.Transform(GrapeCity.CalcEngine.Expression@,System.Collections.Generic.Dictionary{System.String,GrapeCity.CalcEngine.FormulaEngine.LetNameArgument}@,System.Boolean)">
            <summary>
            Transforms the specified <see cref="T:GrapeCity.CalcEngine.CellCoverReferenceExpression"/> expression to valid expression.
            </summary>
            <param name="expression">The expression to transform.</param>
            <param name="allowCellExprChanging">if set to <c>true</c>, the <see cref="T:GrapeCity.CalcEngine.CellCoverReferenceExpression"/> expression will be transformed to
            <see cref="T:GrapeCity.CalcEngine.CellReferenceExpression"/>. Otherwise, it'll be transformed to an undefined name expression.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.CellReferenceCover.Transform(GrapeCity.CalcEngine.Expression@,GrapeCity.CalcEngine.Expression@,System.Boolean)">
            <summary>
            Transforms two specified <see cref="T:GrapeCity.CalcEngine.CellCoverReferenceExpression"/> expressions to valid expressions.
            </summary>
            <param name="leftExpr">The first expression to transform.</param>
            <param name="rightExpr">The second expression to transform.</param>
            <param name="allowCellExprChanging">if set to <c>true</c>, the <see cref="T:GrapeCity.CalcEngine.CellCoverReferenceExpression"/> expression will be transformed to
            <see cref="T:GrapeCity.CalcEngine.CellReferenceExpression"/>. Otherwise, it'll be transformed to an undefined name expression.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.StartImporting">
            <summary>
            Mark this <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> as importing state.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.StopImporting">
            <summary>
            Un-mark this <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> from importing state.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.FormulaEngine.IsImporting">
            <summary>
            Get current importing state of this <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/>.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.FormulaEngine.IsExporting">
            <summary>
            Gets current exporting state of <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/>.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.StartExporting">
            <summary>
            Mark this <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> as exporting state.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.StopExportting">
            <summary>
            Un-mark this <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> from exporting state.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.FormulaEngine.AppendTableColumn(System.String,System.Text.StringBuilder)">
            <summary>
            Appends the column name of the structured reference.
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.IFunctionResolver">
            <summary>
            Represents an interface that resolve functions.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.IFunctionResolver.Resolve(System.String)">
            <summary>
            Resolves a function from the specified name.
            </summary>
            <param name="name">A string value indicates the function name.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.Function"/> object represents the parsed function.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.ISymbolResolver">
            <summary>
            Represents an interface that resolve symbols.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.ISymbolResolver.Resolve(GrapeCity.CalcEngine.FormulaEngine,System.Char*,System.Int32,System.Int32)">
            <summary>
            Resolves an expression from the sepecified symbol.
            </summary>
            <param name="formula">A character array indicates the formula text.</param>
            <param name="index">An integer value indicates the start index of the symbol.</param>
            <param name="length">An integer value indicates the length of the symbol.</param>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the parsed expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ISymbolResolver.Resolve(GrapeCity.CalcEngine.FormulaEngine,System.String)">
            <summary>
            Resolves an expression from the sepecified symbol.
            </summary>
            <param name="symbol">A string value indicates the symbol name.</param>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the parsed expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ISymbolResolver.GetUndefinedExpression(GrapeCity.CalcEngine.FormulaEngine,System.String)">
            <summary>
            Resolves an undefined expression from the sepecified symbol.
            </summary>
            <param name="symbol">A string value indicates the symbol.</param>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the parsed expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveReferenceSource(GrapeCity.CalcEngine.FormulaEngine,System.String,System.String,System.String)">
            <summary>
            Resolves the reference source from the specified path, book name and reference source name.
            </summary>
            <param name="path">A string value indicates the book path.</param>
            <param name="bookName">A string value indicates the book name.</param>
            <param name="refSourceName">A string value indicates the reference source.</param>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the parsed expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveReferenceSource(GrapeCity.CalcEngine.FormulaEngine,System.Int32,System.String)">
            <summary>
            Resolves the reference source from the specified book index and reference source name.
            </summary>
            <param name="bookIndex">An integer value indicates the book index.</param>
            <param name="refSourceName">A string value indicates the reference source.</param>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the parsed expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveStructuredObject(GrapeCity.CalcEngine.FormulaEngine,System.Char*,System.Int32,System.Int32)">
            <summary>
            Resolves the structured object from the specified object name.
            </summary>
            <param name="formula">A character array indicates the formula text.</param>
            <param name="index">An integer value indicates the start index of the object name.</param>
            <param name="length">An integer value indicates the length of the object name.</param>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the parsed expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ISymbolResolver.ResolveStructuredObject(GrapeCity.CalcEngine.FormulaEngine,System.Int32,System.Int32)">
            <summary>
            Resolves the structured object from the specified cell location.
            </summary>
            <param name="row">An integer value indicates the context row.</param>
            <param name="column">An integer value indicates the context column.</param>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the parsed expression.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.IOperatorResolver">
            <summary>
            Represents an interface which allows to override the behavior of operators.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.IOperatorResolver.Resolve(GrapeCity.CalcEngine.FormulaEngine,GrapeCity.CalcEngine.OperatorType,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.Expression)">
            <summary>
            Resolves the parsing operator.
            </summary>
            <param name="opType">An <see cref="T:GrapeCity.CalcEngine.OperatorType"/> value indicates the operator.</param>
            <param name="leftArg">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument expression.</param>
            <param name="rightArg">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument expression.</param>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.OperatorType">
            <summary>
            Enumerates the list of operators.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.OperatorType.Percentage">
            <summary>
            Represents the percentage operator (%).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.OperatorType.Negation">
            <summary>
            Represents the negation operator (-).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.OperatorType.Plus">
            <summary>
            Represents the plus operator (+).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.OperatorType.ReferenceSource">
            <summary>
            Represents the reference source operator (!).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.OperatorType.DoesNotEquals" -->
        <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.OperatorType.LessThanOrEquals" -->
        <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.OperatorType.LessThan" -->
        <member name="F:GrapeCity.CalcEngine.OperatorType.GreaterThanOrEquals">
            <summary>
            Represents the greater-than-or-equals operator (>=).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.OperatorType.GreaterThan">
            <summary>
            Represents the greater-than operator (>).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.OperatorType.Equals">
            <summary>
            Represents the equals operator (=).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.OperatorType.Concatenation" -->
        <member name="F:GrapeCity.CalcEngine.OperatorType.Subtraction">
            <summary>
            Represents the subtraction operator (-).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.OperatorType.Addition">
            <summary>
            Represents the addition operator (+).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.OperatorType.Division">
            <summary>
            Represents the division operator (/).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.OperatorType.Multiplication">
            <summary>
            Represents the multiplication operator (*).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.OperatorType.Exponentiation">
            <summary>
            Represents the exponentiation operator (^).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.ExternalReferenceSourceWithIndex">
            <summary>
            [1]Sheet1,
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Symbol">
            <summary>
            Indicates a symbol which its expression will be solved later by NameManager or caller (for cell reference).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Range">
            <summary>
            [: (colon)] Indicates a Range operator, which produces one reference to all the cells between two references, including the two references
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Reference3D">
            <summary>
            [: (colon)] Indicates a 3D-Reference operator
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.ReferenceSource">
            <summary>
            [!]
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.ExternalReferenceSourceWithName">
            <summary>
            'xxx[book_name]sheet_name'!
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Union">
            <summary>
            [, (comma)] Indicates Union operator, which combines multiple references into one reference
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Field">
            <summary>
            Indicates the field operator: A1.Name
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.EncodedField">
            <summary>
            Indicates the encoded field name: A1.[The name]
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.HalfEncodedField">
            <summary>
             Indicate the endcoded field name : A.[The name
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.ActiveSheet">
            <summary>
            '!' without reference source to indicate the active sheet. Work with defined name only
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Negation">
            <summary>
            [- (minus sign)] Negation
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Plus">
            <summary>
            [+ (plus sign)] Plus
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Percentage">
            <summary>
            [% (percent sign)] Percent
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Anchor">
            <summary>
            [# (anchor operator)] for dynamic array
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.ImplicitIntersection">
            <summary>
            [@ (implicit intersection operator)] for dynamic array
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Exponent">
            <summary>
            [^ (caret)] Exponentiation
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Multiply">
            <summary>
            [* (asterisk)] Multiplication
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Divide">
            <summary>
            [/ (forward slash)] Division
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Add">
            <summary>
            [+ (plus sign)] Addition
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Subtract">
            <summary>
            [- (minus sign)] Subtraction
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.TokenSubType.Concat" -->
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Intersect">
            <summary>
            [(space)] Indicates Intersection operator, which produces on reference to cells common to the two references
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Missing">
            <summary>
            Indicates Missing binary operator which doesn't have any symbol
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.GreaterThan">
            <summary>
            [> (greater than sign)]
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.TokenSubType.GreaterThanOrEquals">
            <summary>
            [>= (greater than or equal to sign)]
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.TokenSubType.LessThan" -->
        <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.TokenSubType.LessThanOrEquals" -->
        <!-- Badly formed XML comment ignored for member "F:GrapeCity.CalcEngine.TokenSubType.DoesNotEquals" -->
        <member name="F:GrapeCity.CalcEngine.TokenSubType.Equals">
            <summary>
            [= (equal sign)]
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Tokenizer.GetSingleQuoteStringOperand(GrapeCity.CalcEngine.Token@)">
            <summary>
            Gets the single quote string operand. The "index" and "length" will be modified to set correct position for the expression.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Tokenizer.ReadR1C1HalfPart(System.Int32@,System.Char)">
            <summary>
            Reads the half part of R1C1 reference.
            </summary>
            <param name="currentPos">The current position.</param>
            <param name="prefix">A character value indicates the R or C prefix in uppercase.</param>
            <returns><c>true</c> if the R1C1 syntax is read successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrecedentNode.IsSame(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32)">
            <summary>
            Determines whether the PrecedentNode points to the specified cell.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrecedentNode.IsSame(GrapeCity.CalcEngine.IReferenceSource,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the PrecedentNode points to the specified cell range.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.PrecedentNode.RowCount">
            <summary>
            Gets or sets the row count of precedent node.
            </summary>
            <value>An integer value indicates the row count.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.PrecedentNode.ColumnCount">
            <summary>
            Gets or sets the row count of precedent node.
            </summary>
            <value>An integer value indicates the row count.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrecedentNode.IsSingleRow">
            <summary>
            Gets a value indicating whether this instance is single row.
            </summary>
            <value><c>true</c> if this instance is single row; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrecedentNode.IsSingleColumn">
            <summary>
            Gets a value indicating whether this instance is single column.
            </summary>
            <value><c>true</c> if this instance is single column; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrecedentNode.ContainsColumn(System.Int32)">
            <summary>
            Determines whether the specified column contains column.
            </summary>
            <param name="column">The column.</param>
            <returns><c>true</c> if the specified column contains column; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrecedentNode.ContainsRow(System.Int32)">
            <summary>
            Determines whether the specified row contains row.
            </summary>
            <param name="row">The row.</param>
            <returns><c>true</c> if the specified row contains row; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrecedentFlags.AffectToDependencies">
            <summary>
            Indicates that if any cells from this range is changed, the dependencies of target cell will be changed.
            Normally, it's turned ON by functions like OFFSET, INDIRECT...
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrecedentFlags.AbsoluteReference">
            <summary>
            Indicates that the whole reference is absolute row(s). If RelativeReference is turned off too, it's mixed reference.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrecedentFlags.RelativeReference">
            <summary>
            Indicates that the whole reference is relative row(s). If AbsoluteReference is turned off too, it's mixed reference.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrecedentFlags.Adjustable">
            <summary>
            Indicates that the reference can be adjustable. Without this flag, the reference is used for calculating only.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrecedentFlags.RowVisibility">
            <summary>
            Indicates that evaluating must depends on row visibility
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrecedentFlags.StructuredDependencies">
            <summary>
            Indicates that the cells from this range are evaluated from a structured object.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrecedentFlags.AffectNoData">
            <summary>
            Indicates that this cell range is for adjusting but not cause re-evaluated.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrecedentFlags.ExternalVariable">
            <summary>
            Indicates that the precedent is for external variable.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrecedentFlags.SpilledArray">
            <summary>
            Indicates that the precedent is the range of a spilled array.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrecedentFlags.ExternalReference">
            <summary>
            Indicates that the precedent belong to an external workbook
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.PrecedentFlags.NumberFormats">
            <summary>
            Indicates that evaluating must depends on number format(s)
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.PrimitiveValue">
            <summary>
            Class PrimitiveValue.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.IPrimitiveValue" />
        </member>
        <member name="P:GrapeCity.CalcEngine.PrimitiveValue.GrapeCity#CalcEngine#IReadonlyPrimitiveValue#ValueType">
            <summary>
            Gets the value type of this <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> instance.
            </summary>
            <value>The type of the data of the <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> instance.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GetNumber(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets numeric value from the <see cref="T:GrapeCity.CalcEngine.Value"/> object.
            </summary>
            <param name="context">The evaluation context.</param>
            <returns>The numeric value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GetError(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.CalcError"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.CalcError"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GetLogical(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GetDate(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GetTime(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets the <see cref="F:GrapeCity.CalcEngine.PrimitiveValue._timeSpan"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="F:GrapeCity.CalcEngine.PrimitiveValue._timeSpan"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GetLogical(GrapeCity.CalcEngine.EvaluationContext,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <param name="defaultValue"><paramref name="defaultValue"/> will be returned if the value of this instance is empty.</param>
            <returns>An <see cref="T:System.Boolean" /> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GetValue">
            <summary>
            Gets the value as abstract object.
            </summary>
            <returns>An object represents the value of this <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GetText(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets the <see cref="T:System.String"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GetText(System.Globalization.CultureInfo)">
            <summary>
            Gets the <see cref="T:System.String"/> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.SetValue(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.PrimitiveValue)">
            <summary>
            Copy data of <paramref name="value"/> parameter to the current <see cref="T:GrapeCity.CalcEngine.Value"/> object.
            </summary>
            <param name="value">The <paramref name="value"/> parameter to copy.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.SetValue(GrapeCity.CalcEngine.EvaluationContext,System.Double)">
            <summary>
            Sets a number with checking value.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.SetValue(System.Double)">
            <summary>
            Sets a number without checking value.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.SetValue(GrapeCity.CalcEngine.EvaluationContext,System.String)">
            <summary>
            Sets a string with checking value.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.SetValue(System.TimeSpan)">
            <summary>
            Set a value as TimeSpan. For spread win
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.SetValue(System.DateTime)">
            <summary>
            Set a DateTime value. For spread win
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.SetValue(System.String)">
            <summary>
            Sets a string without checking value.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.SetValue(System.Object,System.Boolean)">
            <summary>
            Sets the <see cref="T:System.Object" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to set.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.SetCustomValue(System.Object)">
            <summary>
            Set the evaluated value as object.
            </summary>
            <param name="value">The custom object.</param>
            <remarks>This function must be invoked strictly.</remarks>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.CompareTo(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.PrimitiveValue)">
            <summary>
            Compares the current <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> value with the specified value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="value">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object indicates the value to compare with.</param>
            <returns>A <see cref="T:System.Int32"/> value represents the comparing result.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.CompareToXLookup(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.PrimitiveValue,System.Boolean)">
            <summary>
            Compares the current <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> value with the specified value. Data type will affect the comparison result.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="value">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object indicates the value to compare with.</param>
            <returns>A <see cref="T:System.Int32"/> value represents the comparing result.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.CompareTo(GrapeCity.CalcEngine.EvaluationContext,System.String)">
            <summary>
            Compares the current <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> value with the specified value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="value">A <see cref="T:System.String"/> value indicates the value to compare with.</param>
            <returns>A <see cref="T:System.Int32"/> value represents the comparing result.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.CompareTo(GrapeCity.CalcEngine.EvaluationContext,System.Double)">
            <summary>
            Compares the current <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> value with the specified value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="value">A <see cref="T:System.Double"/> value indicates the value to compare with.</param>
            <returns>A <see cref="T:System.Int32"/> value represents the comparing result.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.CompareTo(GrapeCity.CalcEngine.EvaluationContext,System.DateTime)">
            <summary>
            Compares the current <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> value with the specified value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="value">A <see cref="T:System.DateTime"/> value indicates the value to compare with.</param>
            <returns>A <see cref="T:System.Int32"/> value represents the comparing result.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.CompareTo(GrapeCity.CalcEngine.EvaluationContext,System.Boolean)">
            <summary>
            Compares the current <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> value with the specified value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="value">A <see cref="T:System.Boolean"/> value indicates the value to compare with.</param>
            <returns>A <see cref="T:System.Int32"/> value represents the comparing result.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.Compare(GrapeCity.CalcEngine.EvaluationContext,System.Double,GrapeCity.CalcEngine.PrimitiveValue)">
            <summary>
            Compares the specified value with a <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="number">A <see cref="T:System.Double"/> value indicates the value to compare.</param>
            <param name="value">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object indicates the value to compare with.</param>
            <returns>A <see cref="T:System.Int32"/> value represents the comparing result.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.Compare(GrapeCity.CalcEngine.EvaluationContext,System.Boolean,GrapeCity.CalcEngine.PrimitiveValue)">
            <summary>
            Compares the specified value with a <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="boolean">A <see cref="T:System.Boolean"/> value indicates the value to compare.</param>
            <param name="value">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object indicates the value to compare with.</param>
            <returns>A <see cref="T:System.Int32"/> value represents the comparing result.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.Compare(GrapeCity.CalcEngine.EvaluationContext,System.String,GrapeCity.CalcEngine.PrimitiveValue)">
            <summary>
            Compares the specified value with a <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="text">A <see cref="T:System.String"/> value indicates the value to compare.</param>
            <param name="value">A <see cref="T:GrapeCity.CalcEngine.PrimitiveValue"/> object indicates the value to compare with.</param>
            <returns>A <see cref="T:System.Int32"/> value represents the comparing result.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GrapeCity#CalcEngine#IReadonlyPrimitiveValue#GetDate(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.Boolean" /> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GrapeCity#CalcEngine#IReadonlyPrimitiveValue#GetTime(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.Boolean" /> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GrapeCity#CalcEngine#IReadonlyPrimitiveValue#GetLogical(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.Boolean" /> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GrapeCity#CalcEngine#IReadonlyPrimitiveValue#GetNumber(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:System.Double" /> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.Double" /> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GrapeCity#CalcEngine#IReadonlyPrimitiveValue#GetError(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.CalcError" /> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.CalcError" /> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GrapeCity#CalcEngine#IReadonlyPrimitiveValue#GetText(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the <see cref="T:System.String" /> value.
            </summary>
            <param name="context">The evaluation context to get value.</param>
            <returns>An <see cref="T:System.String" /> value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GrapeCity#CalcEngine#IPrimitiveValue#CompareTo(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.IPrimitiveValue)">
            <summary>
            Compares this instance to a specified <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> object and returns an indication of their relative values.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="value">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> value to compare.</param>
            <returns>A signed number indicating the relative values of this instance and value.Return Value Description Less than zero This instance is less than value. Zero This instance is equal to value. Greater than zero This instance is greater than value.-or- value is null.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GrapeCity#CalcEngine#IPrimitiveValue#SetValue(GrapeCity.CalcEngine.IEvaluationContext,System.Double)">
            <summary>
            Sets the <see cref="T:System.Double" /> value.
            </summary>
            <param name="context">The context.</param>
            <param name="value">The <see cref="T:System.Double" /> value to set.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.PrimitiveValue.GrapeCity#CalcEngine#IPrimitiveValue#SetValue(GrapeCity.CalcEngine.IEvaluationContext,System.String)">
            <summary>
            Sets the <see cref="T:System.String" /> value.
            </summary>
            <param name="context">The context.</param>
            <param name="value">The <see cref="T:System.String" /> value to set.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.RangeReference">
            <summary>
            Represents a contextual range reference.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.RangeReference.TopLeft">
            <summary>
            Gets the top-left cell reference.
            </summary>
            <value>A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value represents the top-left cell reference.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.RangeReference.BottomRight">
            <summary>
            Gets the bottom-right cell reference.
            </summary>
            <value>A <see cref="T:GrapeCity.CalcEngine.CellReference"/> value represents the bottom-right cell reference.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsAbsolute">
            <summary>
            Gets a value indicating whether this reference is absolute reference.
            </summary>
            <value><c>true</c> if this reference is absolute reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsRelative">
            <summary>
            Gets a value indicating whether this reference is relative reference.
            </summary>
            <value><c>true</c> if this reference is relative reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsMixedReference">
            <summary>
            Gets a value indicating whether this refrence contains both of relative reference and absolute reference.
            </summary>
            <value><c>true</c> if this refrence contains both of relative reference and absolute reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsValid">
            <summary>
            Return <c>true</c> if this <see cref="T:GrapeCity.CalcEngine.RangeReference"/> object represents a valid range reference.
            </summary>
            <returns><c>true</c> if this <see cref="T:GrapeCity.CalcEngine.RangeReference"/> object represents a valid range reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsLetterOnly">
            <summary>
            Determines whether the range reference is parsed from letter only ("A").
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsColumnRelative">
            <summary>
            Gets a value indicating whether this instance is column relative.
            </summary>
            <value><c>true</c> if this instance is column relative; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsRowRelative">
            <summary>
            Gets a value indicating whether this instance is row relative.
            </summary>
            <value><c>true</c> if this instance is row relative; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsRowAbsolute">
            <summary>
            Gets a value indicating whether this instance is row absolute.
            </summary>
            <value><c>true</c> if this instance is row absolute; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.ContainsRowRelative">
            <summary>
            Gets a value indicating whether this instance contains row relative.
            </summary>
            <value><c>true</c> if this instance contains row relative; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsValid(GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Indicates whether this RangeReference is valid in the specified reference source.
            </summary>
            <param name="source">The source.</param>
            <returns><c>true</c> if this RangeReference is valid in the specified reference source; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.RangeReference.Column">
            <summary>
            Gets the index of the left column.
            </summary>
            <value>An integer represents the index of the left column.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.RangeReference.Row">
            <summary>
            Gets the index of the top row.
            </summary>
            <value>An integer represents the index of the top row.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.RangeReference.Column2">
            <summary>
            Gets the index of the right column.
            </summary>
            <value>An integer represents the index of the right column.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.RangeReference.Row2">
            <summary>
            Gets the index of the bottom row.
            </summary>
            <value>An integer represents the index of the bottom row.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.Transpose">
            <summary>
            Transposes (rotate) rows to columns and vice versa.
            </summary>
            <returns>A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value represents the transposed <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.RangeReference.IsSingleColumn">
            <summary>
            Gets a value indicating whether this reference contains one single column.
            </summary>
            <value><c>true</c> if this reference contains one single column; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.RangeReference.IsSingleRow">
            <summary>
            Gets a value indicating whether this reference contains one single row.
            </summary>
            <value><c>true</c> if this reference contains one single row; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.RangeReference.IsWholeRow">
            <summary>
            Gets a value indicating whether this instance is whole row.
            </summary>
            <value><c>true</c> if this instance is whole row; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.RangeReference.IsWholeColumn">
            <summary>
            Gets a value indicating whether this instance is whole column.
            </summary>
            <value><c>true</c> if this instance is whole column; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsOneCell">
            <summary>
            Gets a value indicating whether this reference is one cell.
            </summary>
            <value><c>true</c> if this reference is one cell; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.Offset(System.Int32,System.Int32)">
            <summary>
            Translates this <seealso cref="T:GrapeCity.CalcEngine.RangeReference"/> by the specified amount.
            </summary>
            <param name="translateRows">The amount to offset the y-coordinate.</param>
            <param name="translateColumns">>The amount to offset the x-coordinate.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.ToNormalRange(System.Int32,System.Int32)">
            <summary>
            Retuns the whole range when the reference is whole column or whole row. 
            </summary>
            <param name="rowCount"></param>
            <param name="columnCount"></param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.OffsetAbsolute(System.Int32,System.Int32)">
            <summary>
            Translates all absolute elements of this <seealso cref="T:GrapeCity.CalcEngine.RangeReference"/> by the specified amount.
            </summary>
            <param name="translateRows">The amount to offset the y-coordinate.</param>
            <param name="translateColumns">>The amount to offset the x-coordinate.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.RemoveRowColumnReferences(System.Int32,System.Int32)">
            <summary>
            Convert the reference to normal cell range reference.
            </summary>
            <param name="rowCount">The row count of the reference source.</param>
            <param name="columnCount">The column count of the reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.ToAbsolute(System.Int32,System.Int32)">
            <summary>
            Returns the absolute reference of the <see cref="T:GrapeCity.CalcEngine.RangeReference"/> object which relates with the context cell
            (specified by <paramref name="contextRow"/> and <paramref name="contextColumn"/>.
            </summary>
            <param name="contextRow">An integer indicates the row index of context cell.</param>
            <param name="contextColumn">An integer indicates the column index of context cell.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.ToRelative(System.Int32,System.Int32)">
            <summary>
            Returns the target reference of the <see cref="T:GrapeCity.CalcEngine.RangeReference"/> object which relates with the context cell
            (specified by <paramref name="contextRow"/> and <paramref name="contextColumn"/>.
            Position state of the <see cref="T:GrapeCity.CalcEngine.RangeReference"/> is unchanged.
            </summary>
            <param name="contextRow">An integer indicates the row index of context cell.</param>
            <param name="contextColumn">An integer indicates the column index of context cell.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.ToContextWithoutReorder(System.Int32,System.Int32)">
            <summary>
            Returns the target reference of the <see cref="T:GrapeCity.CalcEngine.RangeReference"/> object which relates with the context cell
            (specified by <paramref name="contextRow"/> and <paramref name="contextColumn"/>.
            Position state of the <see cref="T:GrapeCity.CalcEngine.RangeReference"/> is unchanged.
            </summary>
            <param name="contextRow">An integer indicates the row index of context cell.</param>
            <param name="contextColumn">An integer indicates the column index of context cell.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.ApplyContext(System.Int32,System.Int32)">
            <summary>
            Convert the <see cref="T:GrapeCity.CalcEngine.RangeReference"/> object to absolute reference which relates with the context cell
            (specified by <paramref name="contextRow"/> and <paramref name="contextColumn"/>.
            </summary>
            <param name="contextRow">An integer indicates the row index of context cell.</param>
            <param name="contextColumn">An integer indicates the column index of context cell.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.ToAbsolute">
            <summary>
            Removes relate reference flag(s) to get the absolute reference.
            </summary>
            <returns>A <see cref="!:RangeReference."/> value represents the absolute reference of this reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.Equals(GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.RangeReference"/> is equal to another <see cref="T:GrapeCity.CalcEngine.RangeReference"/> of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.RangeReference"/> is equal to the other <see cref="T:GrapeCity.CalcEngine.RangeReference"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.Equals(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.RangeReference"/> is equal to another <see cref="T:GrapeCity.CalcEngine.RangeReference"/> of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.RangeReference"/> is equal to the other <see cref="T:GrapeCity.CalcEngine.RangeReference"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.CompareTo(GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Compares the current <see cref="T:GrapeCity.CalcEngine.RangeReference"/> with another <see cref="T:GrapeCity.CalcEngine.RangeReference"/>.
            </summary>
            <param name="other">A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> to compare with this <see cref="T:GrapeCity.CalcEngine.RangeReference"/>.</param>
            <returns>A value that indicates the relative order of the <see cref="T:GrapeCity.CalcEngine.RangeReference"/> values being compared.
            The return value has the following meanings:
            Less than zero: This object is less than the other parameter.
            Zero: This object is equal to other.
            Greater than zero: This object is greater than other.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns><c>true</c> if this instance is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference"/> struct.
            </summary>
            <param name="row">An integer value indicates the row index.</param>
            <param name="column">An integer value indicates the column index.</param>
            <param name="position">A <see cref="T:GrapeCity.CalcEngine.CellRelation"/> value indicates whether the reference is relative and/or absolute.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference"/> struct.
            </summary>
            <param name="row">An integer value indicates the absolute top row index.</param>
            <param name="column">An integer value indicates the absolute left column index.</param>
            <param name="row2">An integer value indicates the absolute bottom row index.</param>
            <param name="column2">An integer value indicates the absolute right column index.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation,System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference"/> struct.
            </summary>
            <param name="row">An integer value indicates the top row index.</param>
            <param name="column">An integer value indicates the left column index.</param>
            <param name="topLeftPosition">A <see cref="T:GrapeCity.CalcEngine.CellRelation"/> value indicates whether the top-left reference is relative and/or absolute.</param>
            <param name="row2">An integer value indicates the bottom row index.</param>
            <param name="column2">An integer value indicates the right column index.</param>
            <param name="bottomRightPosition">A <see cref="T:GrapeCity.CalcEngine.CellRelation"/> value indicates whether the bottom-right reference is relative and/or absolute.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.#ctor(GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.CellReference)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReference"/> struct.
            </summary>
            <param name="topLeft">The top left reference.</param>
            <param name="bottomRight">The bottom right reference.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.Union(GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Unions the specified range reference to the current range reference.
            </summary>
            <param name="rangeReference">The specified range reference to union.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.Union(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Unions the specified range reference to the current range reference.
            </summary>
            <param name="rangeReference">The specified range reference to union.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IntersectWith(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Intersects this <see cref="T:GrapeCity.CalcEngine.RangeReference"/> range with the specified <see cref="T:GrapeCity.CalcEngine.RangeReference"/> range.
            </summary>
            <param name="range">The <see cref="T:GrapeCity.CalcEngine.RangeReference"/> range to intersect with.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> range represents the intersected <see cref="T:GrapeCity.CalcEngine.RangeReference"/> range.</returns>
            <remarks>
            Make sure that all rows and columns are all absolute or relative.
            </remarks>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.Translate(System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation)">
            <summary>
            Translates this <seealso cref="T:GrapeCity.CalcEngine.RangeReference" /> by the specified amount.
            </summary>
            <param name="translateRow">The amount to offset the y-coordinate.</param>
            <param name="translateColumn">The amount to offset the x-coordinate.</param>
            <param name="position">A <see cref="T:GrapeCity.CalcEngine.CellRelation"/> value indicates whether the reference is relative and/or absolute.</param>
            <returns>The new translated <seealso cref="T:GrapeCity.CalcEngine.RangeReference" /> instance.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.Translate(System.Int32,System.Int32)">
            <summary>
            Translates this <seealso cref="T:GrapeCity.CalcEngine.RangeReference" /> by the specified amount.
            </summary>
            <param name="translateRow">The amount to offset the y-coordinate.</param>
            <param name="translateColumn">The amount to offset the x-coordinate.</param>
            <returns>The new translated <seealso cref="T:GrapeCity.CalcEngine.RangeReference" /> instance.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.Offset(System.Int32,System.Int32,GrapeCity.CalcEngine.CellRelation)">
            <summary>
            Translates this <seealso cref="T:GrapeCity.CalcEngine.RangeReference" /> by the specified amount.
            </summary>
            <param name="translateRow">The amount to offset the y-coordinate.</param>
            <param name="translateColumn">The amount to offset the x-coordinate.</param>
            <param name="position">A <see cref="T:GrapeCity.CalcEngine.CellRelation"/> value indicates whether the reference is relative and/or absolute.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsIntersected(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Determines whether this reference is intersected with the specified reference.
            </summary>
            <param name="rangeReference">The range reference.</param>
            <returns><c>true</c> if this reference is intersected with the specified reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsIntersected(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether this reference is intersected with the specified reference.
            </summary>
            <param name="row">An integer value indicates the top row index of cell range.</param>
            <param name="column">An integer value indicates the left column index of cell range.</param>
            <param name="row2">An integer value indicates the bottom row index of cell range.</param>
            <param name="column2">An integer value indicates the right column index of cell range.</param>
            <returns><c>true</c> if the specified row is intersected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsRowIntersected(System.Int32,System.Int32)">
            <summary>
            Determines whether this reference is intersected with the specified reference.
            </summary>
            <param name="row">An integer value indicates the top row index of cell range.</param>
            <param name="row2">An integer value indicates the bottom row index of cell range.</param>
            <returns><c>true</c> if this reference is intersected with the specified reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsColumnIntersected(System.Int32,System.Int32)">
            <summary>
            Determines whether this reference is intersected with the specified reference.
            </summary>
            <param name="column">An integer value indicates the left column index of cell range.</param>
            <param name="column2">An integer value indicates the right column index of cell range.</param>
            <returns><c>true</c> if this reference is intersected with the specified reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsColumnIntersected(System.Int32)">
            <summary>
            Determines whether this reference is intersected with the specified reference.
            </summary>
            <param name="column">An integer value indicates the left column index of cell range.</param>
            <returns><c>true</c> if this reference is intersected with the specified reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsOverlapped(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Determines whether this reference is overlaped with the specified range reference.
            </summary>
            <param name="rangeReference">The range reference.</param>
            <returns><c>true</c> if this reference is overlaped with the specified range reference.; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.IsOverlapped(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether this reference is overlaped with the specified range reference.
            </summary>
            <param name="row">An integer value indicates the top row index of cell range.</param>
            <param name="column">An integer value indicates the left column index of cell range.</param>
            <param name="row2">An integer value indicates the bottom row index of cell range.</param>
            <param name="column2">An integer value indicates the right column index of cell range.</param>
            <returns><c>true</c> if this reference is overlaped with the specified range reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.ReorderAbsolute">
            <summary>
            Reorders an aboslute range reference.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.SwitchReferenceType">
            <summary>
            Switch the reference type of this <see cref="T:GrapeCity.CalcEngine.CellReference"/>.
            </summary>
            <returns>The new reference type.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReference.SwitchReferenceType(GrapeCity.CalcEngine.CellRelation)">
            <summary>
            Switch the reference type of this <see cref="T:GrapeCity.CalcEngine.CellReference"/> to the specified.
            </summary>
            <param name="newReferenceType">The new reference type.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.RangeReferenceExpression">
            <summary>
            Represents a <see cref="T:GrapeCity.CalcEngine.RangeOperatorExpression"/> operator expression which return the specified <see cref="T:GrapeCity.CalcEngine.RangeReference"/> result.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.RangeOperatorExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.#ctor(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReferenceExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="rangeRef">The range reference.</param>
            <param name="source">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.#ctor(GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReferenceExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="rangeRef">The range reference.</param>
            <param name="source">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.#ctor(GrapeCity.CalcEngine.RangeReference@,GrapeCity.CalcEngine.ExpressionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReferenceExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="rangeRef">The range reference.</param>
            <param name="source">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.#ctor(GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.ExpressionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeReferenceExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="rangeRef">The range reference.</param>
            <param name="source">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.Create(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Creates the range operator expression from the specified range reference.
            </summary>
            <param name="rangeReference">A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value indicates the specified range reference.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the range operator expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.Create(GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Creates the range operator expression from the specified range reference.
            </summary>
            <param name="rangeReference">A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value indicates the specified range reference.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> object represents the range operator expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.IsOverlapStructuredObjAreasCompletely(GrapeCity.CalcEngine.IStructuredObject,GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Determines whether the specified <paramref name="rangeRef"/> overlaps area(s) of the structured object completely.
            </summary>
            <param name="structuredObj">The structured object.</param>
            <param name="rangeRef">The range reference.</param>
            <returns><c>true</c> if the specified <paramref name="rangeRef"/> overlaps area(s) of the structured object completely; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.IsMovingOppositeSides(GrapeCity.CalcEngine.AdjustExpressionData@,GrapeCity.CalcEngine.RangeReference@,System.Byte@)">
            <summary>
            Adjust expression when moving one side of absRangeRef to overlap the opposite side but NOT moving horizontally or vertically.
            example case: absRangeRef: K11:O18, move J9:P12 => I17 (NOT K17), expect: J19:N20
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.CreateExternalRangeReferenceIfNeeded(GrapeCity.CalcEngine.AdjustExpressionData@,GrapeCity.CalcEngine.Expression,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            
            </summary>
            <param name="adjustExprData"></param>
            <param name="rightExpr"></param>
            <param name="refersBack"><c>true</c> if the adjusted expression of "rightExpr" need to refers back to "adjustExprData.ReferenceSource"</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The formula engine.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder,GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The formula engine.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
            <param name="rangeRef">The range reference to unparse.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeReferenceExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression">
            <summary>
            Represents a <see cref="T:GrapeCity.CalcEngine.RangeOperatorExpression"/> operator expression which return the specified absolute <see cref="T:GrapeCity.CalcEngine.RangeReference"/> result.
            </summary>
            <seealso cref="T:GrapeCity.CalcEngine.RangeReferenceExpression" />
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.#ctor(GrapeCity.CalcEngine.RangeReference@)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="rangeRef">The range reference.</param>
            <param name="source">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.#ctor(GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression"/> class.
            </summary>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the left argument.</param>
            <param name="leftExpr">An <see cref="T:GrapeCity.CalcEngine.Expression"/> object indicates the right argument.</param>
            <param name="rangeRef">The range reference.</param>
            <param name="source">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The formula engine.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.RangeAbsoluteReferenceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder,GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The formula engine.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
            <param name="rangeRef">The range reference to unparse.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.ReferenceSourceExpression">
            <summary>
            Represents a <see cref="T:GrapeCity.CalcEngine.ReferenceSourceExpression"/> expression which represents an <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object.
            </summary>
            <seealso cref="!:GrapeCity.CalcEngine.ConstantExpression&lt;GrapeCity.CalcEngine.IReferenceSource&gt;" />
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.#ctor(GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ReferenceSourceExpression"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.#ctor(GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.ExpressionTypes,GrapeCity.CalcEngine.ExpressionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.ReferenceSourceExpression"/> class.
            </summary>
            <param name="source">The value.</param>
            <param name="exprType">An <see cref="T:GrapeCity.CalcEngine.ExpressionTypes"/> value indicatse the type of this expression.</param>
            <param name="flags">An <see cref="T:GrapeCity.CalcEngine.ExpressionFlags"/> value indicates the state of this expression (including its returned value type if it's possible).</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
            <param name="refSource">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.CreateUndefinedReferenceSource(System.String)">
            <summary>
            Creates a <see cref="T:GrapeCity.CalcEngine.ReferenceSourceExpression"/> object represents an undefined reference source.
            </summary>
            <param name="sheetName">A string value indicates the name of undefined reference source.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.ReferenceSourceExpression"/> value represents an undefined reference source.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ReferenceSourceExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSourceExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.UndefinedReferenceSourceExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSourceExpression.CloneDeeply(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones (deeply clone) the current <see cref="T:GrapeCity.CalcEngine.Expression"/> using the specified parsing context.
            </summary>
            <param name="engine">A <see cref="T:GrapeCity.CalcEngine.FormulaEngine"/> object indicates the formula parser.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the deeply cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSourceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSourceExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.UndefinedReferenceSourceExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.IRichValue">
            <summary>
            Represents a rich cell value.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.IRichValue.ShowDetailsIcon">
            <summary>
            Gets or sets a boolean indicating whether to show the icon for <see cref="!:RichValue&lt;T&gt;"/> object.
            </summary>
            <remarks>
            <para>If the value is <c>true</c>, the icon of <see cref="!:RichValue&lt;T&gt;"/> object displays if it's available; otherwise, default icon displays.</para>
            <para>If the value is <c>false</c>, no icon displays.</para>
            <para>If the value is <c>null</c>, the icon of <see cref="!:RichValue&lt;T&gt;"/> object will display if it's available; otherwise, no icon displays.</para>
            </remarks>
        </member>
        <member name="P:GrapeCity.CalcEngine.IRichValue.FieldCount">
            <summary>
            Gets the total numbers of fields.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.IRichValue.GetFieldName(System.Int32)">
            <summary>
            Gets the name of field.
            </summary>
            <param name="index">An integer value indicates the field index.</param>
            <returns>A string value represents the name of field.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IRichValue.TryGetFieldValue(System.Int32,GrapeCity.CalcEngine.IPrimitiveValue)">
            <summary>
            Gets the specified field value from this <see cref="T:GrapeCity.CalcEngine.IRichValue"/> object.
            </summary>
            <param name="index">An integer value indicates the field index.</param>
            <param name="result">An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> object indicates the result.</param>
            <returns>A boolean value indicates whether the field value is returned successful.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IRichValue.TryGetFieldValue(System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Gets the specified field value from this <see cref="T:GrapeCity.CalcEngine.IRichValue"/> object.
            </summary>
            <param name="index">An integer value indicates the field index.</param>
            <param name="result">An <see cref="T:GrapeCity.CalcEngine.CellValue"/> object indicates the result.</param>
            <returns>A boolean value indicates whether the field value is returned successful.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IRichValue.TryGetFieldValue(System.String,System.Object@)">
            <summary>
            Gets the specified field value from this <see cref="T:GrapeCity.CalcEngine.IRichValue"/> object.
            </summary>
            <param name="name">The field name.</param>
            <param name="value">The field value.</param>
            <returns>A boolean value indicates whether the field value is returned successful.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IRichValue.IsSameField(GrapeCity.CalcEngine.IRichValue)">
            <summary>
            Gets a boolean value indicating whether this object has same fields as the specified object.
            </summary>
            <param name="value">The <see cref="T:GrapeCity.CalcEngine.IRichValue"/> object to compare.</param>
            <returns><c>true</c> if this object has same fields as the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.IRichValueArraySupport">
            <summary>
            Represents an interface that support spilling <see cref="T:GrapeCity.CalcEngine.IRichValue"/> object.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.IRichValueArraySupport.EvaluatedValueType">
            <summary>
            Gets or sets the current evaluated value type of the <see cref="T:GrapeCity.CalcEngine.IRichValue"/> object.
            </summary>
            <remarks>
            If the <see cref="T:GrapeCity.CalcEngine.IRichValue"/> object has <see cref="F:GrapeCity.CalcEngine.RichValueValueType.Array"/> type, it's assumed as mutable.
            </remarks>
        </member>
        <member name="T:GrapeCity.CalcEngine.RichValueValueType">
            <summary>
            Represents the evaluated value type of an <see cref="T:GrapeCity.CalcEngine.IRichValueArraySupport"/> object.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.RichValueValueType.Rich">
            <summary>
            An <see cref="T:GrapeCity.CalcEngine.IRichValue"/> value.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.RichValueValueType.Array">
            <summary>
            An array of values that will be spilled over cells.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.RichValueValueType.Primitive">
            <summary>
            An primitive value.
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.RootFinding.Brent">
            <summary>
            Algorithm by Brent, Van Wijngaarden, Dekker et al.
            Implementation inspired by Press, Teukolsky, Vetterling, and Flannery, "Numerical Recipes in C", 2nd edition, Cambridge University Press
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.RootFinding.Brent.DoubleWidth">
            <summary>
            The number of binary digits used to represent the binary number for a double precision floating
            point value. i.e. there are this many digits used to represent the
            actual number, where in a number as: 0.134556 * 10^5 the digits are 0.134556 and the exponent is 5.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.RootFinding.Brent.DoublePrecision">
            <summary>
            Standard epsilon, the maximum relative precision of IEEE 754 double-precision floating numbers (64 bit).
            According to the definition of Prof. Demmel and used in LAPACK and Scilab.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.RootFinding.Brent.PositiveDoublePrecision">
            <summary>
            Standard epsilon, the maximum relative precision of IEEE 754 double-precision floating numbers (64 bit).
            According to the definition of Prof. Higham and used in the ISO C standard and MATLAB.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.RootFinding.Brent.DefaultDoubleAccuracy">
            <summary>
            Value representing 10 * 2^(-53) = 1.11022302462516E-15
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.RootFinding.Brent.TryFindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached.</param>
            <param name="maxIterations">Maximum number of iterations. Usually 100.</param>
            <param name="root">The root that was found, if any. Undefined if the function returns false.</param>
            <returns>True if a root with the specified accuracy was found, else false.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GrapeCity.CalcEngine.StructuredReferenceExpression"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.#ctor(GrapeCity.CalcEngine.IStructuredObject,GrapeCity.CalcEngine.StructuredItemSpecifiers_,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.StructuredReferenceExpression"/> class.
            </summary>
            <param name="object">The object.</param>
            <param name="itemSpecifiers">The item specifiers.</param>
            <param name="fromColumnId">From column.</param>
            <param name="toColumnId">To column.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.#ctor(GrapeCity.CalcEngine.IStructuredObject)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.StructuredReferenceExpression"/> class.
            </summary>
            <param name="object">The object.</param>
            <param name="itemSpecifiers">The item specifiers.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.#ctor(GrapeCity.CalcEngine.IStructuredObject,GrapeCity.CalcEngine.StructuredItemSpecifiers_,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.StructuredReferenceExpression"/> class.
            </summary>
            <param name="object">The object.</param>
            <param name="itemSpecifiers">The item specifiers.</param>
            <param name="columnId">The column.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.AddImplicitIntersectionOperator">
            <summary>
            Converts the expression to implicit intersection operator expression for back-ward compatibility if needed.
            </summary>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.StructuredReferenceExpression.ExpressionCount">
            <summary>
            Gets the total count of child expression(s).
            </summary>
            <value>An integer value indicates the total count of child expression(s).</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.IsValidItemSpecifiers(GrapeCity.CalcEngine.StructuredItemSpecifiers_)">
            <summary>
            Determines whether the specified <see cref="T:GrapeCity.CalcEngine.StructuredItemSpecifiers_"/> value is valid for the expression.
            </summary>
            <param name="itemSpecifiers">A <see cref="T:GrapeCity.CalcEngine.StructuredItemSpecifiers_"/> value indicates which area to get data.</param>
            <returns><c>true</c> if the specified <see cref="T:GrapeCity.CalcEngine.StructuredItemSpecifiers_"/> value is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.EvaluateReference(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.IReferenceSource@,GrapeCity.CalcEngine.StructuredReferenceThisRowMode)">
            <summary>
            Evaluates this <see cref="T:GrapeCity.CalcEngine.StructuredReferenceExpression" /> to the corresponding range reference.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="refSource">The reference source which contains the structured object.</param>
            <param name="thisRowMode">Indicates how #ThisRow (@) will be evaluated.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value represents the corresponding range reference of this <see cref="T:GrapeCity.CalcEngine.StructuredReferenceExpression" />.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.EvaluateCore(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.GetStructuredObjectRange(GrapeCity.CalcEngine.IReferenceSource@)">
            <summary>
            Gets the range reference of the corresponding structured object.
            </summary>
            <param name="refSource">The corresponding reference source of the range reference.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value represents the corresponding range reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.EvaluateRebuildOnError(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            All used references will be appended to precedent list without actual evaluating because of CalcError.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.ConvertToRangeExpression(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.FormulaEngine,System.Boolean)">
            <summary>Converts this <see cref="T:GrapeCity.CalcEngine.StructuredReferenceExpression"/> to the corresponding range expression.</summary>
            <param name="evaluationContext">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> indicates the evaluation context.</param>
            <param name="engine">The formula engine.</param>
            <param name="isInDefinedName">if set to <c>true</c>, the process is inside a defined name's process.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.Expression"/> value represents the corresponding range expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.OnStructuredReferenceChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the structured object changed its internal structure (columns, show/hide totals/headers...)
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.OnReferenceSourcePositionChanged(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression after the reference source's position is changed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.Move(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is moved to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.Swap(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is swapped to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.Translate(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when the cell is copied to another location.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.InsertColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.InsertRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are inserted.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.RemoveColumns(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some columns are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.RemoveRows(GrapeCity.CalcEngine.AdjustExpressionData@)">
            <summary>
            Adjust the expression when some rows are removed.
            </summary>
            <param name="adjustData">The adjust data.</param>
            <returns>In case the expression isn't adjusted, the original expression will be returned. Otherwise, the adjusted expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.SetExpression(System.Int32,GrapeCity.CalcEngine.Expression)">
            <summary>
            Replaces the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression to replace.</param>
            <param name="expression">The expression to replace.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.GetExpression(System.Int32)">
            <summary>
            Gets the expression at the specified location.
            </summary>
            <param name="index">An integer value indicates the location of expression.</param>
            <returns>The expression at the specified location.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The formula engine.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.AppendStructuredColumnName(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Appends the column name of the structured reference.
            </summary>
            <param name="sb">The StringBuilder.</param>
            <param name="columnName">Name of the first column.</param>
            <param name="columnName2">Name of the second column.</param>
            <returns><c>true</c> if there is at least one escape character, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.AppendStructuredColumnName(System.Text.StringBuilder,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Appends the column name of the structured reference.
            </summary>
            <param name="sb">The StringBuilder.</param>
            <param name="columnName">Name of the column.</param>
            <returns><c>true</c> if there is at least one escape character, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.ChangeStructuredObject(GrapeCity.CalcEngine.IStructuredObject,GrapeCity.CalcEngine.IStructuredObject)">
            <summary>
            Returns the cloned structured reference expression with new <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/>.
            </summary>
            <param name="oldObject">An <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/> object indicates the old structured object.</param>
            <param name="newObject">An <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/> object indicates the new structured object.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.StructuredReferenceExpression"/> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredReferenceExpression.GetAutoFormatting(GrapeCity.CalcEngine.ICalcWorksheet,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets the auto formatting from the specified expression.
            </summary>
            <param name="worksheet">The context worksheet.</param>
            <param name="row">The context row.</param>
            <param name="column">The context column.</param>
            <returns>The built-in number format ID.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.StructuredReferenceThisRowMode">
            <summary>
            Represents how the #ThisRow (@) will be evaluated
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredReferenceThisRowMode.Standard">
            <summary>
            Process as normal
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredReferenceThisRowMode.IgnoreContextRow">
            <summary>
            The evaluated references will be converted to current relative row.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredReferenceThisRowMode.Ignore">
            <summary>
            Ignore the meaning of #ThisRow. Evaluated reference will be kept.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredReferenceThisRowMode.ConvertToRange">
            <summary>
            Ignore the meaning of #ThisRow. Change #ThisRow to data range of table.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredReferenceThisRowMode.ConvertToRangeFromDefinedName">
            <summary>
            Ignore the meaning of #ThisRow. Change #ThisRow to data range of table.
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.IStructuredObject">
            <summary>
            Represents a structured object which stores data as a spreadsheet.
            </summary>
            <seealso cref="!:System.IEquatable&lt;GrapeCity.CalcEngine.IStructuredObject&gt;" />
        </member>
        <member name="M:GrapeCity.CalcEngine.IStructuredObject.IsUndefined">
            <summary>
            Determines whether this <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/> object is undefined.
            </summary>
            <returns><c>true</c> if this <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/> object is undefined; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.IStructuredObject.Name">
            <summary>
            Gets the name of <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/> object.
            </summary>
            <value>A string value represents the name of <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/> object.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IStructuredObject.GetColumnId(System.String)">
            <summary>
            Gets the relative column index of the specified column.
            </summary>
            <param name="columnName">A string value indicates the specified column.</param>
            <returns>An integer value indicates the relative column index.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IStructuredObject.GetColumnName(System.Int32)">
            <summary>
            Gets the table column name of the specified column.
            </summary>
            <param name="id">An integer value indicates the column unique ID inside the structure object.</param>
            <returns>A string indicates the column name.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IStructuredObject.SetColumnName(System.Int32,System.String)">
            <summary>
            Gets the table column name of the specified column.
            </summary>
            <param name="index">An integer value indicates the table column index.</param>
            <param name="columnName">A string value indicates the specified column.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IStructuredObject.GetColumnIndex(System.Int32)">
            <summary>
            Get the table column index of the specified column.
            </summary>
            <param name="id">An integer value indicates the column unique ID inside the structure object.</param>
            <returns>An <see cref="T:System.Int32"/> value represents the table column index of the specified column.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.IStructuredObject.Range">
            <summary>
            Gets the range reference of the structured object.
            </summary>
            <value>A <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value represents the range of structured object.</value>
            <remarks>The <see cref="T:GrapeCity.CalcEngine.RangeReference"/> value must be absolute reference.</remarks>
        </member>
        <member name="P:GrapeCity.CalcEngine.IStructuredObject.HeaderRowCount">
            <summary>
            Gets the header row count.
            </summary>
            <value>An integer values represents the header row count.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IStructuredObject.TotalsRowCount">
            <summary>
            Gets the totals row count.
            </summary>
            <value>An integer value represents the totals row count.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IStructuredObject.ReferenceSource">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object which contains the <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/> object.
            </summary>
            <value>The <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> object which contains the <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/> object.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.IStructuredObject.GetReplacedStructuredObj">
            <summary>
            Get the replacement of this <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/> in case it is removed.
            </summary>
            <returns>The replacement of this <see cref="T:GrapeCity.CalcEngine.IStructuredObject"/>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.StructuredItemSpecifiers">
            <summary>
            Represents item specifiers of the structured object.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.All">
            <summary>
            The entire table, including column headers, data, and totals (if any).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.Data">
            <summary>
            Just the data rows.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.Headers">
            <summary>
            Just the header row.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.Totals">
            <summary>
            Just the total row. If none exists, then it returns null.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.ThisRow">
            <summary>
            Just the cells in the same row as the formula.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers.RowHeaders">
            <summary>
            The row headers
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers_.Default">
            <summary>
            Default item specifier. It has same effect with Data.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers_.All">
            <summary>
            The entire table, including column headers, data, and totals (if any).
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers_.Data">
            <summary>
            Just the data rows.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers_.Headers">
            <summary>
            Just the header row.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers_.Totals">
            <summary>
            Just the total row. If none exists, then it returns null.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers_.ThisRow">
            <summary>
            Just the cells in the same row as the formula.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.StructuredItemSpecifiers_.RowHeaders">
            <summary>
            The row headers
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredWorksheetExpression.#ctor(GrapeCity.CalcEngine.ICalcWorksheet)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.StructuredWorksheetExpression"/> class.
            </summary>
            <param name="worksheet">The worksheet.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredWorksheetExpression.#ctor(GrapeCity.CalcEngine.ICalcWorksheet,GrapeCity.CalcEngine.StructuredItemSpecifiers_,GrapeCity.CalcEngine.RangeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.CalcEngine.StructuredWorksheetExpression"/> class.
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="itemSpecifiers">A <see cref="T:GrapeCity.CalcEngine.StructuredItemSpecifiers_"/> value indicates which area to get data.</param>
            <param name="rangeReference">The range reference.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.StructuredWorksheetExpression.StructuredObject">
            <summary>
            Gets the structured worksheet.
            </summary>
            <value>An <see cref="T:GrapeCity.CalcEngine.ICalcWorksheet"/> object represents the structured worksheet.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredWorksheetExpression.IsValidItemSpecifiers(GrapeCity.CalcEngine.StructuredItemSpecifiers_)">
            <summary>
            Determines whether the specified <see cref="T:GrapeCity.CalcEngine.StructuredItemSpecifiers_"/> value is valid for the expression.
            </summary>
            <param name="itemSpecifiers">A <see cref="T:GrapeCity.CalcEngine.StructuredItemSpecifiers_"/> value indicates which area to get data.</param>
            <returns><c>true</c> if the specified <see cref="T:GrapeCity.CalcEngine.StructuredItemSpecifiers_"/> value is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredWorksheetExpression.Equals(GrapeCity.CalcEngine.Expression)">
            <summary>
            Indicates whether the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to another <see cref="T:GrapeCity.CalcEngine.Expression" />.
            </summary>
            <param name="other">The expression to compare.</param>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Expression" /> is equal to the other <see cref="T:GrapeCity.CalcEngine.Expression" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredWorksheetExpression.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredWorksheetExpression.Clone(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Clones the current <see cref="T:GrapeCity.CalcEngine.Expression" /> using the specified parsing context.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>An <see cref="T:GrapeCity.CalcEngine.Expression" /> value represents the cloned expression.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredWorksheetExpression.EvaluateRebuild(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Evaluates the <see cref="T:GrapeCity.CalcEngine.Expression" /> and set evaluated value to <paramref name="result" />. All used references will be appended to precedent list.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext" /> object indicates the evaluation context used to evaluate cell value.</param>
            <param name="result">The <see cref="T:GrapeCity.CalcEngine.Value" /> instance to set result value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredWorksheetExpression.EvaluateReference(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.IReferenceSource@,GrapeCity.CalcEngine.StructuredReferenceThisRowMode)">
            <summary>
            Evaluates this <see cref="T:GrapeCity.CalcEngine.StructuredReferenceExpression" /> to the coressponding range reference.
            </summary>
            <param name="context">The evaluation context to evaluate.</param>
            <param name="refSource">The reference source which contains the structured object.</param>
            <param name="thisRowMode">Indicates how #ThisRow (@) will be evaluated.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value represents the coressponding range reference of this <see cref="T:GrapeCity.CalcEngine.StructuredReferenceExpression" />.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredWorksheetExpression.GetStructuredObjectRange(GrapeCity.CalcEngine.IReferenceSource@)">
            <summary>
            Gets the range reference of the coressponding structured object.
            </summary>
            <param name="refSource">The coressponding reference source of the range reference.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.RangeReference" /> value represents the coressponding range reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.StructuredWorksheetExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.Expression" /> to the formula text.
            </summary>
            <param name="engine">The formula engine.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.SyntaxHighlight">
            <summary>
            Represents the syntax highlight information of a formula.
            </summary>
        </member>
        <member name="F:GrapeCity.CalcEngine.SyntaxHighlight._expression">
            <summary>
            The parsed expression may not fully valid. It can be used for syntax highlighting only.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlight.Formula">
            <summary>
            Gets the coressponding formula of this <see cref="T:GrapeCity.CalcEngine.SyntaxHighlight"/> value.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlight.Count">
            <summary>
            Gets the total number of highlight entries.
            </summary>
            <returns>An integer value represents the total number of highlight entries.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.SyntaxHighlight.Accept(GrapeCity.CalcEngine.ISyntaxHighlighter,System.Int32,System.Int32)">
            <summary>
            Accepts the specified syntax highlighter to process entries.
            </summary>
            <param name="syntaxHighlighter">The syntax highlighter.</param>
        </member>
        <member name="T:GrapeCity.CalcEngine.SyntaxHighlightEntry">
            <summary>
            Represents the syntax highlight information at the specified position of formula.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.SyntaxHighlightEntry.#ctor(System.Int32,System.Int32,GrapeCity.CalcEngine.RangeReference,System.Int32,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource,System.Boolean,System.Boolean,System.String,GrapeCity.CalcEngine.BuiltInFunctions.EncodeType)">
            <summary>
            Initializes the syntax highlight entry for a reference expression.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.SyntaxHighlightEntry.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the syntax highlight entry for a parenthesis expression.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.SyntaxHighlightEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,GrapeCity.CalcEngine.BuiltInFunctions.EncodeType,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes the syntax highlight entry for a field name expression.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsSpilledCell">
            <summary>
            Gets a value indicating whether the highlight entry is spill cell.
            </summary>
            <value><c>true</c> if the highligh entry is spill cell; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.FieldName">
            <summary>
            Gets the field name value when the highlight entry is field name expression.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsFieldName">
            <summary>
            Gets a value indicating whether the highlight entry is  field name.
            </summary>
            <value><c>true</c> if the highlight entry is filed name element; otherwise <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.EncodeType">
            <summary>
            Gets a value indicating whether the highlight entry is  encode with "[]" / "[" or no require encode.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.CharIndex">
            <summary>
            Gets the start character index of this <see cref="T:GrapeCity.CalcEngine.SyntaxHighlightEntry"/> in the formula.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsDefineName">
            <summary>
            Gets a value indicating whether the highlight entry is  define name.
            </summary>
            <value><c>true</c> if the highlight entry is define name element; otherwise <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsEvaluatedName">
            <summary>
            Gets a value indicating whether the highlight entry is  evalued name expression.
            </summary>
            <value><c>true</c> if the highlight entry is evaluated name element; otherwise <c>false</c>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.CharIndex2">
            <summary>
            Gets the end character index of this <see cref="T:GrapeCity.CalcEngine.SyntaxHighlightEntry"/> in the formula.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.CharLength">
            <summary>
            Gets the character length of this <see cref="T:GrapeCity.CalcEngine.SyntaxHighlightEntry"/> in the formula.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Function">
            <summary>
            Gets the corresponding <see cref="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Function"/> object of this highlight entry.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Count">
            <summary>
            Gets the total number of arguments.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.SyntaxHighlightEntry"/> value at the specified argument index.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.ArgbColor">
            <summary>
            Gets the ARGB color value of this highlight entry.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.IsColorized">
            <summary>
            Gets a boolean value indicates whether the syntax highlight entry should be colorized.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.Reference">
            <summary>
            Gets the coressponding reference of this entry.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.FirstSource">
            <summary>
            Gets the first coressponding reference of this entry.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.SyntaxHighlightEntry.LastSource">
            <summary>
            Gets the last coressponding reference of this entry.
            </summary>
        </member>
        <member name="T:GrapeCity.CalcEngine.ISyntaxHighlighter">
            <summary>
            Represents the syntax highlighter that perform highlighting.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.ISyntaxHighlighter.Visit(GrapeCity.CalcEngine.SyntaxHighlight,GrapeCity.CalcEngine.SyntaxHighlightEntry@)">
            <summary>
            Visits the specified syntax highlight entry.
            </summary>
            <param name="syntaxHighlight">The syntax highlight.</param>
            <param name="syntaxHighlightEntry">The syntax highlight entry to process.</param>
        </member>
        <member name="F:GrapeCity.CalcEngine.Value.Empty">
            <summary>
            Represents an empty value.
            </summary>
            <remarks>Caller must know that the logic will read from returned <see cref="T:GrapeCity.CalcEngine.Value"/> only.</remarks>
        </member>
        <member name="P:GrapeCity.CalcEngine.Value.GrapeCity#CalcEngine#IValue#ValueType">
            <summary>
            Gets the value type of this <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> instance.
            </summary>
            <value>The type of the data of the <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue" /> instance.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.Value.Start3DReferenceIndex">
            <summary>
            Gets or sets the start index of the 3D-Reference.
            </summary>
            <value>The start index of the 3D-Reference.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.Value.End3DReferenceIndex">
            <summary>
            Gets or sets the end index of the 3D-Reference.
            </summary>
            <value>The end index of the 3D-Reference.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.CreateValuesArray(System.Int32,System.Int32)">
            <summary>
            Creates the values array.
            </summary>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
            <returns>ValuesArray.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.CreateValuesArray(System.Int32,System.Int32,GrapeCity.CalcEngine.CellValue[])">
            <summary>
            Creates the values array.
            </summary>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
            <returns>ValuesArray.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GetOneCellAvailableNumberExceptLogical(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets numeric value from the <see cref="T:GrapeCity.CalcEngine.Value"/> object except logcial value. For reference, it accepts one cell only.
            </summary>
            <param name="context">The evaluation context.</param>
            <returns>The numeric value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.ReadValueFromNonPrimitive(GrapeCity.CalcEngine.EvaluationContext,System.Boolean)">
            <summary>
            Reads the primitive value from other kind of value types like Reference, ValuesArray...
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.ReadValueFromNonPrimitiveWithoutRefChecking(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Reads the primitive value from other kind of value types like Reference, ValuesArray...
            For reference, the top-left cell's value will be returned without checking row count or column count.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.CheckIfNotAvailable(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Checks if the current range reference value can be accessible to get value.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.AssignValueFromReference(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Read primitive value from reference of this <see cref="T:GrapeCity.CalcEngine.Value"/> and assign it to <paramref name="target"/>.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="target">A <see cref="T:GrapeCity.CalcEngine.Value"/> object indicates the target <see cref="T:GrapeCity.CalcEngine.Value"/> to assign primitive value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.AssignValueFromReference(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Read primitive value from reference of this <see cref="T:GrapeCity.CalcEngine.Value"/> and assign it to <paramref name="target"/>.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="target">A <see cref="T:GrapeCity.CalcEngine.Value"/> object indicates the target <see cref="T:GrapeCity.CalcEngine.Value"/> to assign primitive value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.AssignValueFromReferenceWithoutRefChecking(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.Value)">
            <summary>
            Read primitive value from reference of this <see cref="T:GrapeCity.CalcEngine.Value"/> and assign it to <paramref name="target"/>.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <param name="target">A <see cref="T:GrapeCity.CalcEngine.Value"/> object indicates the target <see cref="T:GrapeCity.CalcEngine.Value"/> to assign primitive value to.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.CopyTo(GrapeCity.CalcEngine.Value,System.Boolean)">
            <summary>
            Copies data from this <see cref="T:GrapeCity.CalcEngine.Value"/> to the specified <paramref name="result"/>.
            </summary>
            <param name="result">The destination <see cref="T:GrapeCity.CalcEngine.Value"/> to copy data to.</param>
            <param name="transfer">if set to <c>true</c>, the data will be removed from the source completely.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.AssignValue(GrapeCity.CalcEngine.EvaluationContext,System.Int32,System.Int32,GrapeCity.CalcEngine.Value)">
            <summary>
            Read value in the specified location of the current Value and assign to the target Value.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="rowOffset">An integer value indicates the row offset.</param>
            <param name="columnOffset">An integer value indicates the column offset.</param>
            <param name="target">The target Value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GrapeCity#CalcEngine#IValue#CreateValuesArray(System.Int32,System.Int32)">
            <summary>
            Creates a new values array.
            </summary>
            <param name="rowCount">An integer value indicates the row count of values array.</param>
            <param name="columnCount">An integer value indicates the column count of values array.</param>
            <returns>A <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> value represents the values array value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.ReleaseArrayConstants">
            <summary>
            Releases the <see cref="T:GrapeCity.CalcEngine.ArrayConstants"/> object to make sure that large unused memory is released.
            </summary>
            <remarks>This function is invoke to remove the reference of <see cref="F:GrapeCity.CalcEngine.Value._valuesArray"/> only. Don't change the value type.</remarks>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.SetValue(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.PrimitiveValue)">
            <summary>
            Copy data of <paramref name="value"/> parameter to the current <see cref="T:GrapeCity.CalcEngine.Value"/> object.
            </summary>
            <param name="value">The <paramref name="value"/> parameter to copy.</param>
        </member>
        <member name="P:GrapeCity.CalcEngine.Value.ReferenceSource">
            <summary>
            Gets the reference source of the evaluated reference(s).
            </summary>
            <value>The reference source of the evaluated reference(s).</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.SetReferenceSource(GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the reference source.
            </summary>
            <param name="refSource">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GrapeCity#CalcEngine#IValue#GetRowCount(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the row count of the evaluated range reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <returns>An integer value represents the row count of the evaluated range reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GetRowCount(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets the row count of the evaluated range reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <returns>An integer value represents the row count of the evaluated range reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GetVerticalCount(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets the row count of the evaluated range reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <returns>An integer value represents the row count of the evaluated range reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GrapeCity#CalcEngine#IValue#GetColumnCount(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Gets the column count of the evaluated range reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <returns>An integer value represents the column count of the evaluated range reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GetColumnCount(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets the column count of the evaluated range reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <returns>An integer value represents the column count of the evaluated range reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GetHorizontalCount(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets the column count of the evaluated range reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> object indicates the evaluation context.</param>
            <returns>An integer value represents the column count of the evaluated range reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.ApplyAccessibleReference(GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Update the accessible reference which convert "whole row" or "whole column" to [0 - row_count_1] or [0 - column_count_1].
            </summary>
            <param name="context">The evaluation context.</param>
            <returns>A <see cref="!:RangeReference."/> value represents the accessible reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.ContainsCell(System.Int32,System.Int32)">
            <summary>
            Determines whether the current evaluated range reference contains the specified cell.
            </summary>
            <param name="contextRow">An integer value indicates the row index.</param>
            <param name="contextColumn">An integer value indicates the column index.</param>
            <returns><c>true</c> if the evaluated range refernece contains the specified cell; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GetAccessibleReference(GrapeCity.CalcEngine.EvaluationContext)">
            <summary>
            Gets the accessible reference which convert "whole row" or "whole column" to [0 - row_count_1] or [0 - column_count_1].
            </summary>
            <param name="context">The evaluation context.</param>
            <returns>A <see cref="!:RangeReference."/> value represents the accessible reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GetAccessibleReference(GrapeCity.CalcEngine.EvaluationContext,System.Int32)">
            <summary>
            Gets the accessible reference which convert "whole row" or "whole column" to [0 - row_count_1] or [0 - column_count_1].
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="index">An integer value indicates the index of range reference.</param>
            <returns>A <see cref="!:RangeReference."/> value represents the accessible reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GetAccessible3DReference(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.IReferenceSource,System.Int32)">
            <summary>
            Gets the accessible reference which convert "whole row" or "whole column" to [0 - row_count_1] or [0 - column_count_1].
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="index">An integer value indicates the index of range reference.</param>
            <returns>A <see cref="!:RangeReference."/> value represents the accessible reference.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GrapeCity#CalcEngine#IValue#SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the reference.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="rangeRef">The range reference.</param>
            <param name="refSource">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GrapeCity#CalcEngine#IValue#SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.CellReference,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified cell reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
            <param name="cellRef">A <see cref="T:GrapeCity.CalcEngine.CellReference" /> value indicates the cell reference.</param>
            <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GrapeCity#CalcEngine#IValue#SetValue(GrapeCity.CalcEngine.IValuesArray)">
            <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.
            </summary>
            <param name="valuesArray">An <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> value represents the new value.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GrapeCity#CalcEngine#IValue#GetValuesArray">
            <summary>
            Gets the values array value.
            </summary>
            <returns>A <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> value represents the values array value.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.SetMultipleReferences(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.RangeReference[],System.Int32,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified reference array.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
            <param name="rangeRefs">An array of <see cref="T:GrapeCity.CalcEngine.RangeReference" /> represents the range references.</param>
            <param name="length">An integer value indicates the length of items to set.</param>
            <param name="source">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GrapeCity#CalcEngine#IValue#SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference[],GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified reference array.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
            <param name="rangeRefs">An array of <see cref="T:GrapeCity.CalcEngine.RangeReference" /> represents the range references.</param>
            <param name="refSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GrapeCity#CalcEngine#IValue#SetReference(GrapeCity.CalcEngine.IEvaluationContext,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue" /> to the specified 3D-reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.IEvaluationContext" /> value indicates the evaluation context.</param>
            <param name="rangeRef">The range reference.</param>
            <param name="startRefSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the start reference source.</param>
            <param name="endRefSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource" /> value indicates the end reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.SetMultipleReferences(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the multiple references. The inner data of <paramref name="references" /> won't be changed.
            </summary>
            <param name="context">The evaluation context.</param>
            <param name="reference">The reference.</param>
            <param name="source">The reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.Set3DReference(GrapeCity.CalcEngine.EvaluationContext,GrapeCity.CalcEngine.RangeReference,GrapeCity.CalcEngine.IReferenceSource,GrapeCity.CalcEngine.IReferenceSource)">
            <summary>
            Sets the value of this <see cref="T:GrapeCity.CalcEngine.IValue"/> to the specified 3D-reference.
            </summary>
            <param name="context">An <see cref="T:GrapeCity.CalcEngine.EvaluationContext"/> value indicates the evaluation context.</param>
            <param name="rangeRefs">An array of <see cref="T:GrapeCity.CalcEngine.RangeReference"/> represents the range references.</param>
            <param name="startRefSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> value indicates the start reference source.</param>
            <param name="endRefSource">An <see cref="T:GrapeCity.CalcEngine.IReferenceSource"/> value indicates the end reference source.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.IsNonPrimitiveValue">
            <summary>
            Determines whether value is non primitive or not.
            </summary>
            <returns><c>true</c> if [is non primitive value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.IsReferredOneCell">
            <summary>
            Determines whether the current <see cref="T:GrapeCity.CalcEngine.Value"/> object is a reference which represents one cell only.
            </summary>
            <returns><c>true</c> if the current <see cref="T:GrapeCity.CalcEngine.Value"/> object is one cell reference; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.ReleaseInSingleCellsEvaluating">
            <summary>
            Releases shared references which may be shared during a single cells evaluating.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.GetPrimitiveValue(GrapeCity.CalcEngine.IEvaluationContext)">
            <summary>
            Get primitive value from this <see cref="T:GrapeCity.CalcEngine.IValue"/> object.
            </summary>
            <returns>An <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> instance referred by this <see cref="T:GrapeCity.CalcEngine.IValue"/> object.</returns>
            <remarks>After this function is invoked, there is no guarranty that this object keeps unchanged.</remarks>
        </member>
        <member name="M:GrapeCity.CalcEngine.Value.SetArrayValues(System.Array)">
            <summary>
            Sets array of values as <see cref="T:GrapeCity.CalcEngine.ArrayConstants"/> type.
            </summary>
            <returns><c>true</c> if the array is set successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:GrapeCity.CalcEngine.IValuesArray">
            <summary>
            Represents a 2-dimensions array of values.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.IValuesArray.RowCount">
            <summary>
            Gets the row count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray"/>.
            </summary>
            <value>An integer value represents the row count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray"/>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IValuesArray.ColumnCount">
            <summary>
            Gets the column count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray"/>.
            </summary>
            <value>An integer value represents the column count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray"/>.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.IValuesArray.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> at the specified row and column.
            </summary>
            <param name="row">An integer value indicates the row index.</param>
            <param name="column">An integer value indicates the column index.</param>
            <returns>IPrimitiveValue.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValuesArray.Transpose">
            <summary>
            Transposes the rows and columns of this <see cref="T:GrapeCity.CalcEngine.IValuesArray"/>.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValuesArray.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes this <see cref="T:GrapeCity.CalcEngine.IValuesArray"/> to specified row count and column count.
            </summary>
            <param name="rowCount">The total number of rows.</param>
            <param name="columnCount">The total number of columns.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.IValuesArray.SetValue(System.Object)">
            <summary>
            Sets values to this <see cref="T:GrapeCity.CalcEngine.IValuesArray"/> object.
            </summary>
            <param name="values">The object that contains one or many values.</param>
            <returns><c>true</c> if values are set, <c>false</c> otherwise.</returns>
            <remarks>
            If <paramref name="values"/> is an array, its elements will be set to the corresponding element of this <see cref="T:GrapeCity.CalcEngine.IValuesArray"/> object. Otherwise, the same value will be set to all elements.
            </remarks>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.ContainsMultipleItems">
            <summary>
            Gets a boolean value indicating whether this array contains more than 1 item.
            </summary>
        </member>
        <member name="P:GrapeCity.CalcEngine.ArrayConstants.GrapeCity#CalcEngine#IValuesArray#RowCount">
            <summary>
            Gets the row count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.
            </summary>
            <value>An integer value represents the row count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.</value>
        </member>
        <member name="P:GrapeCity.CalcEngine.ArrayConstants.GrapeCity#CalcEngine#IValuesArray#ColumnCount">
            <summary>
            Gets the column count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.
            </summary>
            <value>An integer value represents the column count of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.</value>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.SetValue(System.Object)">
            <summary>
            Sets values to this <see cref="T:GrapeCity.CalcEngine.IValuesArray"/> object.
            </summary>
            <param name="values">The object that contains one or many values.</param>
            <returns><c>true</c> if values are set, <c>false</c> otherwise.</returns>
            <remarks>
            If <paramref name="values"/> is an array, its elements will be set to the corresponding element of this <see cref="T:GrapeCity.CalcEngine.IValuesArray"/> object. Otherwise, the same value will be set to all elements.
            </remarks>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.SetEmptyAsZero">
            <summary>
            Sets the empty items as zero numeric.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.ContainsManyItems">
            <summary>
            Determines whether this values array contains more than one item.
            </summary>
            <returns><c>true</c> if this values array contains more than one item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.Transpose">
            <summary>
            Transposes the rows and columns of this <see cref="T:GrapeCity.CalcEngine.IValuesArray" />.
            </summary>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes this <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> to specified row count and column count.
            </summary>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.Resize(System.Int32,System.Int32,GrapeCity.CalcEngine.CellValue[])">
            <summary>
            Resizes this <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> to specified row count and column count.
            </summary>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.SetArrayItem(System.Int32,System.Int32,GrapeCity.CalcEngine.CellValue@)">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> at the specified row and column.
            </summary>
            <param name="row">An integer value indicates the row index.</param>
            <param name="column">An integer value indicates the column index.</param>
            <returns>IPrimitiveValue.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.SetArrayItem(System.Int32,System.Int32,System.Object)">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> at the specified row and column.
            </summary>
            <param name="row">An integer value indicates the row index.</param>
            <param name="column">An integer value indicates the column index.</param>
            <returns>IPrimitiveValue.</returns>
        </member>
        <member name="P:GrapeCity.CalcEngine.ArrayConstants.GrapeCity#CalcEngine#IValuesArray#Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:GrapeCity.CalcEngine.IPrimitiveValue"/> at the specified row and column.
            </summary>
            <param name="row">An integer value indicates the row index.</param>
            <param name="column">An integer value indicates the column index.</param>
            <returns>IPrimitiveValue.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.Equals(GrapeCity.CalcEngine.ArrayConstants)">
            <summary>
            Determines whether the specified <see cref="T:GrapeCity.CalcEngine.ArrayConstants" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:GrapeCity.CalcEngine.ArrayConstants" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:GrapeCity.CalcEngine.ArrayConstants" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.System#IEquatable{GrapeCity#CalcEngine#IValuesArray}#Equals(GrapeCity.CalcEngine.IValuesArray)">
            <summary>
            Determines whether the specified <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:GrapeCity.CalcEngine.IValuesArray" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.GetRowData(System.Int32)">
            <summary>
            Gets all values from the specified row as new ValuesArray.
            </summary>
            <param name="rowIndex">An integer values indicates the row index.</param>
            <returns>A <see cref="!:ArrayConstants."/> value represents the new ValuesArray.</returns>
        </member>
        <member name="M:GrapeCity.CalcEngine.ArrayConstants.GetColumnData(System.Int32)">
            <summary>
            Gets all values from the specified column as new ValuesArray.
            </summary>
            <param name="columnIndex">An integer values indicates the column index.</param>
            <returns>A <see cref="!:ArrayConstants."/> value represents the new ValuesArray.</returns>
        </member>
        <member name="M:GrapeCity.Spreadsheet.CalcEngine.BuiltInFunctions.SingleFunctionExpression.Unparse(GrapeCity.CalcEngine.FormulaEngine,System.Text.StringBuilder)">
            <summary>
            Unparses the current <see cref="T:GrapeCity.CalcEngine.UnaryOperatorExpression" /> to the formula text.
            </summary>
            <param name="engine">The parser to unparse.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the formula text.</param>
        </member>
        <member name="M:GrapeCity.Spreadsheet.CalcEngine.BuiltInFunctions.SingleFunctionExpression.IsImplicitIntersectionOperatorAdded">
            <summary>
            Determine implicit intersection operator expression for back-ward compatibility is added.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.Spreadsheet.CalcEngine.BuiltInFunctions.SingleFunctionExpression.AddImplicitIntersectionOperatorIfNeeded(GrapeCity.CalcEngine.FormulaEngine)">
            <summary>
            Converts the expression to implicit intersection operator expression for back-ward compatibility if needed.
            </summary>
            <param name="engine">The formula engine.</param>
            <returns>The back-ward compatible expression.</returns>
        </member>
        <member name="T:GrapeCity.Spreadsheet.ICloneable`1">
            <summary>
            Supports cloning, which creates a new instance of a class with the same value as an existing instance.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:GrapeCity.Spreadsheet.ICloneable`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.IndexOf(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified character in this instance.
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="s">The string to check.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of value from the start of the string if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.IndexOfWhiteSpace(System.String,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified character in this instance.
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="s">The string to check.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of value from the start of the string if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.IndexOfWhiteSpace(System.Char*,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified character in this instance.
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="s">The string to check.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of value from the start of the string if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.IndexOf(System.Char*,System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified character in this instance.
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="pChars">The string to check.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of value from the start of the string if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance.
            The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number
            of character positions.
            </summary>
            <param name="s">The string to check.</param>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The starting position of the search. The search proceeds from startIndex toward the beginning of this instance.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.IsWhiteSpace(System.Char)">
            <summary>
            Determines whether the specified character is white-space character.
            </summary>
            <param name="c">The c.</param>
            <returns><c>true</c> if the specified character is white-space character; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.TrimBreakableSpace(System.String)">
            <summary>
            //Remove all leading and trailing occurrences of a character from the current string.
            </summary>
            <param name="s">The string to trim.</param>
            <returns>A string value represents the trimmed string.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.IsAsciiLetterOrDigit(System.Char)">
            <summary>
            Indicates whether the specified Unicode character isn't categorized as a letter or a decimal digit.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="c"/> isn't a letter or a decimal digit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.IsAsciiLetter(System.String)">
            <summary>
            Indicates whether the specified Unicode character isn't categorized as a letter.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="c"/> isn't a letter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.IsAsciiLetter(System.Char*,System.Int32)">
            <summary>
            Indicates whether the specified Unicode character isn't categorized as a letter.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="c"/> isn't a letter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.IsLetterOrDigit(System.String,System.Int32)">
            <summary>
            Indicates whether the specified Unicode character isn't categorized as a letter or a decimal digit.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="c"/> isn't a letter or a decimal digit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.GetAnsiCompatibleFromJapanese(System.String)">
            <summary>
            Gets the ANSI compatible characters from japanese characters.
            </summary>
            <param name="text">A string value indicates the origin text.</param>
            <returns>A string value represents the ANSI compatible characters.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.MemoryCopy(System.Byte*,System.Byte*,System.UInt32)">
            <summary>
            Memmoves the specified dest.
            </summary>
            <param name="src">The target address.</param>
            <param name="dest">The address of the bytes to copy.</param>
            <param name="bytesToCopy">The number of bytes to copy.</param>
        </member>
        <member name="M:GrapeCity.CoreRT.IsInfinityOrNaN(System.Double)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity or not a number.
            </summary>
            <param name="d">The d.</param>
            <returns><c>true</c> if <paramref name="d"/> evaluates to infinity or <see cref="F:System.Double.NaN"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.Replace(System.String,System.Char,System.Char)">
            <summary>
            Replaces all occurrences of a specified Unicode character in the specified string with another specified Unicode character.
            </summary>
            <param name="text">The string value to replace.</param>
            <param name="oldChar">The Unicode character to be replaced.</param>
            <param name="newChar">The Unicode character to replace all occurrences of oldChar.</param>
            <remarks>This function will changed the <paramref name="text"/> directly.</remarks>
        </member>
        <member name="M:GrapeCity.CoreRT.EqualsOrdinal(System.String,System.String)">
            <summary>
            Determines whether two specified String objects have the same value.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <returns><c>true</c> if the value of a is the same as the value of b; otherwise, <c>false</c>. If both a and b are null, the method returns <c>true</c>.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.StartsWithOrdinal(System.String,System.String,System.Int32)">
            <summary>
            Determines whether the beginning of the specified string matches another specified string. Strings are compared as ordinal.
            </summary>
            <param name="str">The string to check.</param>
            <param name="startsWith">The string to compare.</param>
            <param name="startsWith">The start character index to compare.</param>
            <returns><c>true</c> if <paramref name="str"/> starts with <paramref name="startsWith"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.CompareOrdinal(System.String,System.String)">
            <summary>
            Compares two specified <see cref="T:System.String"/> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char"/> objects in each string.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <returns>An integer that indicates the lexical relationship between the two comparands.</returns>
            <remarks>
            Less than zero    :   strA is less than strB.
            Zero              :   strA and strB are equal.
            Greater than zero :   strA is greater than strB.
            </remarks>
        </member>
        <member name="M:GrapeCity.CoreRT.CompareOrdinalIgnoreCase(System.String,System.String)">
            <summary>
            Compares two specified <see cref="T:System.String"/> objects using ordinal (binary) sort rules and ignoring the case of strings being compared.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <returns>An integer that indicates the lexical relationship between the two comparands.</returns>
            <remarks>
            Less than zero    :   strA is less than strB.
            Zero              :   strA and strB are equal.
            Greater than zero :   strA is greater than strB.
            
            When you compare a string constant, pass upppercase string for better performance.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GrapeCity.CoreRT.EqualsOrdinalIgnoreCase(System.String,System.String)" -->
        <member name="M:GrapeCity.CoreRT.EqualsOrdinalIgnoreCase(System.Char*,System.Int32,System.String)">
            <summary>
            Determines whether two specified String objects have the same value using ordinal (binary) sort rules and ignoring the case of strings being compared.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <returns><c>true</c> if the value of a is the same as the value of b; otherwise, <c>false</c>. If both a and b are null, the method returns <c>true</c>.</returns>
            <remarks>When you compare a string constant, pass upppercase string for better performance.</remarks>
        </member>
        <member name="M:GrapeCity.CoreRT.GetByteCount(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the total byte count from the specified sub-string.
            </summary>
            <param name="text">The text.</param>
            <param name="charIndex">Start index of the character to calculate.</param>
            <param name="length">The length of the calculated sub-string.</param>
            <param name="codepage">The codepage used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>.</param>
            <returns>The total byte count of the specified sub-string.</returns>
        </member>
        <member name="M:GrapeCity.CoreRT.GetCharacterLengthFromBytes(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the character length from bytes.
            </summary>
            <param name="text">The text.</param>
            <param name="charIndex">Start index of the character to calculate. Negative value indicates that we will calculate from right to left.</param>
            <param name="bytes">The bytes.</param>
            <param name="codepage">The codepage used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo"/>.</param>
            <returns>Negative value if the start index is in the middle of the character.</returns>
        </member>
    </members>
</doc>
